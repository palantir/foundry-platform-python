#  Copyright 2024 Palantir Technologies, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# coding: utf-8

"""
    Palantir OpenAPI

    The Palantir REST API. Please see https://www.palantir.com/docs for more details.

    The version of the OpenAPI document: 1.738.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from typing import Union

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated
from typing import Any, ClassVar, Dict, List, Literal, Optional, Set
from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictBool
from pydantic import StrictFloat
from pydantic import StrictInt
from pydantic import StrictStr
from pydantic import TypeAdapter
from typing_extensions import Self

from foundry.models.geo_point import GeoPoint
from foundry.models.line_string import LineString
from foundry.models.multi_line_string import MultiLineString
from foundry.models.multi_point import MultiPoint
from foundry.models.multi_polygon import MultiPolygon
from foundry.models.polygon import Polygon


class GeometryCollection(BaseModel):
    """
    GeoJSon geometry collection  GeometryCollections composed of a single part or a number of parts of a single type SHOULD be avoided when that single part or a single object of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could be used instead.
    """  # noqa: E501

    bbox: Optional[List[Union[StrictFloat, StrictInt]]] = Field(
        default=None,
        description='A GeoJSON object MAY have a member named "bbox" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries. ',
    )
    geometries: Optional[Annotated[List[Geometry], Field(min_length=0)]] = None
    type: Literal["GeometryCollection"]
    __properties: ClassVar[Set[str]] = set(("bbox", "geometries", "type"))

    model_config = {"populate_by_name": True, "validate_assignment": True, "extra": "forbid"}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str, *, allow_extra=False) -> Self:
        """Create an instance of GeometryCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str), allow_extra=allow_extra)

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in geometries (list)
        _items = []
        if self.geometries:
            for _item in self.geometries:
                if _item:
                    _items.append(_item.to_dict())
            _dict["geometries"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict, *, allow_extra=False) -> Self:
        """Create an instance of AsyncActionOperation from a dict"""
        # If allowing extra properties and the given object is a dict,
        # then remove any properties in the dict that aren't present
        # in the model properties list
        # We need to do this since the model config forbids additional properties
        # and this cannot be changed at runtime
        if (
            allow_extra
            and isinstance(obj, dict)
            and any(key not in cls.__properties for key in obj)
        ):
            obj = {key: value for key, value in obj.items() if key in cls.__properties}

        return cls.model_validate(obj)


# TODO: Rewrite to not use raise_errors
GeometryCollection.model_rebuild(raise_errors=False)


"""
Abstract type for all GeoJSon object except Feature and FeatureCollection
"""
Geometry = Annotated[
    Union[
        GeoPoint, GeometryCollection, LineString, MultiLineString, MultiPoint, MultiPolygon, Polygon
    ],
    Field(discriminator="type"),
]


# Create an instance of a type adapter. This has a non-trivial overhead according
# to the documentation so we do this once. This also forces us to validate the
# correctness of the discriminator.
object.__setattr__(Geometry, "type_adapter", TypeAdapter(Geometry))
