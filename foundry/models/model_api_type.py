#  Copyright 2024 Palantir Technologies, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# coding: utf-8

"""
    Palantir OpenAPI

    The Palantir REST API. Please see https://www.palantir.com/docs for more details.

    The version of the OpenAPI document: 1.738.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from typing import Union

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated
from typing import Any, ClassVar, Dict, List, Literal, Optional, Set
from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictBool
from pydantic import StrictStr
from pydantic import TypeAdapter
from typing_extensions import Self

from foundry.models.any_type import AnyType
from foundry.models.boolean_type import BooleanType
from foundry.models.date_type import DateType
from foundry.models.float_type import FloatType
from foundry.models.integer_type import IntegerType
from foundry.models.null_type import NullType
from foundry.models.string_type import StringType
from foundry.models.timestamp_type import TimestampType


class ModelApiUnionType(BaseModel):
    """
    ModelApiUnionType
    """  # noqa: E501

    type: Literal["union"]
    union_types: Optional[List[ModelApiType]] = Field(default=None, alias="unionTypes")
    __properties: ClassVar[Set[str]] = set(("type", "unionTypes"))

    model_config = {"populate_by_name": True, "validate_assignment": True, "extra": "forbid"}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str, *, allow_extra=False) -> Self:
        """Create an instance of ModelApiUnionType from a JSON string"""
        return cls.from_dict(json.loads(json_str), allow_extra=allow_extra)

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in union_types (list)
        _items = []
        if self.union_types:
            for _item in self.union_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict["unionTypes"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict, *, allow_extra=False) -> Self:
        """Create an instance of AsyncActionOperation from a dict"""
        # If allowing extra properties and the given object is a dict,
        # then remove any properties in the dict that aren't present
        # in the model properties list
        # We need to do this since the model config forbids additional properties
        # and this cannot be changed at runtime
        if (
            allow_extra
            and isinstance(obj, dict)
            and any(key not in cls.__properties for key in obj)
        ):
            obj = {key: value for key, value in obj.items() if key in cls.__properties}

        return cls.model_validate(obj)


# TODO: Rewrite to not use raise_errors
ModelApiUnionType.model_rebuild(raise_errors=False)


class ModelApiStructField(BaseModel):
    """
    ModelApiStructField
    """  # noqa: E501

    field_type: ModelApiType = Field(alias="fieldType")
    name: StrictStr
    __properties: ClassVar[Set[str]] = set(("fieldType", "name"))

    model_config = {"populate_by_name": True, "validate_assignment": True, "extra": "forbid"}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str, *, allow_extra=False) -> Self:
        """Create an instance of ModelApiStructField from a JSON string"""
        return cls.from_dict(json.loads(json_str), allow_extra=allow_extra)

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of field_type
        if self.field_type:
            _dict["fieldType"] = self.field_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict, *, allow_extra=False) -> Self:
        """Create an instance of AsyncActionOperation from a dict"""
        # If allowing extra properties and the given object is a dict,
        # then remove any properties in the dict that aren't present
        # in the model properties list
        # We need to do this since the model config forbids additional properties
        # and this cannot be changed at runtime
        if (
            allow_extra
            and isinstance(obj, dict)
            and any(key not in cls.__properties for key in obj)
        ):
            obj = {key: value for key, value in obj.items() if key in cls.__properties}

        return cls.model_validate(obj)


# TODO: Rewrite to not use raise_errors
ModelApiStructField.model_rebuild(raise_errors=False)


class ModelApiStructType(BaseModel):
    """
    ModelApiStructType
    """  # noqa: E501

    fields: Optional[List[ModelApiStructField]] = None
    type: Literal["struct"]
    __properties: ClassVar[Set[str]] = set(("fields", "type"))

    model_config = {"populate_by_name": True, "validate_assignment": True, "extra": "forbid"}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str, *, allow_extra=False) -> Self:
        """Create an instance of ModelApiStructType from a JSON string"""
        return cls.from_dict(json.loads(json_str), allow_extra=allow_extra)

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item in self.fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict["fields"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict, *, allow_extra=False) -> Self:
        """Create an instance of AsyncActionOperation from a dict"""
        # If allowing extra properties and the given object is a dict,
        # then remove any properties in the dict that aren't present
        # in the model properties list
        # We need to do this since the model config forbids additional properties
        # and this cannot be changed at runtime
        if (
            allow_extra
            and isinstance(obj, dict)
            and any(key not in cls.__properties for key in obj)
        ):
            obj = {key: value for key, value in obj.items() if key in cls.__properties}

        return cls.model_validate(obj)


# TODO: Rewrite to not use raise_errors
ModelApiStructType.model_rebuild(raise_errors=False)


class ModelApiMapType(BaseModel):
    """
    ModelApiMapType
    """  # noqa: E501

    key_type: ModelApiType = Field(alias="keyType")
    type: Literal["map"]
    value_type: ModelApiType = Field(alias="valueType")
    __properties: ClassVar[Set[str]] = set(("keyType", "type", "valueType"))

    model_config = {"populate_by_name": True, "validate_assignment": True, "extra": "forbid"}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str, *, allow_extra=False) -> Self:
        """Create an instance of ModelApiMapType from a JSON string"""
        return cls.from_dict(json.loads(json_str), allow_extra=allow_extra)

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of key_type
        if self.key_type:
            _dict["keyType"] = self.key_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_type
        if self.value_type:
            _dict["valueType"] = self.value_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict, *, allow_extra=False) -> Self:
        """Create an instance of AsyncActionOperation from a dict"""
        # If allowing extra properties and the given object is a dict,
        # then remove any properties in the dict that aren't present
        # in the model properties list
        # We need to do this since the model config forbids additional properties
        # and this cannot be changed at runtime
        if (
            allow_extra
            and isinstance(obj, dict)
            and any(key not in cls.__properties for key in obj)
        ):
            obj = {key: value for key, value in obj.items() if key in cls.__properties}

        return cls.model_validate(obj)


# TODO: Rewrite to not use raise_errors
ModelApiMapType.model_rebuild(raise_errors=False)


class ModelApiArrayType(BaseModel):
    """
    ModelApiArrayType
    """  # noqa: E501

    sub_type: ModelApiType = Field(alias="subType")
    type: Literal["array"]
    __properties: ClassVar[Set[str]] = set(("subType", "type"))

    model_config = {"populate_by_name": True, "validate_assignment": True, "extra": "forbid"}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str, *, allow_extra=False) -> Self:
        """Create an instance of ModelApiArrayType from a JSON string"""
        return cls.from_dict(json.loads(json_str), allow_extra=allow_extra)

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sub_type
        if self.sub_type:
            _dict["subType"] = self.sub_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict, *, allow_extra=False) -> Self:
        """Create an instance of AsyncActionOperation from a dict"""
        # If allowing extra properties and the given object is a dict,
        # then remove any properties in the dict that aren't present
        # in the model properties list
        # We need to do this since the model config forbids additional properties
        # and this cannot be changed at runtime
        if (
            allow_extra
            and isinstance(obj, dict)
            and any(key not in cls.__properties for key in obj)
        ):
            obj = {key: value for key, value in obj.items() if key in cls.__properties}

        return cls.model_validate(obj)


# TODO: Rewrite to not use raise_errors
ModelApiArrayType.model_rebuild(raise_errors=False)


"""
A union of all the types supported by models. 
"""
ModelApiType = Annotated[
    Union[
        AnyType,
        BooleanType,
        DateType,
        FloatType,
        IntegerType,
        ModelApiArrayType,
        ModelApiMapType,
        ModelApiStructType,
        ModelApiUnionType,
        NullType,
        StringType,
        TimestampType,
    ],
    Field(discriminator="type"),
]


# Create an instance of a type adapter. This has a non-trivial overhead according
# to the documentation so we do this once. This also forces us to validate the
# correctness of the discriminator.
object.__setattr__(ModelApiType, "type_adapter", TypeAdapter(ModelApiType))
