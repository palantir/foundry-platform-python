#  Copyright 2024 Palantir Technologies, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# coding: utf-8

"""
    Palantir OpenAPI

    The Palantir REST API. Please see https://www.palantir.com/docs for more details.

    The version of the OpenAPI document: 1.738.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import json


from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from pydantic import BaseModel, StrictStr
from pydantic import Field
from foundry.models.ontology_data_type import OntologyDataType
from typing_extensions import Self


class InvalidParameterValueParameters(BaseModel):
    """
    InvalidParameterValueParameters
    """  # noqa: E501

    parameter_base_type: Optional[StrictStr] = Field(
        default=None,
        description="A string indicating the type of each data value. Note that these types can be nested, for example an array of structs.  | Type                | JSON value                                                                                                        | |---------------------|-------------------------------------------------------------------------------------------------------------------| | Array               | `Array<T>`, where `T` is the type of the array elements, e.g. `Array<String>`.                                    | | Attachment          | `Attachment`                                                                                                      | | Boolean             | `Boolean`                                                                                                         | | Byte                | `Byte`                                                                                                            | | Date                | `LocalDate`                                                                                                       | | Decimal             | `Decimal`                                                                                                         | | Double              | `Double`                                                                                                          | | Float               | `Float`                                                                                                           | | Integer             | `Integer`                                                                                                         | | Long                | `Long`                                                                                                            | | OntologyObject      | `OntologyObject<T>` where `T` is the API name of the referenced object type.                                      | | Short               | `Short`                                                                                                           | | String              | `String`                                                                                                          | | Struct              | `Struct<T>` where `T` contains field name and type pairs, e.g. `Struct<{ firstName: String, lastName: string }>`  | | Timeseries          | `TimeSeries<T>` where `T` is either `String` for an enum series or `Double` for a numeric series.                 | | Timestamp           | `Timestamp`                                                                                                       | ",
        alias="parameterBaseType",
    )
    parameter_data_type: Optional[OntologyDataType] = Field(default=None, alias="parameterDataType")
    parameter_id: StrictStr = Field(
        description="The unique identifier of the parameter. Parameters are used as inputs when an action or query is applied. Parameters can be viewed and managed in the **Ontology Manager**. ",
        alias="parameterId",
    )
    parameter_value: Optional[Any] = Field(
        default=None,
        description='Represents the value of data in the following format. Note that these values can be nested, for example an array of structs. | Type                        | JSON encoding                                         | Example                                                                       | |-----------------------------|-------------------------------------------------------|-------------------------------------------------------------------------------| | Array                       | array                                                 | `["alpha", "bravo", "charlie"]`                                               | | Attachment                  | string                                                | `"ri.attachments.main.attachment.2f944bae-5851-4204-8615-920c969a9f2e"`       | | Boolean                     | boolean                                               | `true`                                                                        | | Byte                        | number                                                | `31`                                                                          | | Date                        | ISO 8601 extended local date string                   | `"2021-05-01"`                                                                | | Decimal                     | string                                                | `"2.718281828"`                                                               | | Float                       | number                                                | `3.14159265`                                                                  | | Double                      | number                                                | `3.14159265`                                                                  | | Integer                     | number                                                | `238940`                                                                      | | Long                        | string                                                | `"58319870951433"`                                                            | | Null                        | null                                                  | `null`                                                                        | | Object Set                  | string                                                | `ri.object-set.main.versioned-object-set.h13274m8-23f5-431c-8aee-a4554157c57z`| | Ontology Object Reference   | JSON encoding of the object\'s primary key             | `10033123` or `"EMP1234"`                                                     | | Set                         | array                                                 | `["alpha", "bravo", "charlie"]`                                               | | Short                       | number                                                | `8739`                                                                        | | String                      | string                                                | `"Call me Ishmael"`                                                           | | Struct                      | JSON object                                           | `{"name": "John Doe", "age": 42}`                                             | | TwoDimensionalAggregation   | JSON object                                           | `{"groups": [{"key": "alpha", "value": 100}, {"key": "beta", "value": 101}]}` | | ThreeDimensionalAggregation | JSON object                                           | `{"groups": [{"key": "NYC", "groups": [{"key": "Engineer", "value" : 100}]}]}`| | Timestamp                   | ISO 8601 extended offset date-time string in UTC zone | `"2021-01-04T05:00:00Z"`                                                      | ',
        alias="parameterValue",
    )
    __properties: ClassVar[Set[str]] = set(
        ("parameterBaseType", "parameterDataType", "parameterId", "parameterValue")
    )

    model_config = {"populate_by_name": True, "validate_assignment": True, "extra": "forbid"}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str, *, allow_extra=False) -> Self:
        """Create an instance of InvalidParameterValueParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str), allow_extra=allow_extra)

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameter_data_type
        if self.parameter_data_type:
            _dict["parameterDataType"] = self.parameter_data_type.to_dict()
        # set to None if parameter_value (nullable) is None
        # and model_fields_set contains the field
        if self.parameter_value is None and "parameter_value" in self.model_fields_set:
            _dict["parameterValue"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict, *, allow_extra=False) -> Self:
        """Create an instance of AsyncActionOperation from a dict"""
        # If allowing extra properties and the given object is a dict,
        # then remove any properties in the dict that aren't present
        # in the model properties list
        # We need to do this since the model config forbids additional properties
        # and this cannot be changed at runtime
        if (
            allow_extra
            and isinstance(obj, dict)
            and any(key not in cls.__properties for key in obj)
        ):
            obj = {key: value for key, value in obj.items() if key in cls.__properties}

        return cls.model_validate(obj)
