#  Copyright 2024 Palantir Technologies, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

"""
    Palantir OpenAPI

    The Palantir REST API. Please see https://www.palantir.com/docs for more details.

    The version of the OpenAPI document: 1.738.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictInt, StrictStr

from typing import Optional

from foundry.models.action_type import ActionType
from foundry.models.link_type_side import LinkTypeSide
from foundry.models.list_action_types_response import ListActionTypesResponse
from foundry.models.list_object_types_response import ListObjectTypesResponse
from foundry.models.list_ontologies_response import ListOntologiesResponse
from foundry.models.list_outgoing_link_types_response import ListOutgoingLinkTypesResponse
from foundry.models.list_query_types_response import ListQueryTypesResponse
from foundry.models.object_type import ObjectType
from foundry.models.ontology import Ontology
from foundry.models.query_type import QueryType

from foundry.api_client import ApiClient
from foundry._errors.sdk_internal_error import handle_unexpected


class OntologiesApiServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client: ApiClient) -> None:
        self._api_client = api_client

    @validate_call
    @handle_unexpected
    def get_action_type(
        self,
        ontology_rid: Annotated[
            StrictStr,
            Field(
                description="The unique Resource Identifier (RID) of the Ontology that contains the action type. "
            ),
        ],
        action_type_api_name: Annotated[
            StrictStr, Field(description="The name of the action type in the API. ")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> ActionType:
        """get_action_type

        Gets a specific action type with the given API name.  Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.

        :param ontology_rid: The unique Resource Identifier (RID) of the Ontology that contains the action type.  (required)
        :type ontology_rid: str
        :param action_type_api_name: The name of the action type in the API.  (required)
        :type action_type_api_name: str
        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        if ontology_rid is not None:
            _path_params["ontologyRid"] = ontology_rid
        if action_type_api_name is not None:
            _path_params["actionTypeApiName"] = action_type_api_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "ActionType"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies/{ontologyRid}/actionTypes/{actionTypeApiName}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )

    @validate_call
    @handle_unexpected
    def get_object_type(
        self,
        ontology_rid: Annotated[
            StrictStr,
            Field(
                description="The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**. "
            ),
        ],
        object_type: Annotated[
            StrictStr,
            Field(
                description="The API name of the object type. To find the API name, use the **List object types** endpoint or check the **Ontology Manager**. "
            ),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> ObjectType:
        """get_object_type

        Gets a specific object type with the given API name.  Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.

        :param ontology_rid: The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**.  (required)
        :type ontology_rid: str
        :param object_type: The API name of the object type. To find the API name, use the **List object types** endpoint or check the **Ontology Manager**.  (required)
        :type object_type: str
        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        if ontology_rid is not None:
            _path_params["ontologyRid"] = ontology_rid
        if object_type is not None:
            _path_params["objectType"] = object_type
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "ObjectType"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies/{ontologyRid}/objectTypes/{objectType}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )

    @validate_call
    @handle_unexpected
    def get_ontology(
        self,
        ontology_rid: Annotated[
            StrictStr,
            Field(
                description="The unique Resource Identifier (RID) of the Ontology. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**. "
            ),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> Ontology:
        """get_ontology

        Gets a specific ontology with the given Ontology RID.  Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.

        :param ontology_rid: The unique Resource Identifier (RID) of the Ontology. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**.  (required)
        :type ontology_rid: str
        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        if ontology_rid is not None:
            _path_params["ontologyRid"] = ontology_rid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "Ontology"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies/{ontologyRid}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )

    @validate_call
    @handle_unexpected
    def get_outgoing_link_type(
        self,
        ontology_rid: Annotated[
            StrictStr,
            Field(
                description="The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager** application. "
            ),
        ],
        object_type: Annotated[
            StrictStr,
            Field(
                description="The API name of the object type. To find the API name, use the **List object types** endpoint or check the **Ontology Manager** application. "
            ),
        ],
        link_type: Annotated[
            StrictStr,
            Field(
                description="The API name of the outgoing link. To find the API name for your link type, check the **Ontology Manager**. "
            ),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> LinkTypeSide:
        """get_outgoing_link_type

        Get an outgoing link for an object type.  Third-party applications using this endpoint via OAuth2 must request the following operation scopes: `api:read-data`.

        :param ontology_rid: The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager** application.  (required)
        :type ontology_rid: str
        :param object_type: The API name of the object type. To find the API name, use the **List object types** endpoint or check the **Ontology Manager** application.  (required)
        :type object_type: str
        :param link_type: The API name of the outgoing link. To find the API name for your link type, check the **Ontology Manager**.  (required)
        :type link_type: str
        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        if ontology_rid is not None:
            _path_params["ontologyRid"] = ontology_rid
        if object_type is not None:
            _path_params["objectType"] = object_type
        if link_type is not None:
            _path_params["linkType"] = link_type
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "LinkTypeSide"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies/{ontologyRid}/objectTypes/{objectType}/outgoingLinkTypes/{linkType}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )

    @validate_call
    @handle_unexpected
    def get_query_type(
        self,
        ontology_rid: Annotated[
            StrictStr,
            Field(
                description="The unique Resource Identifier (RID) of the Ontology that contains the query type. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**. "
            ),
        ],
        query_api_name: Annotated[
            StrictStr,
            Field(
                description="The API name of the query type. To find the API name, use the **List query types** endpoint or check the **Ontology Manager**. "
            ),
        ],
        preview: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> QueryType:
        """get_query_type

        Gets a specific query type with the given API name.  Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.

        :param ontology_rid: The unique Resource Identifier (RID) of the Ontology that contains the query type. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**.  (required)
        :type ontology_rid: str
        :param query_api_name: The API name of the query type. To find the API name, use the **List query types** endpoint or check the **Ontology Manager**.  (required)
        :type query_api_name: str
        :param preview:
        :type preview: bool
        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        if ontology_rid is not None:
            _path_params["ontologyRid"] = ontology_rid
        if query_api_name is not None:
            _path_params["queryApiName"] = query_api_name
        # process the query parameters
        if preview is not None:
            _query_params.append(("preview", preview))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "QueryType"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies/{ontologyRid}/queryTypes/{queryApiName}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )

    @validate_call
    @handle_unexpected
    def list_action_types(
        self,
        ontology_rid: Annotated[
            StrictStr,
            Field(
                description="The unique Resource Identifier (RID) of the Ontology that contains the action types. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**. "
            ),
        ],
        page_size: Annotated[
            Optional[StrictInt],
            Field(
                description="The desired size of the page to be returned. Defaults to 500. See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details. "
            ),
        ] = None,
        page_token: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> ListActionTypesResponse:
        """list_action_types

        Lists the action types for the given Ontology.  Each page may be smaller than the requested page size. However, it is guaranteed that if there are more results available, at least one result will be present in the response.  Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.

        :param ontology_rid: The unique Resource Identifier (RID) of the Ontology that contains the action types. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**.  (required)
        :type ontology_rid: str
        :param page_size: The desired size of the page to be returned. Defaults to 500. See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        :type page_size: int
        :param page_token:
        :type page_token: str
        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        if ontology_rid is not None:
            _path_params["ontologyRid"] = ontology_rid
        # process the query parameters
        if page_size is not None:
            _query_params.append(("pageSize", page_size))

        if page_token is not None:
            _query_params.append(("pageToken", page_token))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "ListActionTypesResponse"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies/{ontologyRid}/actionTypes",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )

    @validate_call
    @handle_unexpected
    def list_object_types(
        self,
        ontology_rid: Annotated[
            StrictStr,
            Field(
                description="The unique Resource Identifier (RID) of the Ontology that contains the object types. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**. "
            ),
        ],
        page_size: Annotated[
            Optional[StrictInt],
            Field(
                description="The desired size of the page to be returned. Defaults to 500. See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details. "
            ),
        ] = None,
        page_token: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> ListObjectTypesResponse:
        """list_object_types

        Lists the object types for the given Ontology.  Each page may be smaller or larger than the requested page size. However, it is guaranteed that if there are more results available, at least one result will be present in the response.  Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.

        :param ontology_rid: The unique Resource Identifier (RID) of the Ontology that contains the object types. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**.  (required)
        :type ontology_rid: str
        :param page_size: The desired size of the page to be returned. Defaults to 500. See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        :type page_size: int
        :param page_token:
        :type page_token: str
        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        if ontology_rid is not None:
            _path_params["ontologyRid"] = ontology_rid
        # process the query parameters
        if page_size is not None:
            _query_params.append(("pageSize", page_size))

        if page_token is not None:
            _query_params.append(("pageToken", page_token))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "ListObjectTypesResponse"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies/{ontologyRid}/objectTypes",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )

    @validate_call
    @handle_unexpected
    def list_ontologies(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> ListOntologiesResponse:
        """list_ontologies

        Lists the Ontologies visible to the current user.  Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.

        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "ListOntologiesResponse"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )

    @validate_call
    @handle_unexpected
    def list_outgoing_link_types(
        self,
        ontology_rid: Annotated[
            StrictStr,
            Field(
                description="The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager** application. "
            ),
        ],
        object_type: Annotated[
            StrictStr,
            Field(
                description="The API name of the object type. To find the API name, use the **List object types** endpoint or check the **Ontology Manager** application. "
            ),
        ],
        page_size: Annotated[
            Optional[StrictInt], Field(description="The desired size of the page to be returned.")
        ] = None,
        page_token: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> ListOutgoingLinkTypesResponse:
        """list_outgoing_link_types

        List the outgoing links for an object type.  Third-party applications using this endpoint via OAuth2 must request the following operation scopes: `api:read-data`.

        :param ontology_rid: The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager** application.  (required)
        :type ontology_rid: str
        :param object_type: The API name of the object type. To find the API name, use the **List object types** endpoint or check the **Ontology Manager** application.  (required)
        :type object_type: str
        :param page_size: The desired size of the page to be returned.
        :type page_size: int
        :param page_token:
        :type page_token: str
        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        if ontology_rid is not None:
            _path_params["ontologyRid"] = ontology_rid
        if object_type is not None:
            _path_params["objectType"] = object_type
        # process the query parameters
        if page_size is not None:
            _query_params.append(("pageSize", page_size))

        if page_token is not None:
            _query_params.append(("pageToken", page_token))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "ListOutgoingLinkTypesResponse"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies/{ontologyRid}/objectTypes/{objectType}/outgoingLinkTypes",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )

    @validate_call
    @handle_unexpected
    def list_query_types(
        self,
        ontology_rid: Annotated[
            StrictStr,
            Field(
                description="The unique Resource Identifier (RID) of the Ontology that contains the query types. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**. "
            ),
        ],
        page_size: Annotated[
            Optional[StrictInt],
            Field(
                description="The desired size of the page to be returned. Defaults to 100. See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details. "
            ),
        ] = None,
        page_token: Optional[StrictStr] = None,
        preview: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
    ) -> ListQueryTypesResponse:
        """list_query_types

        Lists the query types for the given Ontology.  Each page may be smaller than the requested page size. However, it is guaranteed that if there are more results available, at least one result will be present in the response.  Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.

        :param ontology_rid: The unique Resource Identifier (RID) of the Ontology that contains the query types. To look up your Ontology RID, please use the **List ontologies** endpoint or check the **Ontology Manager**.  (required)
        :type ontology_rid: str
        :param page_size: The desired size of the page to be returned. Defaults to 100. See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        :type page_size: int
        :param page_token:
        :type page_token: str
        :param preview:
        :type preview: bool
        :param _request_timeout: timeout setting for this request in seconds. If
                                 one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, Any]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Any = None

        # process the path parameters
        if ontology_rid is not None:
            _path_params["ontologyRid"] = ontology_rid
        # process the query parameters
        if page_size is not None:
            _query_params.append(("pageSize", page_size))

        if page_token is not None:
            _query_params.append(("pageToken", page_token))

        if preview is not None:
            _query_params.append(("preview", preview))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self._api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["BearerAuth"]

        _response_types_map: Dict[str, Optional[str]] = {"200": "ListQueryTypesResponse"}
        return self._api_client.call_api(
            method="GET",
            resource_path="/v1/ontologies/{ontologyRid}/queryTypes",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            collection_formats=_collection_formats,
            response_types_map=_response_types_map,
        )
