openapi: 3.0.1
info:
  description: The public API for Foundry
  title: Palantir API
  version: 1.0.0
security: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          tokenUrl: /multipass/api/oauth2/token
          authorizationUrl: /multipass/api/oauth2/authorize
          refreshUrl: /multipass/api/oauth2/token
          scopes:
            api:ontologies-read: Allows applications to read ontology data using Palantir APIs.
            api:ontologies-write: Allows applications to write ontology data using Palantir APIs.
        clientCredentials:
          tokenUrl: /multipass/api/oauth2/token
          scopes:
            api:ontologies-read: Allows applications to read ontology data using Palantir APIs.
            api:ontologies-write: Allows applications to write ontology data using Palantir APIs.
  schemas:
    RequestId:
      type: string
      format: uuid
      description: Unique request id
      x-namespace: Ontologies
      x-safety: safe
    SubscriptionId:
      type: string
      format: uuid
      description: A unique identifier used to associate subscription requests with responses.
      x-namespace: Ontologies
      x-safety: safe
    ObjectSetStreamSubscribeRequest:
      type: object
      properties:
        ontology:
          $ref: "#/components/schemas/OntologyIdentifier"
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
        propertySet:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
        referenceSet:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      required:
      - objectSet
      x-namespace: Ontologies
    ObjectSetStreamSubscribeRequests:
      type: object
      description: "The list of object sets that should be subscribed to. A client can stop subscribing to an object set \nby removing the request from subsequent ObjectSetStreamSubscribeRequests.\n"
      properties:
        id:
          description: "A randomly generated RequestId used to associate a ObjectSetStreamSubscribeRequest with a subsequent \nObjectSetSubscribeResponses. Each RequestId should be unique.\n"
          $ref: "#/components/schemas/RequestId"
        requests:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSetStreamSubscribeRequest"
      required:
      - id
      x-namespace: Ontologies
    StreamMessage:
      type: object
      discriminator:
        propertyName: type
        mapping:
          subscribeResponses: "#/components/schemas/ObjectSetSubscribeResponses"
          objectSetChanged: "#/components/schemas/ObjectSetUpdates"
          refreshObjectSet: "#/components/schemas/RefreshObjectSet"
          subscriptionClosed: "#/components/schemas/SubscriptionClosed"
      oneOf:
      - $ref: "#/components/schemas/ObjectSetSubscribeResponses"
      - $ref: "#/components/schemas/ObjectSetUpdates"
      - $ref: "#/components/schemas/RefreshObjectSet"
      - $ref: "#/components/schemas/SubscriptionClosed"
      x-namespace: Ontologies
    ObjectSetSubscribeResponses:
      type: object
      description: |
        Returns a response for every request in the same order. Duplicate requests will be assigned the same SubscriberId.
      properties:
        responses:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSetSubscribeResponse"
        id:
          $ref: "#/components/schemas/RequestId"
      required:
      - id
      x-namespace: Ontologies
    ObjectSetSubscribeResponse:
      type: object
      discriminator:
        propertyName: type
        mapping:
          success: "#/components/schemas/SubscriptionSuccess"
          error: "#/components/schemas/SubscriptionError"
          qos: "#/components/schemas/QosError"
      oneOf:
      - $ref: "#/components/schemas/SubscriptionSuccess"
      - $ref: "#/components/schemas/SubscriptionError"
      - $ref: "#/components/schemas/QosError"
      x-namespace: Ontologies
    SubscriptionSuccess:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"
      required:
      - id
      x-namespace: Ontologies
    SubscriptionError:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
      x-namespace: Ontologies
    QosError:
      type: object
      description: |
        An error indicating that the subscribe request should be attempted on a different node.
      x-namespace: Ontologies
    ErrorName:
      type: string
      x-safety: safe
      x-namespace: Ontologies
    Arg:
      type: object
      properties:
        name:
          type: string
          x-safety: safe
        value:
          type: string
          x-safety: unsafe
      required:
      - name
      - value
      x-namespace: Ontologies
    Error:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/ErrorName"
        args:
          type: array
          items:
            $ref: "#/components/schemas/Arg"
      required:
      - error
      x-namespace: Ontologies
    ReasonType:
      description: |
        Represents the reason a subscription was closed.
      enum:
      - USER_CLOSED
      - CHANNEL_CLOSED
      x-namespace: Ontologies
    Reason:
      type: object
      properties:
        reason:
          $ref: "#/components/schemas/ReasonType"
      required:
      - reason
      x-namespace: Ontologies
    SubscriptionClosureCause:
      type: object
      discriminator:
        propertyName: type
        mapping:
          error: "#/components/schemas/Error"
          reason: "#/components/schemas/Reason"
      oneOf:
      - $ref: "#/components/schemas/Error"
      - $ref: "#/components/schemas/Reason"
      x-namespace: Ontologies
    RefreshObjectSet:
      type: object
      description: |
        The list of updated Foundry Objects cannot be provided. The object set must be refreshed using Object Set Service.
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"
        objectType:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - id
      - objectType
      x-namespace: Ontologies
    SubscriptionClosed:
      type: object
      description: |
        The subscription has been closed due to an irrecoverable error during its lifecycle.
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"
        cause:
          $ref: "#/components/schemas/SubscriptionClosureCause"
      required:
      - id
      - cause
      x-namespace: Ontologies
    ObjectSetUpdates:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"
        updates:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSetUpdate"
      required:
      - id
      x-namespace: Ontologies
    ObjectSetUpdate:
      type: object
      discriminator:
        propertyName: type
        mapping:
          object: "#/components/schemas/ObjectUpdate"
          reference: "#/components/schemas/ReferenceUpdate"
      oneOf:
      - $ref: "#/components/schemas/ObjectUpdate"
      - $ref: "#/components/schemas/ReferenceUpdate"
      x-namespace: Ontologies
    ObjectState:
      description: "Represents the state of the object within the object set. ADDED_OR_UPDATED indicates that the object was \nadded to the set or the object has updated and was previously in the set. REMOVED indicates that the object \nwas removed from the set due to the object being deleted or the object no longer meets the object set \ndefinition.\n"
      enum:
      - ADDED_OR_UPDATED
      - REMOVED
      x-namespace: Ontologies
    ObjectUpdate:
      type: object
      properties:
        object:
          $ref: "#/components/schemas/OntologyObjectV2"
        state:
          $ref: "#/components/schemas/ObjectState"
      required:
      - object
      - state
      x-namespace: Ontologies
    ObjectPrimaryKey:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/PropertyValue"
      x-mapKey:
        $ref: "#/components/schemas/PropertyApiName"
      x-namespace: Ontologies
    ReferenceUpdate:
      type: object
      description: |
        The updated data value associated with an object instance's external reference. The object instance
        is uniquely identified by an object type and a primary key. Note that the value of the property
        field returns a dereferenced value rather than the reference itself.
      properties:
        apiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        primaryKey:
          $ref: "#/components/schemas/ObjectPrimaryKey"
          description: The ObjectPrimaryKey of the object instance supplying the reference property.
        propertyApiName:
          $ref: "#/components/schemas/PropertyApiName"
          description: The PropertyApiName on the object type that corresponds to the reference property
        value:
          $ref: "#/components/schemas/ReferenceValue"
      required:
      - apiName
      - primaryKey
      - propertyApiName
      - value
      x-namespace: Ontologies
    ReferenceValue:
      type: object
      description: Resolved data values pointed to by a reference.
      discriminator:
        propertyName: type
        mapping:
          geotimeSeriesValue: "#/components/schemas/GeotimeSeriesValue"
      oneOf:
      - $ref: "#/components/schemas/GeotimeSeriesValue"
      x-namespace: Ontologies
    GeotimeSeriesValue:
      type: object
      description: The underlying data values pointed to by a GeotimeSeriesReference.
      properties:
        position:
          $ref: "#/components/schemas/Position"
        timestamp:
          type: string
          format: date-time
          x-safety: unsafe
      required:
      - position
      - timestamp
      x-namespace: Ontologies
    GeoJsonObject:
      description: |
        GeoJSon object

        The coordinate reference system for all GeoJSON coordinates is a
        geographic coordinate reference system, using the World Geodetic System
        1984 (WGS 84) datum, with longitude and latitude units of decimal
        degrees.
        This is equivalent to the coordinate reference system identified by the
        Open Geospatial Consortium (OGC) URN
        An OPTIONAL third-position element SHALL be the height in meters above
        or below the WGS 84 reference ellipsoid.
        In the absence of elevation values, applications sensitive to height or
        depth SHOULD interpret positions as being at local ground or sea level.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      discriminator:
        propertyName: type
        mapping:
          Feature: "#/components/schemas/Feature"
          FeatureCollection: "#/components/schemas/FeatureCollection"
          Point: "#/components/schemas/GeoPoint"
          MultiPoint: "#/components/schemas/MultiPoint"
          LineString: "#/components/schemas/LineString"
          MultiLineString: "#/components/schemas/MultiLineString"
          Polygon: "#/components/schemas/Polygon"
          MultiPolygon: "#/components/schemas/MultiPolygon"
          GeometryCollection: "#/components/schemas/GeometryCollection"
      oneOf:
      - $ref: "#/components/schemas/Feature"
      - $ref: "#/components/schemas/FeatureCollection"
      - $ref: "#/components/schemas/GeoPoint"
      - $ref: "#/components/schemas/MultiPoint"
      - $ref: "#/components/schemas/LineString"
      - $ref: "#/components/schemas/MultiLineString"
      - $ref: "#/components/schemas/Polygon"
      - $ref: "#/components/schemas/MultiPolygon"
      - $ref: "#/components/schemas/GeometryCollection"
      type: object
      properties:
        type:
          type: string
          enum:
          - Feature
          - FeatureCollection
          - Point
          - MultiPoint
          - LineString
          - MultiLineString
          - Polygon
          - MultiPolygon
          - GeometryCollection
    Geometry:
      nullable: true
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1
      description: Abstract type for all GeoJSon object except Feature and FeatureCollection
      discriminator:
        propertyName: type
        mapping:
          Point: "#/components/schemas/GeoPoint"
          MultiPoint: "#/components/schemas/MultiPoint"
          LineString: "#/components/schemas/LineString"
          MultiLineString: "#/components/schemas/MultiLineString"
          Polygon: "#/components/schemas/Polygon"
          MultiPolygon: "#/components/schemas/MultiPolygon"
          GeometryCollection: "#/components/schemas/GeometryCollection"
      oneOf:
      - $ref: "#/components/schemas/GeoPoint"
      - $ref: "#/components/schemas/MultiPoint"
      - $ref: "#/components/schemas/LineString"
      - $ref: "#/components/schemas/MultiLineString"
      - $ref: "#/components/schemas/Polygon"
      - $ref: "#/components/schemas/MultiPolygon"
      - $ref: "#/components/schemas/GeometryCollection"
    FeaturePropertyKey:
      type: string
      x-safety: unsafe
    FeatureCollectionTypes:
      discriminator:
        propertyName: type
        mapping:
          Feature: "#/components/schemas/Feature"
      oneOf:
      - $ref: "#/components/schemas/Feature"
    Feature:
      type: object
      description: GeoJSon 'Feature' object
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      properties:
        geometry:
          $ref: "#/components/schemas/Geometry"
        properties:
          description: |
            A `Feature` object has a member with the name "properties".  The
            value of the properties member is an object (any JSON object or a
            JSON null value).
          additionalProperties:
            x-safety: unsafe
          x-mapKey:
            $ref: "#/components/schemas/FeaturePropertyKey"
        id:
          description: |
            If a `Feature` has a commonly used identifier, that identifier
            SHOULD be included as a member of the Feature object with the name
            "id", and the value of this member is either a JSON string or
            number.
          x-safety: unsafe
        bbox:
          $ref: "#/components/schemas/BBox"
    FeatureCollection:
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      description: GeoJSon 'FeatureCollection' object
      type: object
      properties:
        features:
          type: array
          items:
            $ref: "#/components/schemas/FeatureCollectionTypes"
        bbox:
          $ref: "#/components/schemas/BBox"
    GeoPoint:
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2
      type: object
      properties:
        coordinates:
          $ref: "#/components/schemas/Position"
        bbox:
          $ref: "#/components/schemas/BBox"
      required:
      - coordinates
    MultiPoint:
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.3
      type: object
      properties:
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/Position"
        bbox:
          $ref: "#/components/schemas/BBox"
    LineString:
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4
      type: object
      properties:
        coordinates:
          $ref: "#/components/schemas/LineStringCoordinates"
        bbox:
          $ref: "#/components/schemas/BBox"
    MultiLineString:
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4
      type: object
      properties:
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/LineStringCoordinates"
        bbox:
          $ref: "#/components/schemas/BBox"
    Polygon:
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6
      type: object
      properties:
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/LinearRing"
        bbox:
          $ref: "#/components/schemas/BBox"
    MultiPolygon:
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.7
      type: object
      properties:
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/LinearRing"
        bbox:
          $ref: "#/components/schemas/BBox"
    LineStringCoordinates:
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.4
      description: |
        GeoJSon fundamental geometry construct, array of two or more positions.
      type: array
      items:
        $ref: "#/components/schemas/Position"
      minItems: 2
    LinearRing:
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      description: |
        A linear ring is a closed LineString with four or more positions.

        The first and last positions are equivalent, and they MUST contain
        identical values; their representation SHOULD also be identical.

        A linear ring is the boundary of a surface or the boundary of a hole in
        a surface.

        A linear ring MUST follow the right-hand rule with respect to the area
        it bounds, i.e., exterior rings are counterclockwise, and holes are
        clockwise.
      type: array
      items:
        $ref: "#/components/schemas/Position"
      minItems: 4
    GeometryCollection:
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.8
      description: |
        GeoJSon geometry collection

        GeometryCollections composed of a single part or a number of parts of a
        single type SHOULD be avoided when that single part or a single object
        of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could
        be used instead.
      type: object
      properties:
        geometries:
          type: array
          items:
            $ref: "#/components/schemas/Geometry"
          minItems: 0
        bbox:
          $ref: "#/components/schemas/BBox"
    Position:
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.1
      description: |
        GeoJSon fundamental geometry construct.

        A position is an array of numbers. There MUST be two or more elements.
        The first two elements are longitude and latitude, precisely in that order and using decimal numbers.
        Altitude or elevation MAY be included as an optional third element.

        Implementations SHOULD NOT extend positions beyond three elements
        because the semantics of extra elements are unspecified and ambiguous.
        Historically, some implementations have used a fourth element to carry
        a linear referencing measure (sometimes denoted as "M") or a numerical
        timestamp, but in most situations a parser will not be able to properly
        interpret these values. The interpretation and meaning of additional
        elements is beyond the scope of this specification, and additional
        elements MAY be ignored by parsers.
      type: array
      items:
        $ref: "#/components/schemas/Coordinate"
      minItems: 2
      maxItems: 3
    BBox:
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-5
      description: |
        A GeoJSON object MAY have a member named "bbox" to include
        information on the coordinate range for its Geometries, Features, or
        FeatureCollections. The value of the bbox member MUST be an array of
        length 2*n where n is the number of dimensions represented in the
        contained geometries, with all axes of the most southwesterly point
        followed by all axes of the more northeasterly point. The axes order
        of a bbox follows the axes order of geometries.
      type: array
      items:
        $ref: "#/components/schemas/Coordinate"
    Coordinate:
      type: number
      format: double
      x-safety: unsafe
    AggregateObjectsRequestV2:
      type: object
      x-namespace: Ontologies
      properties:
        aggregation:
          items:
            $ref: "#/components/schemas/AggregationV2"
          type: array
        where:
          $ref: "#/components/schemas/SearchJsonQueryV2"
        groupBy:
          items:
            $ref: "#/components/schemas/AggregationGroupByV2"
          type: array
        accuracy:
          $ref: "#/components/schemas/AggregationAccuracyRequest"
    AggregationV2:
      description: Specifies an aggregation function.
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          max: "#/components/schemas/MaxAggregationV2"
          min: "#/components/schemas/MinAggregationV2"
          avg: "#/components/schemas/AvgAggregationV2"
          sum: "#/components/schemas/SumAggregationV2"
          count: "#/components/schemas/CountAggregationV2"
          approximateDistinct: "#/components/schemas/ApproximateDistinctAggregationV2"
          approximatePercentile: "#/components/schemas/ApproximatePercentileAggregationV2"
      oneOf:
      - $ref: "#/components/schemas/MaxAggregationV2"
      - $ref: "#/components/schemas/MinAggregationV2"
      - $ref: "#/components/schemas/AvgAggregationV2"
      - $ref: "#/components/schemas/SumAggregationV2"
      - $ref: "#/components/schemas/CountAggregationV2"
      - $ref: "#/components/schemas/ApproximateDistinctAggregationV2"
      - $ref: "#/components/schemas/ApproximatePercentileAggregationV2"
    MaxAggregationV2:
      description: Computes the maximum value for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        direction:
          $ref: "#/components/schemas/OrderByDirection"
      required:
      - field
    MinAggregationV2:
      description: Computes the minimum value for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        direction:
          $ref: "#/components/schemas/OrderByDirection"
      required:
      - field
    AvgAggregationV2:
      description: Computes the average value for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        direction:
          $ref: "#/components/schemas/OrderByDirection"
      required:
      - field
    SumAggregationV2:
      description: Computes the sum of values for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        direction:
          $ref: "#/components/schemas/OrderByDirection"
      required:
      - field
    CountAggregationV2:
      description: Computes the total count of objects.
      type: object
      x-namespace: Ontologies
      properties:
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        direction:
          $ref: "#/components/schemas/OrderByDirection"
    ApproximateDistinctAggregationV2:
      description: Computes an approximate number of distinct values for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        direction:
          $ref: "#/components/schemas/OrderByDirection"
      required:
      - field
    ApproximatePercentileAggregationV2:
      description: Computes the approximate percentile value for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        approximatePercentile:
          type: number
          format: double
          x-safety: safe
        direction:
          $ref: "#/components/schemas/OrderByDirection"
      required:
      - field
      - approximatePercentile
    OrderByDirection:
      x-namespace: Ontologies
      enum:
      - ASC
      - DESC
    AggregationGroupByV2:
      description: Specifies a grouping for aggregation results.
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          fixedWidth: "#/components/schemas/AggregationFixedWidthGroupingV2"
          ranges: "#/components/schemas/AggregationRangesGroupingV2"
          exact: "#/components/schemas/AggregationExactGroupingV2"
          duration: "#/components/schemas/AggregationDurationGroupingV2"
      oneOf:
      - $ref: "#/components/schemas/AggregationFixedWidthGroupingV2"
      - $ref: "#/components/schemas/AggregationRangesGroupingV2"
      - $ref: "#/components/schemas/AggregationExactGroupingV2"
      - $ref: "#/components/schemas/AggregationDurationGroupingV2"
    AggregationAccuracyRequest:
      x-namespace: Ontologies
      enum:
      - REQUIRE_ACCURATE
      - ALLOW_APPROXIMATE
    AggregationAccuracy:
      x-namespace: Ontologies
      enum:
      - ACCURATE
      - APPROXIMATE
    AggregateObjectsResponseV2:
      properties:
        excludedItems:
          type: integer
          x-safety: unsafe
        accuracy:
          $ref: "#/components/schemas/AggregationAccuracy"
        data:
          items:
            $ref: "#/components/schemas/AggregateObjectsResponseItemV2"
          type: array
      type: object
      required:
      - accuracy
      x-namespace: Ontologies
    AggregateObjectsResponseItemV2:
      type: object
      x-namespace: Ontologies
      properties:
        group:
          additionalProperties:
            $ref: "#/components/schemas/AggregationGroupValueV2"
          x-mapKey:
            $ref: "#/components/schemas/AggregationGroupKeyV2"
        metrics:
          items:
            $ref: "#/components/schemas/AggregationMetricResultV2"
          type: array
    AggregationMetricResultV2:
      type: object
      x-namespace: Ontologies
      properties:
        name:
          type: string
          x-safety: unsafe
        value:
          description: |
            The value of the metric. This will be a double in the case of
            a numeric metric, or a date string in the case of a date metric.
          x-safety: unsafe
      required:
      - name
    AggregationGroupKeyV2:
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    AggregationGroupValueV2:
      x-safety: unsafe
      x-namespace: Ontologies
    AggregationExactGroupingV2:
      description: Divides objects into groups according to an exact value.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        maxGroupCount:
          type: integer
          x-safety: safe
      required:
      - field
    AggregationFixedWidthGroupingV2:
      description: Divides objects into groups with the specified width.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        fixedWidth:
          type: integer
          x-safety: safe
      required:
      - field
      - fixedWidth
    AggregationRangeV2:
      description: Specifies a range from an inclusive start value to an exclusive end value.
      type: object
      x-namespace: Ontologies
      properties:
        startValue:
          description: Inclusive start.
          x-safety: unsafe
        endValue:
          description: Exclusive end.
          x-safety: unsafe
      required:
      - startValue
      - endValue
    AggregationRangesGroupingV2:
      description: Divides objects into groups according to specified ranges.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        ranges:
          items:
            $ref: "#/components/schemas/AggregationRangeV2"
          type: array
      required:
      - field
    AggregationDurationGroupingV2:
      description: |
        Divides objects into groups according to an interval. Note that this grouping applies only on date and timestamp types.
        When grouping by `YEARS`, `QUARTERS`, `MONTHS`, or `WEEKS`, the `value` must be set to `1`.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          type: integer
          x-safety: unsafe
        unit:
          $ref: "#/components/schemas/TimeUnit"
      required:
      - field
      - value
      - unit
    AggregationObjectTypeGrouping:
      description: "Divides objects into groups based on their object type. This grouping is only useful when aggregating across \nmultiple object types, such as when aggregating over an interface type.\n"
      type: object
      x-namespace: Ontologies
      properties: {}
    ArtifactRepositoryRid:
      type: string
      format: rid
      x-safety: safe
    SdkPackageName:
      type: string
      x-safety: unsafe
    ObjectSetRid:
      type: string
      format: rid
      x-safety: safe
    CreateTemporaryObjectSetRequestV2:
      type: object
      x-namespace: Ontologies
      properties:
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
      required:
      - objectSet
    CreateTemporaryObjectSetResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        objectSetRid:
          $ref: "#/components/schemas/ObjectSetRid"
      required:
      - objectSetRid
    AggregateObjectSetRequestV2:
      type: object
      x-namespace: Ontologies
      properties:
        aggregation:
          items:
            $ref: "#/components/schemas/AggregationV2"
          type: array
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
        groupBy:
          items:
            $ref: "#/components/schemas/AggregationGroupByV2"
          type: array
        accuracy:
          $ref: "#/components/schemas/AggregationAccuracyRequest"
      required:
      - objectSet
    ActionTypeV2:
      type: object
      x-namespace: Ontologies
      description: Represents an action type in the Ontology.
      properties:
        apiName:
          $ref: "#/components/schemas/ActionTypeApiName"
        description:
          type: string
          x-safety: unsafe
        displayName:
          $ref: "#/components/schemas/DisplayName"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
        parameters:
          additionalProperties:
            $ref: "#/components/schemas/ActionParameterV2"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
        rid:
          $ref: "#/components/schemas/ActionTypeRid"
        operations:
          type: array
          items:
            $ref: "#/components/schemas/LogicRule"
      required:
      - apiName
      - status
      - rid
    ActionParameterV2:
      description: Details about a parameter of an action.
      properties:
        description:
          type: string
          x-safety: unsafe
        dataType:
          $ref: "#/components/schemas/ActionParameterType"
        required:
          type: boolean
          x-safety: safe
      required:
      - dataType
      - required
      type: object
      x-namespace: Ontologies
    BatchApplyActionRequestItem:
      x-namespace: Ontologies
      type: object
      properties:
        parameters:
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
    BatchApplyActionRequestV2:
      properties:
        options:
          $ref: "#/components/schemas/BatchApplyActionRequestOptions"
        requests:
          type: array
          items:
            $ref: "#/components/schemas/BatchApplyActionRequestItem"
      type: object
      x-namespace: Ontologies
    BatchApplyActionResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        edits:
          $ref: "#/components/schemas/ActionResults"
    ListActionTypesResponseV2:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          items:
            $ref: "#/components/schemas/ActionTypeV2"
          type: array
      type: object
      x-namespace: Ontologies
    ListInterfaceTypesResponse:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          items:
            $ref: "#/components/schemas/InterfaceType"
          type: array
      type: object
      x-namespace: Ontologies
    SearchObjectsForInterfaceRequest:
      type: object
      x-namespace: Ontologies
      properties:
        where:
          $ref: "#/components/schemas/SearchJsonQueryV2"
        orderBy:
          $ref: "#/components/schemas/SearchOrderByV2"
        augmentedProperties:
          description: "A map from object type API name to a list of property type API names. For each returned object, if the \nobject’s object type is a key in the map, then we augment the response for that object type with the list \nof properties specified in the value.\n"
          additionalProperties:
            items:
              $ref: "#/components/schemas/PropertyApiName"
            type: array
          x-mapKey:
            $ref: "#/components/schemas/ObjectTypeApiName"
        augmentedSharedPropertyTypes:
          description: "A map from interface type API name to a list of shared property type API names. For each returned object, if\nthe object implements an interface that is a key in the map, then we augment the response for that object \ntype with the list of properties specified in the value.\n"
          additionalProperties:
            items:
              $ref: "#/components/schemas/SharedPropertyTypeApiName"
            type: array
          x-mapKey:
            $ref: "#/components/schemas/InterfaceTypeApiName"
        selectedSharedPropertyTypes:
          description: "A list of shared property type API names of the interface type that should be included in the response. \nOmit this parameter to include all properties of the interface type in the response.\n"
          type: array
          items:
            $ref: "#/components/schemas/SharedPropertyTypeApiName"
        selectedObjectTypes:
          description: "A list of object type API names that should be included in the response. If non-empty, object types that are\nnot mentioned will not be included in the response even if they implement the specified interface. Omit the \nparameter to include all object types.\n"
          type: array
          items:
            $ref: "#/components/schemas/ObjectTypeApiName"
        otherInterfaceTypes:
          description: "A list of interface type API names. Object types must implement all the mentioned interfaces in order to be \nincluded in the response.\n"
          type: array
          items:
            $ref: "#/components/schemas/InterfaceTypeApiName"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageToken:
          $ref: "#/components/schemas/PageToken"
    ListQueryTypesResponseV2:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          items:
            $ref: "#/components/schemas/QueryTypeV2"
          type: array
      type: object
      x-namespace: Ontologies
    ListAttachmentsResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        data:
          items:
            $ref: "#/components/schemas/AttachmentV2"
          type: array
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    AttachmentMetadataResponse:
      description: The attachment metadata response
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          single: "#/components/schemas/AttachmentV2"
          multiple: "#/components/schemas/ListAttachmentsResponseV2"
      oneOf:
      - $ref: "#/components/schemas/AttachmentV2"
      - $ref: "#/components/schemas/ListAttachmentsResponseV2"
    AbsoluteTimeRange:
      description: ISO 8601 timestamps forming a range for a time series query. Start is inclusive and end is exclusive.
      type: object
      x-namespace: Ontologies
      properties:
        startTime:
          type: string
          format: date-time
          x-safety: unsafe
        endTime:
          type: string
          format: date-time
          x-safety: unsafe
    ActionMode:
      x-namespace: Ontologies
      enum:
      - ASYNC
      - RUN
      - VALIDATE
    AsyncApplyActionResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        operationId:
          type: string
          format: rid
          x-safety: safe
      required:
      - operationId
    SyncApplyActionResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        validation:
          $ref: "#/components/schemas/ValidateActionResponseV2"
        edits:
          $ref: "#/components/schemas/ActionResults"
    ActionResults:
      discriminator:
        propertyName: type
        mapping:
          edits: "#/components/schemas/ObjectEdits"
          largeScaleEdits: "#/components/schemas/ObjectTypeEdits"
      oneOf:
      - $ref: "#/components/schemas/ObjectEdits"
      - $ref: "#/components/schemas/ObjectTypeEdits"
    ObjectTypeEdits:
      type: object
      properties:
        editedObjectTypes:
          type: array
          items:
            $ref: "#/components/schemas/ObjectTypeApiName"
    ObjectEdits:
      type: object
      properties:
        edits:
          type: array
          items:
            $ref: "#/components/schemas/ObjectEdit"
        addedObjectCount:
          type: integer
          x-safety: safe
        modifiedObjectsCount:
          type: integer
          x-safety: safe
        deletedObjectsCount:
          type: integer
          x-safety: safe
        addedLinksCount:
          type: integer
          x-safety: safe
        deletedLinksCount:
          type: integer
          x-safety: safe
      required:
      - addedObjectCount
      - modifiedObjectsCount
      - deletedObjectsCount
      - addedLinksCount
      - deletedLinksCount
    ObjectEdit:
      discriminator:
        propertyName: type
        mapping:
          addObject: "#/components/schemas/AddObject"
          modifyObject: "#/components/schemas/ModifyObject"
          addLink: "#/components/schemas/AddLink"
      oneOf:
      - $ref: "#/components/schemas/AddObject"
      - $ref: "#/components/schemas/ModifyObject"
      - $ref: "#/components/schemas/AddLink"
    AddObject:
      type: object
      properties:
        primaryKey:
          $ref: "#/components/schemas/PropertyValue"
        objectType:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - primaryKey
      - objectType
    ModifyObject:
      type: object
      properties:
        primaryKey:
          $ref: "#/components/schemas/PropertyValue"
        objectType:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - primaryKey
      - objectType
    AddLink:
      type: object
      properties:
        linkTypeApiNameAtoB:
          $ref: "#/components/schemas/LinkTypeApiName"
        linkTypeApiNameBtoA:
          $ref: "#/components/schemas/LinkTypeApiName"
        aSideObject:
          $ref: "#/components/schemas/LinkSideObject"
        bSideObject:
          $ref: "#/components/schemas/LinkSideObject"
      required:
      - linkTypeApiNameAtoB
      - linkTypeApiNameBtoA
      - aSideObject
      - bSideObject
    LinkSideObject:
      type: object
      properties:
        primaryKey:
          $ref: "#/components/schemas/PropertyValue"
        objectType:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - primaryKey
      - objectType
    LinkTypeRid:
      type: string
      format: rid
      x-safety: safe
      x-namespace: Ontologies
    LinkTypeSideV2:
      type: object
      x-namespace: Ontologies
      properties:
        apiName:
          $ref: "#/components/schemas/LinkTypeApiName"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        cardinality:
          $ref: "#/components/schemas/LinkTypeSideCardinality"
        foreignKeyPropertyApiName:
          $ref: "#/components/schemas/PropertyApiName"
        linkTypeRid:
          $ref: "#/components/schemas/LinkTypeRid"
      required:
      - apiName
      - displayName
      - status
      - objectTypeApiName
      - cardinality
      - linkTypeRid
    ListOutgoingLinkTypesResponseV2:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          description: The list of link type sides in the current page.
          items:
            $ref: "#/components/schemas/LinkTypeSideV2"
          type: array
      type: object
      x-namespace: Ontologies
    ApplyActionRequestV2:
      x-namespace: Ontologies
      type: object
      properties:
        options:
          $ref: "#/components/schemas/ApplyActionRequestOptions"
        parameters:
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
    ApplyActionMode:
      x-namespace: Ontologies
      enum:
      - VALIDATE_ONLY
      - VALIDATE_AND_EXECUTE
    ApplyActionRequestOptions:
      type: object
      x-namespace: Ontologies
      properties:
        mode:
          $ref: "#/components/schemas/ApplyActionMode"
        returnEdits:
          $ref: "#/components/schemas/ReturnEditsMode"
    BatchApplyActionRequestOptions:
      type: object
      x-namespace: Ontologies
      properties:
        returnEdits:
          $ref: "#/components/schemas/ReturnEditsMode"
    ReturnEditsMode:
      x-namespace: Ontologies
      enum:
      - ALL
      - NONE
    AsyncApplyActionRequestV2:
      properties:
        parameters:
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
      type: object
      x-namespace: Ontologies
    AsyncApplyActionOperationResponseV2:
      type: object
      x-namespace: Ontologies
    AsyncApplyActionOperationV2:
      x-type:
        type: asyncOperation
        operationType: applyActionAsyncV2
        resultType: AsyncApplyActionOperationResponseV2
        stageType: AsyncActionStatus
      x-namespace: Ontologies
    AttachmentV2:
      type: object
      x-namespace: Ontologies
      description: The representation of an attachment.
      properties:
        rid:
          $ref: "#/components/schemas/AttachmentRid"
        filename:
          $ref: "#/components/schemas/Filename"
        sizeBytes:
          $ref: "#/components/schemas/SizeBytes"
        mediaType:
          $ref: "#/components/schemas/MediaType"
      required:
      - rid
      - filename
      - sizeBytes
      - mediaType
    ListLinkedObjectsResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        data:
          items:
            $ref: "#/components/schemas/OntologyObjectV2"
          type: array
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListObjectsResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          type: array
          description: The list of objects in the current page.
          items:
            $ref: "#/components/schemas/OntologyObjectV2"
        totalCount:
          $ref: "#/components/schemas/TotalCount"
      required:
      - totalCount
    CountObjectsResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        count:
          type: integer
          x-safety: unsafe
    LoadObjectSetResponseV2:
      description: Represents the API response when loading an `ObjectSet`.
      type: object
      x-namespace: Ontologies
      properties:
        data:
          type: array
          description: The list of objects in the current Page.
          items:
            $ref: "#/components/schemas/OntologyObjectV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        totalCount:
          $ref: "#/components/schemas/TotalCount"
      required:
      - totalCount
    LoadObjectSetRequestV2:
      description: Represents the API POST body when loading an `ObjectSet`.
      type: object
      x-namespace: Ontologies
      properties:
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
        orderBy:
          $ref: "#/components/schemas/SearchOrderByV2"
        select:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
        pageToken:
          $ref: "#/components/schemas/PageToken"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        excludeRid:
          description: |
            A flag to exclude the retrieval of the `__rid` property.
            Setting this to true may improve performance of this endpoint for object types in OSV2.
          type: boolean
          x-safety: safe
      required:
      - objectSet
    ObjectSet:
      description: Represents the definition of an `ObjectSet` in the `Ontology`.
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          base: "#/components/schemas/ObjectSetBaseType"
          static: "#/components/schemas/ObjectSetStaticType"
          reference: "#/components/schemas/ObjectSetReferenceType"
          filter: "#/components/schemas/ObjectSetFilterType"
          union: "#/components/schemas/ObjectSetUnionType"
          intersect: "#/components/schemas/ObjectSetIntersectionType"
          subtract: "#/components/schemas/ObjectSetSubtractType"
          searchAround: "#/components/schemas/ObjectSetSearchAroundType"
      oneOf:
      - $ref: "#/components/schemas/ObjectSetBaseType"
      - $ref: "#/components/schemas/ObjectSetStaticType"
      - $ref: "#/components/schemas/ObjectSetReferenceType"
      - $ref: "#/components/schemas/ObjectSetFilterType"
      - $ref: "#/components/schemas/ObjectSetUnionType"
      - $ref: "#/components/schemas/ObjectSetIntersectionType"
      - $ref: "#/components/schemas/ObjectSetSubtractType"
      - $ref: "#/components/schemas/ObjectSetSearchAroundType"
    ObjectSetBaseType:
      type: object
      x-namespace: Ontologies
      properties:
        objectType:
          type: string
          x-safety: unsafe
      required:
      - objectType
    ObjectSetStaticType:
      type: object
      x-namespace: Ontologies
      properties:
        objects:
          type: array
          items:
            $ref: "#/components/schemas/ObjectRid"
    ObjectSetReferenceType:
      type: object
      x-namespace: Ontologies
      properties:
        reference:
          type: string
          format: rid
          x-safety: safe
      required:
      - reference
    ObjectSetFilterType:
      type: object
      x-namespace: Ontologies
      properties:
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
        where:
          $ref: "#/components/schemas/SearchJsonQueryV2"
      required:
      - objectSet
      - where
    ObjectSetUnionType:
      type: object
      x-namespace: Ontologies
      properties:
        objectSets:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSet"
    ObjectSetIntersectionType:
      type: object
      x-namespace: Ontologies
      properties:
        objectSets:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSet"
    ObjectSetSubtractType:
      type: object
      x-namespace: Ontologies
      properties:
        objectSets:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSet"
    ObjectSetSearchAroundType:
      type: object
      x-namespace: Ontologies
      properties:
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
        link:
          $ref: "#/components/schemas/LinkTypeApiName"
      required:
      - objectSet
      - link
    OntologyV2:
      $ref: "#/components/schemas/Ontology"
    OntologyFullMetadata:
      properties:
        ontology:
          $ref: "#/components/schemas/OntologyV2"
        objectTypes:
          additionalProperties:
            $ref: "#/components/schemas/ObjectTypeFullMetadata"
          x-mapKey:
            $ref: "#/components/schemas/ObjectTypeApiName"
        actionTypes:
          additionalProperties:
            $ref: "#/components/schemas/ActionTypeV2"
          x-mapKey:
            $ref: "#/components/schemas/ActionTypeApiName"
        queryTypes:
          additionalProperties:
            $ref: "#/components/schemas/QueryTypeV2"
          x-mapKey:
            $ref: "#/components/schemas/QueryApiName"
        interfaceTypes:
          additionalProperties:
            $ref: "#/components/schemas/InterfaceType"
          x-mapKey:
            $ref: "#/components/schemas/InterfaceTypeApiName"
        sharedPropertyTypes:
          additionalProperties:
            $ref: "#/components/schemas/SharedPropertyType"
          x-mapKey:
            $ref: "#/components/schemas/SharedPropertyTypeApiName"
      type: object
      x-namespace: Ontologies
      required:
      - ontology
    OntologyObjectV2:
      description: Represents an object in the Ontology.
      additionalProperties:
        $ref: "#/components/schemas/PropertyValue"
      x-mapKey:
        $ref: "#/components/schemas/PropertyApiName"
      x-namespace: Ontologies
    OntologyIdentifier:
      description: Either an ontology rid or an ontology api name.
      type: string
      x-safety: unsafe
      x-namespace: Ontologies
    QueryTypeV2:
      description: Represents a query type in the Ontology.
      properties:
        apiName:
          $ref: "#/components/schemas/QueryApiName"
        description:
          type: string
          x-safety: unsafe
        displayName:
          $ref: "#/components/schemas/DisplayName"
        parameters:
          additionalProperties:
            $ref: "#/components/schemas/QueryParameterV2"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
        output:
          $ref: "#/components/schemas/QueryDataType"
        rid:
          $ref: "#/components/schemas/FunctionRid"
        version:
          $ref: "#/components/schemas/FunctionVersion"
      required:
      - apiName
      - rid
      - version
      - output
      type: object
      x-namespace: Ontologies
    QueryParameterV2:
      type: object
      description: Details about a parameter of a query.
      properties:
        description:
          type: string
          x-safety: unsafe
        dataType:
          $ref: "#/components/schemas/QueryDataType"
      required:
      - dataType
    QueryOutputV2:
      type: object
      description: Details about the output of a query.
      properties:
        dataType:
          $ref: "#/components/schemas/QueryDataType"
        required:
          type: boolean
          x-safety: safe
      required:
      - dataType
      - required
    RelativeTimeSeriesTimeUnit:
      enum:
      - MILLISECONDS
      - SECONDS
      - MINUTES
      - HOURS
      - DAYS
      - WEEKS
      - MONTHS
      - YEARS
    RelativeTime:
      description: |
        A relative time, such as "3 days before" or "2 hours after" the current moment.
      type: object
      x-namespace: Ontologies
      properties:
        when:
          $ref: "#/components/schemas/RelativeTimeRelation"
        value:
          type: integer
          x-safety: unsafe
        unit:
          $ref: "#/components/schemas/RelativeTimeSeriesTimeUnit"
      required:
      - when
      - value
      - unit
    RelativeTimeRelation:
      enum:
      - BEFORE
      - AFTER
    RelativeTimeRange:
      description: |
        A relative time range for a time series query.
      type: object
      x-namespace: Ontologies
      properties:
        startTime:
          $ref: "#/components/schemas/RelativeTime"
        endTime:
          $ref: "#/components/schemas/RelativeTime"
    SearchObjectsRequestV2:
      type: object
      x-namespace: Ontologies
      properties:
        where:
          $ref: "#/components/schemas/SearchJsonQueryV2"
        orderBy:
          $ref: "#/components/schemas/SearchOrderByV2"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageToken:
          $ref: "#/components/schemas/PageToken"
        select:
          description: |
            The API names of the object type properties to include in the response.
          type: array
          items:
            $ref: "#/components/schemas/PropertyApiName"
        excludeRid:
          description: |
            A flag to exclude the retrieval of the `__rid` property.
            Setting this to true may improve performance of this endpoint for object types in OSV2.
          type: boolean
          x-safety: safe
    SearchObjectsResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        data:
          items:
            $ref: "#/components/schemas/OntologyObjectV2"
          type: array
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        totalCount:
          $ref: "#/components/schemas/TotalCount"
      required:
      - totalCount
    StreamTimeSeriesPointsRequest:
      type: object
      x-namespace: Ontologies
      properties:
        range:
          $ref: "#/components/schemas/TimeRange"
    StreamTimeSeriesPointsResponse:
      type: object
      x-namespace: Ontologies
      properties:
        data:
          items:
            $ref: "#/components/schemas/TimeSeriesPoint"
          type: array
    TimeRange:
      description: An absolute or relative range for a time series query.
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          absolute: "#/components/schemas/AbsoluteTimeRange"
          relative: "#/components/schemas/RelativeTimeRange"
      oneOf:
      - $ref: "#/components/schemas/AbsoluteTimeRange"
      - $ref: "#/components/schemas/RelativeTimeRange"
    TimeSeriesPoint:
      description: |
        A time and value pair.
      type: object
      properties:
        time:
          description: An ISO 8601 timestamp
          type: string
          format: date-time
          x-safety: unsafe
        value:
          description: An object which is either an enum String or a double number.
          x-safety: unsafe
      required:
      - time
      - value
    ValidateActionResponseV2:
      type: object
      x-namespace: Ontologies
      properties:
        result:
          $ref: "#/components/schemas/ValidationResult"
        submissionCriteria:
          items:
            $ref: "#/components/schemas/SubmissionCriteriaEvaluation"
          type: array
        parameters:
          additionalProperties:
            $ref: "#/components/schemas/ParameterEvaluationResult"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
      required:
      - result
    PropertyV2:
      description: Details about some property of an object.
      properties:
        description:
          type: string
          x-safety: unsafe
        displayName:
          $ref: "#/components/schemas/DisplayName"
        dataType:
          $ref: "#/components/schemas/ObjectPropertyType"
      required:
      - dataType
      type: object
      x-namespace: Ontologies
    OntologyObjectArrayType:
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/ObjectPropertyType"
      required:
      - subType
    ObjectPropertyType:
      description: |
        A union of all the types supported by Ontology Object properties.
      discriminator:
        propertyName: type
        mapping:
          array: "#/components/schemas/OntologyObjectArrayType"
          attachment: "#/components/schemas/AttachmentType"
          boolean: "#/components/schemas/BooleanType"
          byte: "#/components/schemas/ByteType"
          date: "#/components/schemas/DateType"
          decimal: "#/components/schemas/DecimalType"
          double: "#/components/schemas/DoubleType"
          float: "#/components/schemas/FloatType"
          geopoint: "#/components/schemas/GeoPointType"
          geoshape: "#/components/schemas/GeoShapeType"
          integer: "#/components/schemas/IntegerType"
          long: "#/components/schemas/LongType"
          marking: "#/components/schemas/MarkingType"
          short: "#/components/schemas/ShortType"
          string: "#/components/schemas/StringType"
          timestamp: "#/components/schemas/TimestampType"
          timeseries: "#/components/schemas/TimeseriesType"
      oneOf:
      - $ref: "#/components/schemas/OntologyObjectArrayType"
      - $ref: "#/components/schemas/AttachmentType"
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/ByteType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DecimalType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/FloatType"
      - $ref: "#/components/schemas/GeoPointType"
      - $ref: "#/components/schemas/GeoShapeType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/LongType"
      - $ref: "#/components/schemas/MarkingType"
      - $ref: "#/components/schemas/ShortType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/TimestampType"
      - $ref: "#/components/schemas/TimeseriesType"
    BlueprintIcon:
      type: object
      properties:
        color:
          description: A hexadecimal color code.
          type: string
          x-safety: safe
        name:
          description: "The [name](https://blueprintjs.com/docs/#icons/icons-list) of the Blueprint icon. \nUsed to specify the Blueprint icon to represent the object type in a React app.\n"
          type: string
          x-safety: unsafe
      required:
      - color
      - name
    Icon:
      description: A union currently only consisting of the BlueprintIcon (more icon types may be added in the future).
      discriminator:
        propertyName: type
        mapping:
          blueprint: "#/components/schemas/BlueprintIcon"
      oneOf:
      - $ref: "#/components/schemas/BlueprintIcon"
    ObjectTypeV2:
      description: Represents an object type in the Ontology.
      properties:
        apiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
        description:
          description: The description of the object type.
          type: string
          x-safety: unsafe
        pluralDisplayName:
          description: The plural display name of the object type.
          type: string
          x-safety: unsafe
        icon:
          $ref: "#/components/schemas/Icon"
        primaryKey:
          $ref: "#/components/schemas/PropertyApiName"
        properties:
          description: A map of the properties of the object type.
          additionalProperties:
            $ref: "#/components/schemas/PropertyV2"
          x-mapKey:
            $ref: "#/components/schemas/PropertyApiName"
        rid:
          $ref: "#/components/schemas/ObjectTypeRid"
        titleProperty:
          $ref: "#/components/schemas/PropertyApiName"
        visibility:
          $ref: "#/components/schemas/ObjectTypeVisibility"
      required:
      - apiName
      - status
      - rid
      - primaryKey
      - titleProperty
      - displayName
      - pluralDisplayName
      - icon
      type: object
      x-namespace: Ontologies
    ListObjectTypesV2Response:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          description: The list of object types in the current page.
          items:
            $ref: "#/components/schemas/ObjectTypeV2"
          type: array
      type: object
      x-namespace: Ontologies
    ListOntologiesV2Response:
      properties:
        data:
          description: The list of Ontologies the user has access to.
          items:
            $ref: "#/components/schemas/OntologyV2"
          type: array
      type: object
      x-namespace: Ontologies
    ObjectTypeInterfaceImplementation:
      properties:
        properties:
          additionalProperties:
            $ref: "#/components/schemas/PropertyApiName"
          x-mapKey:
            $ref: "#/components/schemas/SharedPropertyTypeApiName"
      type: object
      x-namespace: Ontologies
    ObjectTypeFullMetadata:
      properties:
        objectType:
          $ref: "#/components/schemas/ObjectTypeV2"
        linkTypes:
          type: array
          items:
            $ref: "#/components/schemas/LinkTypeSideV2"
        implementsInterfaces:
          description: A list of interfaces that this object type implements.
          type: array
          items:
            $ref: "#/components/schemas/InterfaceTypeApiName"
        implementsInterfaces2:
          description: A list of interfaces that this object type implements and how it implements them.
          additionalProperties:
            $ref: "#/components/schemas/ObjectTypeInterfaceImplementation"
          x-mapKey:
            $ref: "#/components/schemas/InterfaceTypeApiName"
          x-safety: unsafe
        sharedPropertyTypeMapping:
          description: "A map from shared property type API name to backing local property API name for the shared property types \npresent on this object type.\n"
          additionalProperties:
            $ref: "#/components/schemas/PropertyApiName"
          x-mapKey:
            $ref: "#/components/schemas/SharedPropertyTypeApiName"
      type: object
      x-namespace: Ontologies
      required:
      - objectType
    InterfaceTypeApiName:
      description: |
        The name of the interface type in the API in UpperCamelCase format. To find the API name for your interface
        type, use the `List interface types` endpoint or check the **Ontology Manager**.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    InterfaceTypeRid:
      description: "The unique resource identifier of an interface, useful for interacting with other Foundry APIs."
      format: rid
      type: string
      x-namespace: Ontologies
      x-safety: safe
    InterfaceLinkTypeRid:
      description: |
        The unique resource identifier of an interface link type, useful for interacting with other Foundry APIs.
      format: rid
      type: string
      x-namespace: Ontologies
      x-safety: safe
    InterfaceLinkTypeApiName:
      description: A string indicating the API name to use for the interface link.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    LinkedInterfaceTypeApiName:
      description: A reference to the linked interface type.
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/InterfaceTypeApiName"
      required:
      - apiName
    LinkedObjectTypeApiName:
      description: A reference to the linked object type.
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - apiName
    InterfaceLinkTypeLinkedEntityApiName:
      description: A reference to the linked entity. This can either be an object or an interface type.
      discriminator:
        propertyName: type
        mapping:
          interfaceTypeApiName: "#/components/schemas/LinkedInterfaceTypeApiName"
          objectTypeApiName: "#/components/schemas/LinkedObjectTypeApiName"
      oneOf:
      - $ref: "#/components/schemas/LinkedInterfaceTypeApiName"
      - $ref: "#/components/schemas/LinkedObjectTypeApiName"
    InterfaceLinkTypeCardinality:
      description: |
        The cardinality of the link in the given direction. Cardinality can be "ONE", meaning an object can
        link to zero or one other objects, or "MANY", meaning an object can link to any number of other objects.
      enum:
      - ONE
      - MANY
    InterfaceLinkType:
      description: |
        A link type constraint defined at the interface level where the implementation of the links is provided
        by the implementing object types.
      type: object
      x-namespace: Ontologies
      properties:
        rid:
          $ref: "#/components/schemas/InterfaceLinkTypeRid"
        apiName:
          $ref: "#/components/schemas/InterfaceLinkTypeApiName"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        description:
          description: The description of the interface link type.
          type: string
          x-safety: unsafe
        linkedEntityApiName:
          $ref: "#/components/schemas/InterfaceLinkTypeLinkedEntityApiName"
        cardinality:
          $ref: "#/components/schemas/InterfaceLinkTypeCardinality"
        required:
          description: |
            Whether each implementing object type must declare at least one implementation of this link.
          type: boolean
          x-safety: safe
      required:
      - rid
      - apiName
      - displayName
      - linkedEntityApiName
      - cardinality
      - required
    InterfaceType:
      type: object
      x-namespace: Ontologies
      description: Represents an interface type in the Ontology.
      properties:
        rid:
          $ref: "#/components/schemas/InterfaceTypeRid"
        apiName:
          $ref: "#/components/schemas/InterfaceTypeApiName"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        description:
          description: The description of the interface.
          type: string
          x-safety: unsafe
        properties:
          description: "A map from a shared property type API name to the corresponding shared property type. The map describes the \nset of properties the interface has. A shared property type must be unique across all of the properties.\n"
          additionalProperties:
            $ref: "#/components/schemas/SharedPropertyType"
          x-mapKey:
            $ref: "#/components/schemas/SharedPropertyTypeApiName"
        extendsInterfaces:
          description: "A list of interface API names that this interface extends. An interface can extend other interfaces to \ninherit their properties.\n"
          type: array
          items:
            $ref: "#/components/schemas/InterfaceTypeApiName"
        links:
          description: |
            A map from an interface link type API name to the corresponding interface link type. The map describes the
            set of link types the interface has.
          additionalProperties:
            $ref: "#/components/schemas/InterfaceLinkType"
          x-mapKey:
            $ref: "#/components/schemas/InterfaceLinkTypeApiName"
      required:
      - rid
      - apiName
      - displayName
    InterfaceTypeNotFound:
      description: "The requested interface type is not found, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            apiName:
              $ref: "#/components/schemas/InterfaceTypeApiName"
            rid:
              $ref: "#/components/schemas/InterfaceTypeRid"
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    SharedPropertyTypeNotFound:
      description: "The requested shared property type is not found, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            apiName:
              $ref: "#/components/schemas/SharedPropertyTypeApiName"
            rid:
              $ref: "#/components/schemas/SharedPropertyTypeRid"
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    PropertiesHaveDifferentIds:
      description: |
        Properties used in ordering must have the same ids. Temporary restriction imposed due to OSS limitations.
      properties:
        parameters:
          properties:
            properties:
              items:
                $ref: "#/components/schemas/SharedPropertyTypeApiName"
              type: array
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    SharedPropertiesNotFound:
      description: The requested shared property types are not present on every object type.
      properties:
        parameters:
          properties:
            objectType:
              type: array
              items:
                $ref: "#/components/schemas/ObjectTypeApiName"
            missingSharedProperties:
              type: array
              items:
                $ref: "#/components/schemas/SharedPropertyTypeApiName"
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    SharedPropertyTypeApiName:
      description: |
        The name of the shared property type in the API in lowerCamelCase format. To find the API name for your
        shared property type, use the `List shared property types` endpoint or check the **Ontology Manager**.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    SharedPropertyTypeRid:
      description: |
        The unique resource identifier of an shared property type, useful for interacting with other Foundry APIs.
      format: rid
      type: string
      x-namespace: Ontologies
      x-safety: safe
    SharedPropertyType:
      type: object
      x-namespace: Ontologies
      description: A property type that can be shared across object types.
      properties:
        rid:
          $ref: "#/components/schemas/SharedPropertyTypeRid"
        apiName:
          $ref: "#/components/schemas/SharedPropertyTypeApiName"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        description:
          type: string
          description: A short text that describes the SharedPropertyType.
          x-safety: unsafe
        dataType:
          $ref: "#/components/schemas/ObjectPropertyType"
      required:
      - rid
      - apiName
      - displayName
      - dataType
    InvalidApplyActionOptionCombination:
      description: The given options are individually valid but cannot be used in the given combination.
      properties:
        parameters:
          properties:
            invalidCombination:
              $ref: "#/components/schemas/ApplyActionRequestOptions"
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    ActionContainsDuplicateEdits:
      description: The given action request has multiple edits on the same object.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    ActionEditsReadOnlyEntity:
      description: The given action request performs edits on a type that is read-only or does not allow edits.
      properties:
        parameters:
          type: object
          properties:
            entityTypeRid:
              $ref: "#/components/schemas/ObjectTypeRid"
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    ObjectSetNotFound:
      description: "The requested object set is not found, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            objectSetRid:
              $ref: "#/components/schemas/ObjectSetRid"
          required:
          - objectSetRid
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    MarketplaceInstallationNotFound:
      description: |
        The given marketplace installation could not be found or the user does not have access to it.
      properties:
        parameters:
          properties:
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
          required:
          - artifactRepository
          - packageName
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    MarketplaceObjectMappingNotFound:
      description: The given object could not be mapped to a Marketplace installation.
      properties:
        parameters:
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
          required:
          - objectType
          - artifactRepository
          - packageName
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    MarketplaceActionMappingNotFound:
      description: The given action could not be mapped to a Marketplace installation.
      properties:
        parameters:
          properties:
            actionType:
              $ref: "#/components/schemas/ActionTypeApiName"
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
          required:
          - actionType
          - artifactRepository
          - packageName
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    MarketplaceQueryMappingNotFound:
      description: The given query could not be mapped to a Marketplace installation.
      properties:
        parameters:
          properties:
            queryType:
              $ref: "#/components/schemas/QueryApiName"
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
          required:
          - queryType
          - artifactRepository
          - packageName
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    MarketplaceLinkMappingNotFound:
      description: The given link could not be mapped to a Marketplace installation.
      properties:
        parameters:
          properties:
            linkType:
              $ref: "#/components/schemas/LinkTypeApiName"
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
          required:
          - linkType
          - artifactRepository
          - packageName
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    OntologyApiNameNotUnique:
      description: The given Ontology API name is not unique. Use the Ontology RID in place of the Ontology API name.
      properties:
        parameters:
          properties:
            ontologyApiName:
              $ref: "#/components/schemas/OntologyApiName"
          type: object
          required:
          - ontologyApiName
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    SearchJsonQueryV2:
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          lt: "#/components/schemas/LtQueryV2"
          gt: "#/components/schemas/GtQueryV2"
          lte: "#/components/schemas/LteQueryV2"
          gte: "#/components/schemas/GteQueryV2"
          eq: "#/components/schemas/EqualsQueryV2"
          isNull: "#/components/schemas/IsNullQueryV2"
          contains: "#/components/schemas/ContainsQueryV2"
          and: "#/components/schemas/AndQueryV2"
          or: "#/components/schemas/OrQueryV2"
          not: "#/components/schemas/NotQueryV2"
          startsWith: "#/components/schemas/StartsWithQuery"
          containsAllTermsInOrder: "#/components/schemas/ContainsAllTermsInOrderQuery"
          containsAllTermsInOrderPrefixLastTerm: "#/components/schemas/ContainsAllTermsInOrderPrefixLastTerm"
          containsAnyTerm: "#/components/schemas/ContainsAnyTermQuery"
          containsAllTerms: "#/components/schemas/ContainsAllTermsQuery"
          withinDistanceOf: "#/components/schemas/WithinDistanceOfQuery"
          withinBoundingBox: "#/components/schemas/WithinBoundingBoxQuery"
          intersectsBoundingBox: "#/components/schemas/IntersectsBoundingBoxQuery"
          doesNotIntersectBoundingBox: "#/components/schemas/DoesNotIntersectBoundingBoxQuery"
          withinPolygon: "#/components/schemas/WithinPolygonQuery"
          intersectsPolygon: "#/components/schemas/IntersectsPolygonQuery"
          doesNotIntersectPolygon: "#/components/schemas/DoesNotIntersectPolygonQuery"
      oneOf:
      - $ref: "#/components/schemas/LtQueryV2"
      - $ref: "#/components/schemas/GtQueryV2"
      - $ref: "#/components/schemas/LteQueryV2"
      - $ref: "#/components/schemas/GteQueryV2"
      - $ref: "#/components/schemas/EqualsQueryV2"
      - $ref: "#/components/schemas/IsNullQueryV2"
      - $ref: "#/components/schemas/ContainsQueryV2"
      - $ref: "#/components/schemas/AndQueryV2"
      - $ref: "#/components/schemas/OrQueryV2"
      - $ref: "#/components/schemas/NotQueryV2"
      - $ref: "#/components/schemas/StartsWithQuery"
      - $ref: "#/components/schemas/ContainsAllTermsInOrderQuery"
      - $ref: "#/components/schemas/ContainsAllTermsInOrderPrefixLastTerm"
      - $ref: "#/components/schemas/ContainsAnyTermQuery"
      - $ref: "#/components/schemas/ContainsAllTermsQuery"
      - $ref: "#/components/schemas/WithinDistanceOfQuery"
      - $ref: "#/components/schemas/WithinBoundingBoxQuery"
      - $ref: "#/components/schemas/IntersectsBoundingBoxQuery"
      - $ref: "#/components/schemas/DoesNotIntersectBoundingBoxQuery"
      - $ref: "#/components/schemas/WithinPolygonQuery"
      - $ref: "#/components/schemas/IntersectsPolygonQuery"
      - $ref: "#/components/schemas/DoesNotIntersectPolygonQuery"
    LtQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is less than a value.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    GtQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is greater than a value.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    LteQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is less than or equal to a value.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    GteQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is greater than or equal to a value.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    EqualsQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is equal to a value.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    IsNullQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects based on the existence of the specified field.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          type: boolean
          x-safety: unsafe
      required:
      - field
      - value
    ContainsQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified array contains a value.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    AndQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects where every query is satisfied.
      properties:
        value:
          items:
            $ref: "#/components/schemas/SearchJsonQueryV2"
          type: array
    OrQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects where at least 1 query is satisfied.
      properties:
        value:
          items:
            $ref: "#/components/schemas/SearchJsonQueryV2"
          type: array
    NotQueryV2:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the query is not satisfied.
      properties:
        value:
          $ref: "#/components/schemas/SearchJsonQueryV2"
      required:
      - value
    StartsWithQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field starts with the provided value.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          type: string
          x-safety: unsafe
      required:
      - field
      - value
    ContainsAllTermsInOrderQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field contains all of the terms in the order provided,
        but they do have to be adjacent to each other.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          type: string
          x-safety: unsafe
      required:
      - field
      - value
    ContainsAllTermsInOrderPrefixLastTerm:
      type: object
      x-namespace: Ontologies
      description: "Returns objects where the specified field contains all of the terms in the order provided, \nbut they do have to be adjacent to each other.\nThe last term can be a partial prefix match.\n"
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          type: string
          x-safety: unsafe
      required:
      - field
      - value
    ContainsAnyTermQuery:
      type: object
      x-namespace: Ontologies
      description: "Returns objects where the specified field contains any of the whitespace separated words in any \norder in the provided value. This query supports fuzzy matching.\n"
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          type: string
          x-safety: unsafe
        fuzzy:
          $ref: "#/components/schemas/FuzzyV2"
      required:
      - field
      - value
    CenterPointTypes:
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          Point: "#/components/schemas/GeoPoint"
      oneOf:
      - $ref: "#/components/schemas/GeoPoint"
    WithinBoundingBoxPoint:
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          Point: "#/components/schemas/GeoPoint"
      oneOf:
      - $ref: "#/components/schemas/GeoPoint"
    CenterPoint:
      type: object
      x-namespace: Ontologies
      description: |
        The coordinate point to use as the center of the distance query.
      properties:
        center:
          $ref: "#/components/schemas/CenterPointTypes"
        distance:
          $ref: "#/components/schemas/Distance"
      required:
      - center
      - distance
    WithinDistanceOfQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field contains a point within the distance provided of the center point.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/CenterPoint"
      required:
      - field
      - value
    BoundingBoxValue:
      type: object
      x-namespace: Ontologies
      description: |
        The top left and bottom right coordinate points that make up the bounding box.
      properties:
        topLeft:
          $ref: "#/components/schemas/WithinBoundingBoxPoint"
        bottomRight:
          $ref: "#/components/schemas/WithinBoundingBoxPoint"
      required:
      - topLeft
      - bottomRight
    WithinBoundingBoxQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field contains a point within the bounding box provided.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/BoundingBoxValue"
      required:
      - field
      - value
    IntersectsBoundingBoxQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field intersects the bounding box provided.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/BoundingBoxValue"
      required:
      - field
      - value
    DoesNotIntersectBoundingBoxQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field does not intersect the bounding box provided.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/BoundingBoxValue"
      required:
      - field
      - value
    PolygonValue:
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          Polygon: "#/components/schemas/Polygon"
      oneOf:
      - $ref: "#/components/schemas/Polygon"
    WithinPolygonQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field contains a point within the polygon provided.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/PolygonValue"
      required:
      - field
      - value
    IntersectsPolygonQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field intersects the polygon provided.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/PolygonValue"
      required:
      - field
      - value
    DoesNotIntersectPolygonQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field does not intersect the polygon provided.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          $ref: "#/components/schemas/PolygonValue"
      required:
      - field
      - value
    ContainsAllTermsQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field contains all of the whitespace separated words in any
        order in the provided value. This query supports fuzzy matching.
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        value:
          type: string
          x-safety: unsafe
        fuzzy:
          $ref: "#/components/schemas/FuzzyV2"
      required:
      - field
      - value
    FuzzyV2:
      description: Setting fuzzy to `true` allows approximate matching in search queries that support it.
      type: boolean
      x-namespace: Ontologies
      x-safety: safe
    SearchOrderByV2:
      description: Specifies the ordering of search results by a field and an ordering direction.
      type: object
      x-namespace: Ontologies
      properties:
        fields:
          items:
            $ref: "#/components/schemas/SearchOrderingV2"
          type: array
    SearchOrderingV2:
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        direction:
          description: Specifies the ordering direction (can be either `asc` or `desc`)
          type: string
          x-safety: safe
      required:
      - field
    AnyType:
      type: object
    AttachmentType:
      type: object
    BinaryType:
      type: object
    BooleanType:
      type: object
    ByteType:
      type: object
    DateType:
      type: object
    DecimalType:
      type: object
      properties:
        precision:
          type: integer
          x-safety: safe
        scale:
          type: integer
          x-safety: safe
    DoubleType:
      type: object
    FilesystemResource:
      type: object
    FloatType:
      type: object
    GeoShapeType:
      type: object
    GeoPointType:
      type: object
    IntegerType:
      type: object
    LocalFilePath:
      type: object
    LongType:
      type: object
    MarkingType:
      type: object
    ShortType:
      type: object
    StringType:
      type: object
    TimeSeriesItemType:
      description: |
        A union of the types supported by time series properties.
      discriminator:
        propertyName: type
        mapping:
          double: "#/components/schemas/DoubleType"
          string: "#/components/schemas/StringType"
      oneOf:
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/StringType"
    TimeseriesType:
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/TimeSeriesItemType"
      required:
      - itemType
    TimestampType:
      type: object
    StructFieldName:
      description: |
        The name of a field in a `Struct`.
      type: string
      x-safety: unsafe
    NullType:
      type: object
    UnsupportedType:
      type: object
      properties:
        unsupportedType:
          type: string
          x-safety: safe
      required:
      - unsupportedType
    ContentLength:
      type: string
      format: long
      x-safety: safe
    ContentType:
      type: string
      x-safety: safe
    Duration:
      type: string
      description: An ISO 8601 formatted duration.
      x-safety: unsafe
    PageSize:
      description: The page size to use for the endpoint.
      type: integer
      x-safety: safe
    PageToken:
      description: |
        The page token indicates where to start paging. This should be omitted from the first page's request.
        To fetch the next page, clients should take the value from the `nextPageToken` field of the previous response
        and populate the next request's `pageToken` field with it.
      type: string
      x-safety: unsafe
    TotalCount:
      description: |
        The total number of items across all pages.
      type: string
      format: long
      x-safety: safe
    PreviewMode:
      description: Enables the use of preview functionality.
      type: boolean
      x-safety: safe
    SizeBytes:
      description: The size of the file or attachment in bytes.
      type: string
      format: long
      x-safety: safe
    UserId:
      description: |
        A Foundry User ID.
      format: uuid
      type: string
      x-safety: safe
    CreatedTime:
      description: |
        The time at which the resource was created.
      type: string
      x-safety: safe
    UpdatedTime:
      description: |
        The time at which the resource was most recently updated.
      type: string
      x-safety: safe
    FolderRid:
      type: string
      format: rid
      x-safety: safe
    FilePath:
      description: |
        The path to a File within Foundry. Examples: `my-file.txt`, `path/to/my-file.jpg`, `dataframe.snappy.parquet`.
      type: string
      x-safety: unsafe
    Filename:
      description: |
        The name of a File within Foundry. Examples: `my-file.txt`, `my-file.jpg`, `dataframe.snappy.parquet`.
      type: string
      x-safety: unsafe
    ArchiveFileFormat:
      description: |
        The format of an archive file.
      enum:
      - ZIP
    DisplayName:
      type: string
      description: The display name of the entity.
      x-safety: unsafe
    MediaType:
      description: |
        The [media type](https://www.iana.org/assignments/media-types/media-types.xhtml) of the file or attachment.
        Examples: `application/json`, `application/pdf`, `application/octet-stream`, `image/jpeg`
      type: string
      x-safety: safe
    ReleaseStatus:
      enum:
      - ACTIVE
      - EXPERIMENTAL
      - DEPRECATED
      description: The release status of the entity.
    TimeUnit:
      enum:
      - MILLISECONDS
      - SECONDS
      - MINUTES
      - HOURS
      - DAYS
      - WEEKS
      - MONTHS
      - YEARS
      - QUARTERS
    Distance:
      type: object
      description: A measurement of distance.
      properties:
        value:
          type: number
          format: double
          x-safety: unsafe
        unit:
          $ref: "#/components/schemas/DistanceUnit"
      required:
      - value
      - unit
    DistanceUnit:
      enum:
      - MILLIMETERS
      - CENTIMETERS
      - METERS
      - KILOMETERS
      - INCHES
      - FEET
      - YARDS
      - MILES
      - NAUTICAL_MILES
    ApiFeaturePreviewUsageOnly:
      description: |
        This feature is only supported in preview mode. Please use `preview=true` in the query
        parameters to call this endpoint.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    ApiUsageDenied:
      description: You are not allowed to use Palantir APIs.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    InvalidPageSize:
      description: The provided page size was zero or negative. Page sizes must be greater than zero.
      properties:
        parameters:
          properties:
            pageSize:
              $ref: "#/components/schemas/PageSize"
          required:
          - pageSize
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    InvalidPageToken:
      description: The provided page token could not be used to retrieve the next page of results.
      properties:
        parameters:
          properties:
            pageToken:
              $ref: "#/components/schemas/PageToken"
          required:
          - pageToken
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    InvalidParameterCombination:
      description: The given parameters are individually valid but cannot be used in the given combination.
      properties:
        parameters:
          properties:
            validCombinations:
              type: array
              items:
                type: array
                items:
                  type: string
                  x-safety: safe
            providedParameters:
              type: array
              items:
                type: string
                x-safety: safe
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    ResourceNameAlreadyExists:
      description: The provided resource name is already in use by another resource in the same folder.
      properties:
        parameters:
          properties:
            parentFolderRid:
              $ref: "#/components/schemas/FolderRid"
            resourceName:
              type: string
              x-safety: unsafe
          required:
          - parentFolderRid
          - resourceName
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    FolderNotFound:
      description: "The requested folder could not be found, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            folderRid:
              $ref: "#/components/schemas/FolderRid"
          required:
          - folderRid
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    MissingPostBody:
      description: "A post body is required for this endpoint, but was not found in the request."
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    UnknownDistanceUnit:
      description: An unknown distance unit was provided.
      properties:
        parameters:
          type: object
          properties:
            unknownUnit:
              type: string
              x-safety: unsafe
            knownUnits:
              type: array
              items:
                $ref: "#/components/schemas/DistanceUnit"
          required:
          - unknownUnit
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    LanguageModelSourceNotSupported:
      x-type: error
      x-namespace: Models
      properties:
        parameters:
          properties:
            source:
              $ref: "#/components/schemas/LanguageModelSource"
          required:
          - source
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
    ActionEditedPropertiesNotFound:
      description: |
        Actions attempted to edit properties that could not be found on the object type.
        Please contact the Ontology administrator to resolve this issue.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ObjectAlreadyExists:
      description: |
        The object the user is attempting to create already exists.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    LinkAlreadyExists:
      description: |
        The link the user is attempting to create already exists.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    FunctionExecutionFailed:
      x-type: error
      x-namespace: Ontologies
      properties:
        parameters:
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
          required:
          - functionRid
          - functionVersion
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
    ParentAttachmentPermissionDenied:
      description: |
        The user does not have permission to parent attachments.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    EditObjectPermissionDenied:
      description: |
        The user does not have permission to edit this `ObjectType`.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ViewObjectPermissionDenied:
      description: |
        The provided token does not have permission to view any data sources backing this object type. Ensure the object
        type has backing data sources configured and visible.
      properties:
        parameters:
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
          required:
          - objectType
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ObjectChanged:
      description: |
        An object used by this `Action` was changed by someone else while the `Action` was running.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ActionParameterObjectTypeNotFound:
      description: |
        The parameter references an object type that could not be found, or the client token does not have access to it.
      properties:
        parameters:
          type: object
          properties:
            parameterId:
              $ref: "#/components/schemas/ParameterId"
          required:
          - parameterId
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ActionParameterObjectNotFound:
      description: |
        The parameter object reference or parameter default value is not found, or the client token does not have access to it.
      properties:
        parameters:
          type: object
          properties:
            parameterId:
              $ref: "#/components/schemas/ParameterId"
          required:
          - parameterId
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ActionNotFound:
      description: "The action is not found, or the user does not have access to it."
      properties:
        parameters:
          properties:
            actionRid:
              $ref: "#/components/schemas/ActionRid"
          required:
          - actionRid
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ActionTypeNotFound:
      description: "The action type is not found, or the user does not have access to it."
      properties:
        parameters:
          properties:
            actionType:
              $ref: "#/components/schemas/ActionTypeApiName"
            rid:
              $ref: "#/components/schemas/ActionTypeRid"
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ActionValidationFailed:
      description: |
        The validation failed for the given action parameters. Please use the `validateAction` endpoint for more
        details.
      properties:
        parameters:
          properties:
            actionType:
              $ref: "#/components/schemas/ActionTypeApiName"
          required:
          - actionType
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ApplyActionFailed:
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    AttachmentNotFound:
      description: "The requested attachment is not found, or the client token does not have access to it. \nAttachments that are not attached to any objects are deleted after two weeks.\nAttachments that have not been attached to an object can only be viewed by the user who uploaded them.\nAttachments that have been attached to an object can be viewed by users who can view the object.\n"
      properties:
        parameters:
          type: object
          properties:
            attachmentRid:
              $ref: "#/components/schemas/AttachmentRid"
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    AttachmentSizeExceededLimit:
      description: |
        The file is too large to be uploaded as an attachment.
        The maximum attachment size is 200MB.
      properties:
        parameters:
          type: object
          properties:
            fileSizeBytes:
              type: string
              x-safety: unsafe
            fileLimitBytes:
              type: string
              x-safety: safe
          required:
          - fileSizeBytes
          - fileLimitBytes
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    DuplicateOrderBy:
      description: The requested sort order includes duplicate properties.
      properties:
        parameters:
          properties:
            properties:
              type: array
              items:
                $ref: "#/components/schemas/PropertyApiName"
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    FunctionInvalidInput:
      x-type: error
      x-namespace: Ontologies
      properties:
        parameters:
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
          required:
          - functionRid
          - functionVersion
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
    FunctionExecutionTimedOut:
      x-type: error
      x-namespace: Ontologies
      properties:
        parameters:
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
          required:
          - functionRid
          - functionVersion
          type: object
        errorCode:
          enum:
          - TIMEOUT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
    CompositePrimaryKeyNotSupported:
      description: |
        Primary keys consisting of multiple properties are not supported by this API. If you need support for this,
        please reach out to Palantir Support.
      properties:
        parameters:
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            primaryKey:
              items:
                $ref: "#/components/schemas/PropertyApiName"
              type: array
          required:
          - objectType
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidContentLength:
      description: "A `Content-Length` header is required for all uploads, but was missing or invalid."
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidContentType:
      description: |
        The `Content-Type` cannot be inferred from the request content and filename.
        Please check your request content and filename to ensure they are compatible.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    FunctionEncounteredUserFacingError:
      description: |
        The authored function failed to execute because of a user induced error. The message argument
        is meant to be displayed to the user.
      properties:
        parameters:
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
            message:
              type: string
              x-safety: unsafe
          required:
          - functionRid
          - functionVersion
          - message
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidGroupId:
      description: The provided value for a group id must be a UUID.
      properties:
        parameters:
          properties:
            groupId:
              type: string
              x-safety: unsafe
          required:
          - groupId
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidUserId:
      description: The provided value for a user id must be a UUID.
      properties:
        parameters:
          properties:
            userId:
              type: string
              x-safety: unsafe
          required:
          - userId
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    AggregationGroupCountExceededLimit:
      description: |
        The number of groups in the aggregations grouping exceeded the allowed limit. This can typically be fixed by
        adjusting your query to reduce the number of groups created by your aggregation. For instance:
        - If you are using multiple `groupBy` clauses, try reducing the number of clauses.
        - If you are using a `groupBy` clause with a high cardinality property, try filtering the data first
          to reduce the number of groups.
      properties:
        parameters:
          properties:
            groupsCount:
              type: integer
              x-safety: safe
            groupsLimit:
              type: integer
              x-safety: safe
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    AggregationMemoryExceededLimit:
      description: |
        The amount of memory used in the request exceeded the limit. The number of groups in the aggregations grouping exceeded the allowed limit. This can typically be fixed by
        adjusting your query to reduce the number of groups created by your aggregation. For instance:
        - If you are using multiple `groupBy` clauses, try reducing the number of clauses.
        - If you are using a `groupBy` clause with a high cardinality property, try filtering the data first
          to reduce the number of groups.
      properties:
        parameters:
          properties:
            memoryUsedBytes:
              type: string
              x-safety: safe
            memoryLimitBytes:
              type: string
              x-safety: safe
          type: object
          required:
          - memoryUsedBytes
          - memoryLimitBytes
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidParameterValue:
      description: |
        The value of the given parameter is invalid. See the documentation of `DataValue` for details on
        how parameters are represented.
      properties:
        parameters:
          properties:
            parameterBaseType:
              $ref: "#/components/schemas/ValueType"
            parameterDataType:
              $ref: "#/components/schemas/OntologyDataType"
            parameterId:
              $ref: "#/components/schemas/ParameterId"
            parameterValue:
              $ref: "#/components/schemas/DataValue"
          required:
          - parameterId
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidQueryParameterValue:
      description: |
        The value of the given parameter is invalid. See the documentation of `DataValue` for details on
        how parameters are represented.
      properties:
        parameters:
          properties:
            parameterDataType:
              $ref: "#/components/schemas/QueryDataType"
            parameterId:
              $ref: "#/components/schemas/ParameterId"
            parameterValue:
              $ref: "#/components/schemas/DataValue"
          required:
          - parameterId
          - parameterDataType
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidFields:
      description: |
        The value of the given field does not match the expected pattern. For example, an Ontology object property `id`
        should be written `properties.id`.
      properties:
        parameters:
          properties:
            properties:
              items:
                type: string
                x-safety: unsafe
              type: array
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidPropertyFilterValue:
      description: |
        The value of the given property filter is invalid. For instance, 2 is an invalid value for
        `isNull` in `properties.address.isNull=2` because the `isNull` filter expects a value of boolean type.
      properties:
        parameters:
          properties:
            expectedType:
              $ref: "#/components/schemas/ValueType"
            propertyFilter:
              $ref: "#/components/schemas/PropertyFilter"
            propertyFilterValue:
              $ref: "#/components/schemas/FilterValue"
            property:
              $ref: "#/components/schemas/PropertyApiName"
          required:
          - expectedType
          - property
          - propertyFilter
          - propertyFilterValue
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidPropertyFiltersCombination:
      description: The provided filters cannot be used together.
      properties:
        parameters:
          properties:
            propertyFilters:
              items:
                $ref: "#/components/schemas/PropertyFilter"
              type: array
            property:
              $ref: "#/components/schemas/PropertyApiName"
          required:
          - property
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidPropertyValue:
      description: |
        The value of the given property is invalid. See the documentation of `PropertyValue` for details on
        how properties are represented.
      properties:
        parameters:
          properties:
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyValue:
              $ref: "#/components/schemas/PropertyValue"
          required:
          - property
          - propertyBaseType
          - propertyValue
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidPropertyType:
      description: |
        The given property type is not of the expected type.
      properties:
        parameters:
          properties:
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
            property:
              $ref: "#/components/schemas/PropertyApiName"
          required:
          - property
          - propertyBaseType
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidSortOrder:
      description: |
        The requested sort order of one or more properties is invalid. Valid sort orders are 'asc' or 'desc'. Sort
        order can also be omitted, and defaults to 'asc'.
      properties:
        parameters:
          properties:
            invalidSortOrder:
              type: string
              x-safety: unsafe
          required:
          - invalidSortOrder
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidSortType:
      description: The requested sort type of one or more clauses is invalid. Valid sort types are 'p' or 'properties'.
      properties:
        parameters:
          properties:
            invalidSortType:
              type: string
              x-safety: safe
          required:
          - invalidSortType
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    LinkTypeNotFound:
      description: "The link type is not found, or the user does not have access to it."
      properties:
        parameters:
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            linkType:
              $ref: "#/components/schemas/LinkTypeApiName"
          required:
          - linkType
          - objectType
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    LinkedObjectNotFound:
      description: "The linked object with the given primary key is not found, or the user does not have access to it."
      properties:
        parameters:
          properties:
            linkType:
              $ref: "#/components/schemas/LinkTypeApiName"
            linkedObjectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            linkedObjectPrimaryKey:
              additionalProperties:
                $ref: "#/components/schemas/PrimaryKeyValue"
              x-mapKey:
                $ref: "#/components/schemas/PropertyApiName"
          required:
          - linkType
          - linkedObjectType
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    MalformedPropertyFilters:
      description: |
        At least one of requested filters are malformed. Please look at the documentation of `PropertyFilter`.
      properties:
        parameters:
          properties:
            malformedPropertyFilter:
              type: string
              x-safety: unsafe
          required:
          - malformedPropertyFilter
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    MissingParameter:
      description: |
        Required parameters are missing. Please look at the `parameters` field to see which required parameters are
        missing from the request.
      properties:
        parameters:
          properties:
            parameters:
              items:
                $ref: "#/components/schemas/ParameterId"
              type: array
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    MultiplePropertyValuesNotSupported:
      description: |
        One of the requested property filters does not support multiple values. Please include only a single value for
        it.
      properties:
        parameters:
          properties:
            propertyFilter:
              $ref: "#/components/schemas/PropertyFilter"
            property:
              $ref: "#/components/schemas/PropertyApiName"
          required:
          - property
          - propertyFilter
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ObjectNotFound:
      description: "The requested object is not found, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            primaryKey:
              additionalProperties:
                $ref: "#/components/schemas/PrimaryKeyValue"
              x-mapKey:
                $ref: "#/components/schemas/PropertyApiName"
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ObjectTypeNotFound:
      description: "The requested object type is not found, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            objectTypeRid:
              $ref: "#/components/schemas/ObjectTypeRid"
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    UnsupportedObjectSet:
      description: The requested object set is not supported.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ObjectsExceededLimit:
      description: |
        There are more objects, but they cannot be returned by this API. Only 10,000 objects are available through this
        API for a given request.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    OntologyEditsExceededLimit:
      description: |
        The number of edits to the Ontology exceeded the allowed limit.
        This may happen because of the request or because the Action is modifying too many objects.
        Please change the size of your request or contact the Ontology administrator.
      properties:
        parameters:
          properties:
            editsCount:
              type: integer
              x-safety: unsafe
            editsLimit:
              type: integer
              x-safety: unsafe
          required:
          - editsCount
          - editsLimit
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    OntologyNotFound:
      description: "The requested Ontology is not found, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            ontologyRid:
              $ref: "#/components/schemas/OntologyRid"
            apiName:
              $ref: "#/components/schemas/OntologyApiName"
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    OntologySyncing:
      description: |
        The requested object type has been changed in the **Ontology Manager** and changes are currently being applied. Wait a
        few seconds and try again.
      properties:
        parameters:
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
          required:
          - objectType
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    OntologySyncingObjectTypes:
      description: |
        One or more requested object types have been changed in the **Ontology Manager** and changes are currently being
        applied. Wait a few seconds and try again.
      properties:
        parameters:
          properties:
            objectTypes:
              type: array
              items:
                $ref: "#/components/schemas/ObjectTypeApiName"
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ObjectTypeNotSynced:
      description: |
        The requested object type is not synced into the ontology. Please reach out to your Ontology
        Administrator to re-index the object type in Ontology Management Application.
      properties:
        parameters:
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
          required:
          - objectType
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ObjectTypesNotSynced:
      description: |
        One or more of the requested object types are not synced into the ontology. Please reach out to your Ontology
        Administrator to re-index the object type(s) in Ontology Management Application.
      properties:
        parameters:
          properties:
            objectTypes:
              type: array
              items:
                $ref: "#/components/schemas/ObjectTypeApiName"
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ParameterTypeNotSupported:
      description: |
        The type of the requested parameter is not currently supported by this API. If you need support for this,
        please reach out to Palantir Support.
      properties:
        parameters:
          properties:
            parameterId:
              $ref: "#/components/schemas/ParameterId"
            parameterBaseType:
              $ref: "#/components/schemas/ValueType"
          required:
          - parameterBaseType
          - parameterId
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ParametersNotFound:
      description: |
        The provided parameter ID was not found for the action. Please look at the `configuredParameterIds` field
        to see which ones are available.
      properties:
        parameters:
          properties:
            actionType:
              $ref: "#/components/schemas/ActionTypeApiName"
            unknownParameterIds:
              items:
                $ref: "#/components/schemas/ParameterId"
              type: array
            configuredParameterIds:
              items:
                $ref: "#/components/schemas/ParameterId"
              type: array
          required:
          - actionType
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    PropertiesNotFound:
      description: The requested properties are not found on the object type.
      properties:
        parameters:
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            properties:
              items:
                $ref: "#/components/schemas/PropertyApiName"
              type: array
          required:
          - objectType
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    PropertiesNotSortable:
      description: |
        Results could not be ordered by the requested properties. Please mark the properties as *Searchable* and
        *Sortable* in the **Ontology Manager** to enable their use in `orderBy` parameters. There may be a short delay
        between the time a property is set to *Searchable* and *Sortable* and when it can be used.
      properties:
        parameters:
          properties:
            properties:
              items:
                $ref: "#/components/schemas/PropertyApiName"
              type: array
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ParameterObjectNotFound:
      description: |
        The parameter object reference or parameter default value is not found, or the client token does not have access to it.
      properties:
        parameters:
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            primaryKey:
              additionalProperties:
                $ref: "#/components/schemas/PrimaryKeyValue"
              x-mapKey:
                $ref: "#/components/schemas/PropertyApiName"
          required:
          - objectType
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    ParameterObjectSetRidNotFound:
      description: |
        The parameter object set RID is not found, or the client token does not have access to it.
      properties:
        parameters:
          type: object
          properties:
            objectSetRid:
              type: string
              format: rid
              x-safety: safe
          required:
          - objectSetRid
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    PropertiesNotSearchable:
      description: |
        Search is not enabled on the specified properties. Please mark the properties as *Searchable*
        in the **Ontology Manager** to enable search on them. There may be a short delay
        between the time a property is marked *Searchable* and when it can be used.
      properties:
        parameters:
          properties:
            propertyApiNames:
              items:
                $ref: "#/components/schemas/PropertyApiName"
              type: array
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    PropertiesNotFilterable:
      description: |
        Results could not be filtered by the requested properties. Please mark the properties as *Searchable* and
        *Selectable* in the **Ontology Manager** to be able to filter on those properties. There may be a short delay
        between the time a property is marked *Searchable* and *Selectable* and when it can be used.
      properties:
        parameters:
          properties:
            properties:
              items:
                $ref: "#/components/schemas/PropertyApiName"
              type: array
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    PropertyApiNameNotFound:
      description: |
        A property that was required to have an API name, such as a primary key, is missing one. You can set an API
        name for it using the **Ontology Manager**.
      properties:
        parameters:
          properties:
            propertyId:
              $ref: "#/components/schemas/PropertyId"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
          required:
          - propertyBaseType
          - propertyId
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    PropertyBaseTypeNotSupported:
      description: |
        The type of the requested property is not currently supported by this API. If you need support for this,
        please reach out to Palantir Support.
      properties:
        parameters:
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
          required:
          - objectType
          - property
          - propertyBaseType
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    PropertyFiltersNotSupported:
      description: |
        At least one of the requested property filters are not supported. See the documentation of `PropertyFilter` for
        a list of supported property filters.
      properties:
        parameters:
          properties:
            propertyFilters:
              items:
                $ref: "#/components/schemas/PropertyFilter"
              type: array
            property:
              $ref: "#/components/schemas/PropertyApiName"
          required:
          - property
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    PropertyTypesSearchNotSupported:
      description: |
        The search on the property types are not supported. See the `Search Objects` documentation for
        a list of supported search queries on different property types.
      properties:
        parameters:
          properties:
            parameters:
              additionalProperties:
                type: array
                items:
                  $ref: "#/components/schemas/PropertyApiName"
              x-mapKey:
                $ref: "#/components/schemas/PropertyFilter"
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidRangeQuery:
      description: |
        The specified query range filter is invalid.
      properties:
        parameters:
          properties:
            lt:
              description: Less than
              x-safety: unsafe
            gt:
              description: Greater than
              x-safety: unsafe
            lte:
              description: Less than or equal
              x-safety: unsafe
            gte:
              description: Greater than or equal
              x-safety: unsafe
            field:
              type: string
              x-safety: unsafe
          required:
          - field
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    QueryNotFound:
      description: "The query is not found, or the user does not have access to it."
      properties:
        parameters:
          properties:
            query:
              $ref: "#/components/schemas/QueryApiName"
          required:
          - query
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    UnknownParameter:
      description: |
        The provided parameters were not found. Please look at the `knownParameters` field
        to see which ones are available.
      properties:
        parameters:
          properties:
            unknownParameters:
              items:
                $ref: "#/components/schemas/ParameterId"
              type: array
            expectedParameters:
              items:
                $ref: "#/components/schemas/ParameterId"
              type: array
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    QueryEncounteredUserFacingError:
      description: |
        The authored `Query` failed to execute because of a user induced error. The message argument
        is meant to be displayed to the user.
      properties:
        parameters:
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
            message:
              type: string
              x-safety: unsafe
          required:
          - functionRid
          - functionVersion
          - message
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    QueryRuntimeError:
      description: |
        The authored `Query` failed to execute because of a runtime error.
      properties:
        parameters:
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
            message:
              type: string
              x-safety: unsafe
            stacktrace:
              type: string
              x-safety: unsafe
            parameters:
              additionalProperties:
                type: string
                x-safety: unsafe
              x-mapKey:
                $ref: "#/components/schemas/QueryRuntimeErrorParameter"
          required:
          - functionRid
          - functionVersion
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    QueryRuntimeErrorParameter:
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    QueryTimeExceededLimit:
      description: |
        Time limits were exceeded for the `Query` execution.
      properties:
        parameters:
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
          required:
          - functionRid
          - functionVersion
          type: object
        errorCode:
          enum:
          - TIMEOUT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    QueryMemoryExceededLimit:
      description: |
        Memory limits were exceeded for the `Query` execution.
      properties:
        parameters:
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
          required:
          - functionRid
          - functionVersion
          type: object
        errorCode:
          enum:
          - TIMEOUT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    AggregationMetricName:
      type: string
      x-namespace: Ontologies
      description: A user-specified alias for an aggregation metric name.
      x-safety: unsafe
    AggregationRange:
      description: Specifies a date range from an inclusive start date to an exclusive end date.
      type: object
      x-namespace: Ontologies
      properties:
        lt:
          description: Exclusive end date.
          x-safety: unsafe
        lte:
          description: Inclusive end date.
          x-safety: unsafe
        gt:
          description: Exclusive start date.
          x-safety: unsafe
        gte:
          description: Inclusive start date.
          x-safety: unsafe
    Aggregation:
      description: Specifies an aggregation function.
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          max: "#/components/schemas/MaxAggregation"
          min: "#/components/schemas/MinAggregation"
          avg: "#/components/schemas/AvgAggregation"
          sum: "#/components/schemas/SumAggregation"
          count: "#/components/schemas/CountAggregation"
          approximateDistinct: "#/components/schemas/ApproximateDistinctAggregation"
      oneOf:
      - $ref: "#/components/schemas/MaxAggregation"
      - $ref: "#/components/schemas/MinAggregation"
      - $ref: "#/components/schemas/AvgAggregation"
      - $ref: "#/components/schemas/SumAggregation"
      - $ref: "#/components/schemas/CountAggregation"
      - $ref: "#/components/schemas/ApproximateDistinctAggregation"
    AggregationGroupBy:
      description: Specifies a grouping for aggregation results.
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          fixedWidth: "#/components/schemas/AggregationFixedWidthGrouping"
          ranges: "#/components/schemas/AggregationRangesGrouping"
          exact: "#/components/schemas/AggregationExactGrouping"
          duration: "#/components/schemas/AggregationDurationGrouping"
      oneOf:
      - $ref: "#/components/schemas/AggregationFixedWidthGrouping"
      - $ref: "#/components/schemas/AggregationRangesGrouping"
      - $ref: "#/components/schemas/AggregationExactGrouping"
      - $ref: "#/components/schemas/AggregationDurationGrouping"
    AggregationOrderBy:
      type: object
      x-namespace: Ontologies
      properties:
        metricName:
          type: string
          x-safety: unsafe
      required:
      - metricName
    AggregationFixedWidthGrouping:
      description: Divides objects into groups with the specified width.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        fixedWidth:
          type: integer
          x-safety: safe
      required:
      - field
      - fixedWidth
    AggregationRangesGrouping:
      description: Divides objects into groups according to specified ranges.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        ranges:
          items:
            $ref: "#/components/schemas/AggregationRange"
          type: array
      required:
      - field
    AggregationExactGrouping:
      description: Divides objects into groups according to an exact value.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        maxGroupCount:
          type: integer
          x-safety: safe
      required:
      - field
    AggregationDurationGrouping:
      description: |
        Divides objects into groups according to an interval. Note that this grouping applies only on date types.
        The interval uses the ISO 8601 notation. For example, "PT1H2M34S" represents a duration of 3754 seconds.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        duration:
          $ref: "#/components/schemas/Duration"
      required:
      - field
      - duration
    MaxAggregation:
      description: Computes the maximum value for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
      required:
      - field
    MinAggregation:
      description: Computes the minimum value for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
      required:
      - field
    AvgAggregation:
      description: Computes the average value for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
      required:
      - field
    SumAggregation:
      description: Computes the sum of values for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
      required:
      - field
    CountAggregation:
      description: Computes the total count of objects.
      type: object
      x-namespace: Ontologies
      properties:
        name:
          $ref: "#/components/schemas/AggregationMetricName"
    ApproximateDistinctAggregation:
      description: Computes an approximate number of distinct values for the provided field.
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
      required:
      - field
    InvalidAggregationRange:
      description: |
        Aggregation range should include one lt or lte and one gt or gte.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidAggregationRangePropertyType:
      description: |
        Range group by is not supported by property type.
      properties:
        parameters:
          type: object
          properties:
            property:
              $ref: "#/components/schemas/PropertyApiName"
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
          required:
          - property
          - objectType
          - propertyBaseType
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidAggregationRangeValue:
      description: |
        Aggregation value does not conform to the expected underlying type.
      properties:
        parameters:
          type: object
          properties:
            property:
              $ref: "#/components/schemas/PropertyApiName"
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
          required:
          - property
          - objectType
          - propertyBaseType
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidDurationGroupByPropertyType:
      description: |
        Invalid property type for duration groupBy.
      properties:
        parameters:
          type: object
          properties:
            property:
              $ref: "#/components/schemas/PropertyApiName"
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
          required:
          - property
          - objectType
          - propertyBaseType
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidDurationGroupByValue:
      description: |
        Duration groupBy value is invalid. Units larger than day must have value `1` and date properties do not support
        filtering on units smaller than day. As examples, neither bucketing by every two weeks nor bucketing a date by
        every two hours are allowed.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    MultipleGroupByOnFieldNotSupported:
      description: |
        Aggregation cannot group by on the same field multiple times.
      properties:
        parameters:
          type: object
          properties:
            duplicateFields:
              items:
                type: string
                x-safety: unsafe
              type: array
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    InvalidAggregationOrdering:
      description: |
        Aggregation ordering can only be applied to metrics with exactly one groupBy clause.
      properties:
        parameters:
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Ontologies
    DatasetNotFound:
      description: "The requested dataset could not be found, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
          required:
          - datasetRid
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    CreateDatasetPermissionDenied:
      description: The provided token does not have permission to create a dataset in this folder.
      properties:
        parameters:
          properties:
            parentFolderRid:
              $ref: "#/components/schemas/FolderRid"
            name:
              $ref: "#/components/schemas/DatasetName"
          required:
          - parentFolderRid
          - name
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    BranchAlreadyExists:
      description: The branch cannot be created because a branch with that name already exists.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
          required:
          - datasetRid
          - branchId
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    InvalidBranchId:
      description: The requested branch name cannot be used. Branch names cannot be empty and must not look like RIDs or UUIDs.
      properties:
        parameters:
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
          required:
          - branchId
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    BranchNotFound:
      description: "The requested branch could not be found, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
          required:
          - datasetRid
          - branchId
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    CreateBranchPermissionDenied:
      description: The provided token does not have permission to create a branch of this dataset.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
          required:
          - datasetRid
          - branchId
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    DeleteBranchPermissionDenied:
      description: The provided token does not have permission to delete the given branch from this dataset.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
          required:
          - datasetRid
          - branchId
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    CreateTransactionPermissionDenied:
      description: The provided token does not have permission to create a transaction on this dataset.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
          required:
          - datasetRid
          - branchId
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    OpenTransactionAlreadyExists:
      description: A transaction is already open on this dataset and branch. A branch of a dataset can only have one open transaction at a time.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
          required:
          - datasetRid
          - branchId
          type: object
        errorCode:
          enum:
          - CONFLICT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    TransactionNotOpen:
      description: The given transaction is not open.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
            transactionStatus:
              $ref: "#/components/schemas/TransactionStatus"
          required:
          - datasetRid
          - transactionRid
          - transactionStatus
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    TransactionNotCommitted:
      description: The given transaction has not been committed.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
            transactionStatus:
              $ref: "#/components/schemas/TransactionStatus"
          required:
          - datasetRid
          - transactionRid
          - transactionStatus
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    TransactionNotFound:
      description: "The requested transaction could not be found on the dataset, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
          required:
          - datasetRid
          - transactionRid
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    CommitTransactionPermissionDenied:
      description: The provided token does not have permission to commit the given transaction on the given dataset.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
          required:
          - datasetRid
          - transactionRid
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    AbortTransactionPermissionDenied:
      description: The provided token does not have permission to abort the given transaction on the given dataset.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
          required:
          - datasetRid
          - transactionRid
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    InvalidTransactionType:
      description: "The given transaction type is not valid. Valid transaction types are `SNAPSHOT`, `UPDATE`, `APPEND`, and `DELETE`."
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
            transactionType:
              $ref: "#/components/schemas/TransactionType"
          required:
          - datasetRid
          - transactionRid
          - transactionType
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    UploadFilePermissionDenied:
      description: The provided token does not have permission to upload the given file to the given dataset and transaction.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
            path:
              $ref: "#/components/schemas/FilePath"
          required:
          - datasetRid
          - transactionRid
          - path
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    FileNotFoundOnBranch:
      description: "The requested file could not be found on the given branch, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
            path:
              $ref: "#/components/schemas/FilePath"
          required:
          - datasetRid
          - branchId
          - path
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    FileNotFoundOnTransactionRange:
      description: "The requested file could not be found on the given transaction range, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            startTransactionRid:
              $ref: "#/components/schemas/TransactionRid"
            endTransactionRid:
              $ref: "#/components/schemas/TransactionRid"
            path:
              $ref: "#/components/schemas/FilePath"
          required:
          - datasetRid
          - endTransactionRid
          - path
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
    FileAlreadyExists:
      description: The given file path already exists in the dataset and transaction.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
            path:
              $ref: "#/components/schemas/FilePath"
          required:
          - datasetRid
          - transactionRid
          - path
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    SchemaNotFound:
      description: "A schema could not be found for the given dataset and branch, or the client token does not have access to it."
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
          required:
          - datasetRid
          - branchId
          type: object
        errorCode:
          enum:
          - NOT_FOUND
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    PutSchemaPermissionDenied:
      description: todo
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
          required:
          - datasetRid
          - branchId
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    DeleteSchemaPermissionDenied:
      description: todo
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            branchId:
              $ref: "#/components/schemas/BranchId"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
          required:
          - datasetRid
          - branchId
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    ReadTablePermissionDenied:
      description: The provided token does not have permission to read the given dataset as a table.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
          required:
          - datasetRid
          type: object
        errorCode:
          enum:
          - PERMISSION_DENIED
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    DatasetReadNotSupported:
      description: The dataset does not support being read.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
          required:
          - datasetRid
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    ColumnTypesNotSupported:
      description: The dataset contains column types that are not supported.
      properties:
        parameters:
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
          required:
          - datasetRid
          type: object
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Datasets
    ActionParameterArrayType:
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/ActionParameterType"
      required:
      - subType
    ActionParameterType:
      description: |
        A union of all the types supported by Ontology Action parameters.
      discriminator:
        propertyName: type
        mapping:
          array: "#/components/schemas/ActionParameterArrayType"
          attachment: "#/components/schemas/AttachmentType"
          boolean: "#/components/schemas/BooleanType"
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          integer: "#/components/schemas/IntegerType"
          long: "#/components/schemas/LongType"
          marking: "#/components/schemas/MarkingType"
          objectSet: "#/components/schemas/OntologyObjectSetType"
          object: "#/components/schemas/OntologyObjectType"
          string: "#/components/schemas/StringType"
          timestamp: "#/components/schemas/TimestampType"
      oneOf:
      - $ref: "#/components/schemas/ActionParameterArrayType"
      - $ref: "#/components/schemas/AttachmentType"
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/LongType"
      - $ref: "#/components/schemas/MarkingType"
      - $ref: "#/components/schemas/OntologyObjectSetType"
      - $ref: "#/components/schemas/OntologyObjectType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/TimestampType"
    OntologyDataType:
      description: |
        A union of all the primitive types used by Palantir's Ontology-based products.
      discriminator:
        propertyName: type
        mapping:
          any: "#/components/schemas/AnyType"
          binary: "#/components/schemas/BinaryType"
          boolean: "#/components/schemas/BooleanType"
          byte: "#/components/schemas/ByteType"
          date: "#/components/schemas/DateType"
          decimal: "#/components/schemas/DecimalType"
          double: "#/components/schemas/DoubleType"
          float: "#/components/schemas/FloatType"
          integer: "#/components/schemas/IntegerType"
          long: "#/components/schemas/LongType"
          marking: "#/components/schemas/MarkingType"
          short: "#/components/schemas/ShortType"
          string: "#/components/schemas/StringType"
          timestamp: "#/components/schemas/TimestampType"
          array: "#/components/schemas/OntologyArrayType"
          map: "#/components/schemas/OntologyMapType"
          set: "#/components/schemas/OntologySetType"
          struct: "#/components/schemas/OntologyStructType"
          object: "#/components/schemas/OntologyObjectType"
          objectSet: "#/components/schemas/OntologyObjectSetType"
          unsupported: "#/components/schemas/UnsupportedType"
      oneOf:
      - $ref: "#/components/schemas/AnyType"
      - $ref: "#/components/schemas/BinaryType"
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/ByteType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DecimalType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/FloatType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/LongType"
      - $ref: "#/components/schemas/MarkingType"
      - $ref: "#/components/schemas/ShortType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/TimestampType"
      - $ref: "#/components/schemas/OntologyArrayType"
      - $ref: "#/components/schemas/OntologyMapType"
      - $ref: "#/components/schemas/OntologySetType"
      - $ref: "#/components/schemas/OntologyStructType"
      - $ref: "#/components/schemas/OntologyObjectType"
      - $ref: "#/components/schemas/OntologyObjectSetType"
      - $ref: "#/components/schemas/UnsupportedType"
    OntologyObjectSetType:
      type: object
      properties:
        objectApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
    OntologyObjectType:
      type: object
      properties:
        objectApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - objectApiName
      - objectTypeApiName
    OntologyArrayType:
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/OntologyDataType"
      required:
      - itemType
    OntologyMapType:
      type: object
      properties:
        keyType:
          $ref: "#/components/schemas/OntologyDataType"
        valueType:
          $ref: "#/components/schemas/OntologyDataType"
      required:
      - keyType
      - valueType
    OntologySetType:
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/OntologyDataType"
      required:
      - itemType
    OntologyStructType:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/OntologyStructField"
    OntologyStructField:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/StructFieldName"
        fieldType:
          $ref: "#/components/schemas/OntologyDataType"
        required:
          type: boolean
          x-safety: safe
      required:
      - name
      - required
      - fieldType
    QueryDataType:
      description: |
        A union of all the types supported by Ontology Query parameters or outputs.
      discriminator:
        propertyName: type
        mapping:
          array: "#/components/schemas/QueryArrayType"
          attachment: "#/components/schemas/AttachmentType"
          boolean: "#/components/schemas/BooleanType"
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          float: "#/components/schemas/FloatType"
          integer: "#/components/schemas/IntegerType"
          long: "#/components/schemas/LongType"
          objectSet: "#/components/schemas/OntologyObjectSetType"
          object: "#/components/schemas/OntologyObjectType"
          set: "#/components/schemas/QuerySetType"
          string: "#/components/schemas/StringType"
          struct: "#/components/schemas/QueryStructType"
          threeDimensionalAggregation: "#/components/schemas/ThreeDimensionalAggregation"
          timestamp: "#/components/schemas/TimestampType"
          twoDimensionalAggregation: "#/components/schemas/TwoDimensionalAggregation"
          union: "#/components/schemas/QueryUnionType"
          "null": "#/components/schemas/NullType"
          unsupported: "#/components/schemas/UnsupportedType"
      oneOf:
      - $ref: "#/components/schemas/QueryArrayType"
      - $ref: "#/components/schemas/AttachmentType"
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/FloatType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/LongType"
      - $ref: "#/components/schemas/OntologyObjectSetType"
      - $ref: "#/components/schemas/OntologyObjectType"
      - $ref: "#/components/schemas/QuerySetType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/QueryStructType"
      - $ref: "#/components/schemas/ThreeDimensionalAggregation"
      - $ref: "#/components/schemas/TimestampType"
      - $ref: "#/components/schemas/TwoDimensionalAggregation"
      - $ref: "#/components/schemas/QueryUnionType"
      - $ref: "#/components/schemas/NullType"
      - $ref: "#/components/schemas/UnsupportedType"
    QueryArrayType:
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/QueryDataType"
      required:
      - subType
    QuerySetType:
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/QueryDataType"
      required:
      - subType
    QueryStructType:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/QueryStructField"
    QueryStructField:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/StructFieldName"
        fieldType:
          $ref: "#/components/schemas/QueryDataType"
      required:
      - name
      - fieldType
    QueryUnionType:
      type: object
      properties:
        unionTypes:
          type: array
          items:
            $ref: "#/components/schemas/QueryDataType"
    QueryAggregationRangeType:
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/QueryAggregationRangeSubType"
      required:
      - subType
    QueryAggregationRangeSubType:
      description: |
        A union of all the types supported by query aggregation ranges.
      discriminator:
        propertyName: type
        mapping:
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          integer: "#/components/schemas/IntegerType"
          timestamp: "#/components/schemas/TimestampType"
      oneOf:
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/TimestampType"
    QueryAggregationKeyType:
      description: |
        A union of all the types supported by query aggregation keys.
      discriminator:
        propertyName: type
        mapping:
          boolean: "#/components/schemas/BooleanType"
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          integer: "#/components/schemas/IntegerType"
          string: "#/components/schemas/StringType"
          timestamp: "#/components/schemas/TimestampType"
          range: "#/components/schemas/QueryAggregationRangeType"
      oneOf:
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/TimestampType"
      - $ref: "#/components/schemas/QueryAggregationRangeType"
    QueryAggregationValueType:
      description: |
        A union of all the types supported by query aggregation keys.
      discriminator:
        propertyName: type
        mapping:
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          timestamp: "#/components/schemas/TimestampType"
      oneOf:
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/TimestampType"
    TwoDimensionalAggregation:
      type: object
      properties:
        keyType:
          $ref: "#/components/schemas/QueryAggregationKeyType"
        valueType:
          $ref: "#/components/schemas/QueryAggregationValueType"
      required:
      - keyType
      - valueType
    ThreeDimensionalAggregation:
      type: object
      properties:
        keyType:
          $ref: "#/components/schemas/QueryAggregationKeyType"
        valueType:
          $ref: "#/components/schemas/TwoDimensionalAggregation"
      required:
      - keyType
      - valueType
    ValueType:
      type: string
      x-safety: safe
      description: |
        A string indicating the type of each data value. Note that these types can be nested, for example an array of
        structs.

        | Type                | JSON value                                                                                                        |
        |---------------------|-------------------------------------------------------------------------------------------------------------------|
        | Array               | `Array<T>`, where `T` is the type of the array elements, e.g. `Array<String>`.                                    |
        | Attachment          | `Attachment`                                                                                                      |
        | Boolean             | `Boolean`                                                                                                         |
        | Byte                | `Byte`                                                                                                            |
        | Date                | `LocalDate`                                                                                                       |
        | Decimal             | `Decimal`                                                                                                         |
        | Double              | `Double`                                                                                                          |
        | Float               | `Float`                                                                                                           |
        | Integer             | `Integer`                                                                                                         |
        | Long                | `Long`                                                                                                            |
        | Marking             | `Marking`                                                                                                         |
        | OntologyObject      | `OntologyObject<T>` where `T` is the API name of the referenced object type.                                      |
        | Short               | `Short`                                                                                                           |
        | String              | `String`                                                                                                          |
        | Struct              | `Struct<T>` where `T` contains field name and type pairs, e.g. `Struct<{ firstName: String, lastName: string }>`  |
        | Timeseries          | `TimeSeries<T>` where `T` is either `String` for an enum series or `Double` for a numeric series.                 |
        | Timestamp           | `Timestamp`                                                                                                       |
    ArraySizeConstraint:
      description: |
        The parameter expects an array of values and the size of the array must fall within the defined range.
      type: object
      properties:
        lt:
          description: Less than
          x-safety: unsafe
        lte:
          description: Less than or equal
          x-safety: unsafe
        gt:
          description: Greater than
          x-safety: unsafe
        gte:
          description: Greater than or equal
          x-safety: unsafe
    GroupMemberConstraint:
      description: |
        The parameter value must be the user id of a member belonging to at least one of the groups defined by the constraint.
      type: object
      x-namespace: Ontologies
    ObjectPropertyValueConstraint:
      description: |
        The parameter value must be a property value of an object found within an object set.
      type: object
      x-namespace: Ontologies
    ObjectQueryResultConstraint:
      description: |
        The parameter value must be the primary key of an object found within an object set.
      type: object
      x-namespace: Ontologies
    OneOfConstraint:
      description: |
        The parameter has a manually predefined set of options.
      type: object
      x-namespace: Ontologies
      properties:
        options:
          type: array
          items:
            $ref: "#/components/schemas/ParameterOption"
        otherValuesAllowed:
          description: "A flag denoting whether custom, user provided values will be considered valid. This is configured via the **Allowed \"Other\" value** toggle in the **Ontology Manager**."
          type: boolean
          x-safety: unsafe
      required:
      - otherValuesAllowed
    RangeConstraint:
      description: |
        The parameter value must be within the defined range.
      type: object
      x-namespace: Ontologies
      properties:
        lt:
          description: Less than
          x-safety: unsafe
        lte:
          description: Less than or equal
          x-safety: unsafe
        gt:
          description: Greater than
          x-safety: unsafe
        gte:
          description: Greater than or equal
          x-safety: unsafe
    StringLengthConstraint:
      description: |
        The parameter value must have a length within the defined range.
        *This range is always inclusive.*
      type: object
      x-namespace: Ontologies
      properties:
        lt:
          description: Less than
          x-safety: unsafe
        lte:
          description: Less than or equal
          x-safety: unsafe
        gt:
          description: Greater than
          x-safety: unsafe
        gte:
          description: Greater than or equal
          x-safety: unsafe
    StringRegexMatchConstraint:
      description: |
        The parameter value must match a predefined regular expression.
      type: object
      x-namespace: Ontologies
      properties:
        regex:
          description: The regular expression configured in the **Ontology Manager**.
          type: string
          x-safety: unsafe
        configuredFailureMessage:
          description: |
            The message indicating that the regular expression was not matched.
            This is configured per parameter in the **Ontology Manager**.
          type: string
          x-safety: unsafe
      required:
      - regex
    UnevaluableConstraint:
      description: |
        The parameter cannot be evaluated because it depends on another parameter or object set that can't be evaluated.
        This can happen when a parameter's allowed values are defined by another parameter that is missing or invalid.
      type: object
      x-namespace: Ontologies
    ParameterEvaluatedConstraint:
      description: "A constraint that an action parameter value must satisfy in order to be considered valid.\nConstraints can be configured on action parameters in the **Ontology Manager**. \nApplicable constraints are determined dynamically based on parameter inputs. \nParameter values are evaluated against the final set of constraints.\n\nThe type of the constraint.\n| Type                  | Description                                                                                                                                                                                                                     |\n|-----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `arraySize`           | The parameter expects an array of values and the size of the array must fall within the defined range.                                                                                                                          |\n| `groupMember`         | The parameter value must be the user id of a member belonging to at least one of the groups defined by the constraint.                                                                                                          |\n| `objectPropertyValue` | The parameter value must be a property value of an object found within an object set.                                                                                                                                           |\n| `objectQueryResult`   | The parameter value must be the primary key of an object found within an object set.                                                                                                                                            |\n| `oneOf`               | The parameter has a manually predefined set of options.                                                                                                                                                                         |\n| `range`               | The parameter value must be within the defined range.                                                                                                                                                                           |\n| `stringLength`        | The parameter value must have a length within the defined range.                                                                                                                                                                |\n| `stringRegexMatch`    | The parameter value must match a predefined regular expression.                                                                                                                                                                 |\n| `unevaluable`         | The parameter cannot be evaluated because it depends on another parameter or object set that can't be evaluated. This can happen when a parameter's allowed values are defined by another parameter that is missing or invalid. |\n"
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          arraySize: "#/components/schemas/ArraySizeConstraint"
          groupMember: "#/components/schemas/GroupMemberConstraint"
          objectPropertyValue: "#/components/schemas/ObjectPropertyValueConstraint"
          objectQueryResult: "#/components/schemas/ObjectQueryResultConstraint"
          oneOf: "#/components/schemas/OneOfConstraint"
          range: "#/components/schemas/RangeConstraint"
          stringLength: "#/components/schemas/StringLengthConstraint"
          stringRegexMatch: "#/components/schemas/StringRegexMatchConstraint"
          unevaluable: "#/components/schemas/UnevaluableConstraint"
      oneOf:
      - $ref: "#/components/schemas/ArraySizeConstraint"
      - $ref: "#/components/schemas/GroupMemberConstraint"
      - $ref: "#/components/schemas/ObjectPropertyValueConstraint"
      - $ref: "#/components/schemas/ObjectQueryResultConstraint"
      - $ref: "#/components/schemas/OneOfConstraint"
      - $ref: "#/components/schemas/RangeConstraint"
      - $ref: "#/components/schemas/StringLengthConstraint"
      - $ref: "#/components/schemas/StringRegexMatchConstraint"
      - $ref: "#/components/schemas/UnevaluableConstraint"
    ParameterEvaluationResult:
      description: Represents the validity of a parameter against the configured constraints.
      type: object
      x-namespace: Ontologies
      properties:
        result:
          $ref: "#/components/schemas/ValidationResult"
        evaluatedConstraints:
          type: array
          items:
            $ref: "#/components/schemas/ParameterEvaluatedConstraint"
        required:
          description: Represents whether the parameter is a required input to the action.
          type: boolean
          x-safety: unsafe
      required:
      - result
      - required
    ParameterOption:
      description: |
        A possible value for the parameter. This is defined in the **Ontology Manager** by Actions admins.
      type: object
      x-namespace: Ontologies
      properties:
        displayName:
          $ref: "#/components/schemas/DisplayName"
        value:
          description: An allowed configured value for a parameter within an action.
          x-safety: unsafe
    ActionType:
      description: Represents an action type in the Ontology.
      properties:
        apiName:
          $ref: "#/components/schemas/ActionTypeApiName"
        description:
          type: string
          x-safety: unsafe
        displayName:
          $ref: "#/components/schemas/DisplayName"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
        parameters:
          additionalProperties:
            $ref: "#/components/schemas/Parameter"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
        rid:
          $ref: "#/components/schemas/ActionTypeRid"
        operations:
          type: array
          items:
            $ref: "#/components/schemas/LogicRule"
      required:
      - apiName
      - status
      - rid
      type: object
      x-namespace: Ontologies
    LogicRule:
      discriminator:
        propertyName: type
        mapping:
          createObject: "#/components/schemas/CreateObjectRule"
          modifyObject: "#/components/schemas/ModifyObjectRule"
          deleteObject: "#/components/schemas/DeleteObjectRule"
          createLink: "#/components/schemas/CreateLinkRule"
          deleteLink: "#/components/schemas/DeleteLinkRule"
      oneOf:
      - $ref: "#/components/schemas/CreateObjectRule"
      - $ref: "#/components/schemas/ModifyObjectRule"
      - $ref: "#/components/schemas/DeleteObjectRule"
      - $ref: "#/components/schemas/CreateLinkRule"
      - $ref: "#/components/schemas/DeleteLinkRule"
    CreateObjectRule:
      type: object
      properties:
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - objectTypeApiName
    ModifyObjectRule:
      type: object
      properties:
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - objectTypeApiName
    DeleteObjectRule:
      type: object
      properties:
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - objectTypeApiName
    CreateLinkRule:
      type: object
      properties:
        linkTypeApiNameAtoB:
          $ref: "#/components/schemas/LinkTypeApiName"
        linkTypeApiNameBtoA:
          $ref: "#/components/schemas/LinkTypeApiName"
        aSideObjectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        bSideObjectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - linkTypeApiNameAtoB
      - linkTypeApiNameBtoA
      - aSideObjectTypeApiName
      - bSideObjectTypeApiName
    DeleteLinkRule:
      type: object
      properties:
        linkTypeApiNameAtoB:
          $ref: "#/components/schemas/LinkTypeApiName"
        linkTypeApiNameBtoA:
          $ref: "#/components/schemas/LinkTypeApiName"
        aSideObjectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        bSideObjectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
      required:
      - linkTypeApiNameAtoB
      - linkTypeApiNameBtoA
      - aSideObjectTypeApiName
      - bSideObjectTypeApiName
    ActionTypeApiName:
      description: |
        The name of the action type in the API. To find the API name for your Action Type, use the `List action types`
        endpoint or check the **Ontology Manager**.
      type: string
      x-safety: unsafe
      x-namespace: Ontologies
    ActionTypeRid:
      description: |
        The unique resource identifier of an action type, useful for interacting with other Foundry APIs.
      format: rid
      type: string
      x-safety: safe
      x-namespace: Ontologies
    ApplyActionRequest:
      properties:
        parameters:
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
      type: object
      x-namespace: Ontologies
    BatchApplyActionRequest:
      properties:
        requests:
          type: array
          items:
            $ref: "#/components/schemas/ApplyActionRequest"
      type: object
      x-namespace: Ontologies
    AsyncApplyActionRequest:
      properties:
        parameters:
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
      type: object
      x-namespace: Ontologies
    ApplyActionResponse:
      type: object
      x-namespace: Ontologies
    BatchApplyActionResponse:
      type: object
      x-namespace: Ontologies
    QueryType:
      description: Represents a query type in the Ontology.
      properties:
        apiName:
          $ref: "#/components/schemas/QueryApiName"
        description:
          type: string
          x-safety: unsafe
        displayName:
          $ref: "#/components/schemas/DisplayName"
        parameters:
          additionalProperties:
            $ref: "#/components/schemas/Parameter"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
        output:
          $ref: "#/components/schemas/OntologyDataType"
        rid:
          $ref: "#/components/schemas/FunctionRid"
        version:
          $ref: "#/components/schemas/FunctionVersion"
      required:
      - apiName
      - rid
      - version
      type: object
      x-namespace: Ontologies
    QueryApiName:
      description: |
        The name of the Query in the API.
      type: string
      x-safety: unsafe
      x-namespace: Ontologies
    ExecuteQueryRequest:
      properties:
        parameters:
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
      type: object
      x-namespace: Ontologies
    Attachment:
      type: object
      x-namespace: Ontologies
      description: The representation of an attachment.
      properties:
        rid:
          $ref: "#/components/schemas/AttachmentRid"
        filename:
          $ref: "#/components/schemas/Filename"
        sizeBytes:
          $ref: "#/components/schemas/SizeBytes"
        mediaType:
          $ref: "#/components/schemas/MediaType"
      required:
      - rid
      - filename
      - sizeBytes
      - mediaType
    AttachmentProperty:
      type: object
      x-namespace: Ontologies
      description: The representation of an attachment as a data type.
      properties:
        rid:
          $ref: "#/components/schemas/AttachmentRid"
      required:
      - rid
    AttachmentRid:
      description: The unique resource identifier of an attachment.
      format: rid
      type: string
      x-namespace: Ontologies
      x-safety: safe
    ActionRid:
      description: The unique resource identifier for an action.
      format: rid
      type: string
      x-namespace: Ontologies
      x-safety: safe
    AsyncApplyActionResponse:
      type: object
      x-namespace: Ontologies
    AsyncActionOperation:
      x-type:
        type: asyncOperation
        operationType: applyActionAsync
        resultType: AsyncApplyActionResponse
        stageType: AsyncActionStatus
      x-namespace: Ontologies
    AsyncActionStatus:
      enum:
      - RUNNING_SUBMISSION_CHECKS
      - EXECUTING_WRITE_BACK_WEBHOOK
      - COMPUTING_ONTOLOGY_EDITS
      - COMPUTING_FUNCTION
      - WRITING_ONTOLOGY_EDITS
      - EXECUTING_SIDE_EFFECT_WEBHOOK
      - SENDING_NOTIFICATIONS
      x-namespace: Ontologies
    QueryAggregation:
      type: object
      properties:
        key:
          x-safety: unsafe
        value:
          x-safety: unsafe
      required:
      - key
      - value
    NestedQueryAggregation:
      type: object
      properties:
        key:
          x-safety: unsafe
        groups:
          type: array
          items:
            $ref: "#/components/schemas/QueryAggregation"
      required:
      - key
    QueryAggregationRange:
      description: Specifies a range from an inclusive start value to an exclusive end value.
      type: object
      x-namespace: Ontologies
      properties:
        startValue:
          description: Inclusive start.
          x-safety: unsafe
        endValue:
          description: Exclusive end.
          x-safety: unsafe
    QueryTwoDimensionalAggregation:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/QueryAggregation"
    QueryThreeDimensionalAggregation:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/NestedQueryAggregation"
    ExecuteQueryResponse:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/DataValue"
      required:
      - value
      x-namespace: Ontologies
    FilterValue:
      description: |
        Represents the value of a property filter. For instance, false is the FilterValue in
        `properties.{propertyApiName}.isNull=false`.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    FunctionRid:
      description: |
        The unique resource identifier of a Function, useful for interacting with other Foundry APIs.
      format: rid
      type: string
      x-namespace: Ontologies
      x-safety: safe
    FunctionVersion:
      description: |
        The version of the given Function, written `<major>.<minor>.<patch>-<tag>`, where `-<tag>` is optional.
        Examples: `1.2.3`, `1.2.3-rc1`.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    CustomTypeId:
      description: |
        A UUID representing a custom type in a given Function.
      type: string
      x-namespace: Ontologies
      x-safety: safe
    LinkTypeApiName:
      description: |
        The name of the link type in the API. To find the API name for your Link Type, check the **Ontology Manager**
        application.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    ListActionTypesResponse:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          items:
            $ref: "#/components/schemas/ActionType"
          type: array
      type: object
      x-namespace: Ontologies
    ListQueryTypesResponse:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          items:
            $ref: "#/components/schemas/QueryType"
          type: array
      type: object
      x-namespace: Ontologies
    ListLinkedObjectsResponse:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          items:
            $ref: "#/components/schemas/OntologyObject"
          type: array
      type: object
      x-namespace: Ontologies
    ListObjectTypesResponse:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          description: The list of object types in the current page.
          items:
            $ref: "#/components/schemas/ObjectType"
          type: array
      type: object
      x-namespace: Ontologies
    ListObjectsResponse:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          description: The list of objects in the current page.
          items:
            $ref: "#/components/schemas/OntologyObject"
          type: array
        totalCount:
          $ref: "#/components/schemas/TotalCount"
      required:
      - totalCount
      type: object
      x-namespace: Ontologies
    ListOntologiesResponse:
      properties:
        data:
          description: The list of Ontologies the user has access to.
          items:
            $ref: "#/components/schemas/Ontology"
          type: array
      type: object
      x-namespace: Ontologies
    ListOutgoingLinkTypesResponse:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          description: The list of link type sides in the current page.
          items:
            $ref: "#/components/schemas/LinkTypeSide"
          type: array
      type: object
      x-namespace: Ontologies
    ObjectRid:
      description: |
        The unique resource identifier of an object, useful for interacting with other Foundry APIs.
      format: rid
      type: string
      x-namespace: Ontologies
      x-safety: safe
    ObjectType:
      description: Represents an object type in the Ontology.
      properties:
        apiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
        description:
          description: The description of the object type.
          type: string
          x-safety: unsafe
        visibility:
          $ref: "#/components/schemas/ObjectTypeVisibility"
        primaryKey:
          description: The primary key of the object. This is a list of properties that can be used to uniquely identify the object.
          items:
            $ref: "#/components/schemas/PropertyApiName"
          type: array
        properties:
          description: A map of the properties of the object type.
          additionalProperties:
            $ref: "#/components/schemas/Property"
          x-mapKey:
            $ref: "#/components/schemas/PropertyApiName"
        rid:
          $ref: "#/components/schemas/ObjectTypeRid"
      required:
      - apiName
      - status
      - rid
      type: object
      x-namespace: Ontologies
    ObjectTypeApiName:
      description: |
        The name of the object type in the API in camelCase format. To find the API name for your Object Type, use the
        `List object types` endpoint or check the **Ontology Manager**.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    ObjectTypeVisibility:
      enum:
      - NORMAL
      - PROMINENT
      - HIDDEN
      description: The suggested visibility of the object type.
      type: string
      x-namespace: Ontologies
    ObjectTypeRid:
      description: "The unique resource identifier of an object type, useful for interacting with other Foundry APIs."
      format: rid
      type: string
      x-namespace: Ontologies
      x-safety: safe
    Ontology:
      description: Metadata about an Ontology.
      properties:
        apiName:
          $ref: "#/components/schemas/OntologyApiName"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        description:
          type: string
          x-safety: unsafe
        rid:
          $ref: "#/components/schemas/OntologyRid"
      required:
      - apiName
      - displayName
      - description
      - rid
      type: object
      x-namespace: Ontologies
    OntologyObject:
      description: Represents an object in the Ontology.
      properties:
        properties:
          description: A map of the property values of the object.
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/PropertyValue"
          x-mapKey:
            $ref: "#/components/schemas/PropertyApiName"
        rid:
          $ref: "#/components/schemas/ObjectRid"
      required:
      - rid
      type: object
      x-namespace: Ontologies
    OntologyRid:
      description: |
        The unique Resource Identifier (RID) of the Ontology. To look up your Ontology RID, please use the
        `List ontologies` endpoint or check the **Ontology Manager**.
      format: rid
      type: string
      x-namespace: Ontologies
      x-safety: safe
    OntologyApiName:
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    OrderBy:
      description: "A command representing the list of properties to order by. Properties should be delimited by commas and\nprefixed by `p` or `properties`. The format expected format is\n`orderBy=properties.{property}:{sortDirection},properties.{property}:{sortDirection}...`\n\nBy default, the ordering for a property is ascending, and this can be explicitly specified by appending \n`:asc` (for ascending) or `:desc` (for descending).\n\nExample: use `orderBy=properties.lastName:asc` to order by a single property, \n`orderBy=properties.lastName,properties.firstName,properties.age:desc` to order by multiple properties. \nYou may also use the shorthand `p` instead of `properties` such as `orderBy=p.lastName:asc`.\n"
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    Parameter:
      description: Details about a parameter of an action or query.
      properties:
        description:
          type: string
          x-safety: unsafe
        baseType:
          $ref: "#/components/schemas/ValueType"
        dataType:
          $ref: "#/components/schemas/OntologyDataType"
        required:
          type: boolean
          x-safety: safe
      required:
      - baseType
      - required
      type: object
      x-namespace: Ontologies
    ParameterId:
      description: |
        The unique identifier of the parameter. Parameters are used as inputs when an action or query is applied.
        Parameters can be viewed and managed in the **Ontology Manager**.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    DataValue:
      description: |
        Represents the value of data in the following format. Note that these values can be nested, for example an array of structs.
        | Type                        | JSON encoding                                         | Example                                                                       |
        |-----------------------------|-------------------------------------------------------|-------------------------------------------------------------------------------|
        | Array                       | array                                                 | `["alpha", "bravo", "charlie"]`                                               |
        | Attachment                  | string                                                | `"ri.attachments.main.attachment.2f944bae-5851-4204-8615-920c969a9f2e"`       |
        | Boolean                     | boolean                                               | `true`                                                                        |
        | Byte                        | number                                                | `31`                                                                          |
        | Date                        | ISO 8601 extended local date string                   | `"2021-05-01"`                                                                |
        | Decimal                     | string                                                | `"2.718281828"`                                                               |
        | Float                       | number                                                | `3.14159265`                                                                  |
        | Double                      | number                                                | `3.14159265`                                                                  |
        | Integer                     | number                                                | `238940`                                                                      |
        | Long                        | string                                                | `"58319870951433"`                                                            |
        | Marking                     | string                                                | `"MU"`                                                                        |
        | Null                        | null                                                  | `null`                                                                        |
        | Object Set                  | string OR the object set definition                   | `ri.object-set.main.versioned-object-set.h13274m8-23f5-431c-8aee-a4554157c57z`|
        | Ontology Object Reference   | JSON encoding of the object's primary key             | `10033123` or `"EMP1234"`                                                     |
        | Set                         | array                                                 | `["alpha", "bravo", "charlie"]`                                               |
        | Short                       | number                                                | `8739`                                                                        |
        | String                      | string                                                | `"Call me Ishmael"`                                                           |
        | Struct                      | JSON object                                           | `{"name": "John Doe", "age": 42}`                                             |
        | TwoDimensionalAggregation   | JSON object                                           | `{"groups": [{"key": "alpha", "value": 100}, {"key": "beta", "value": 101}]}` |
        | ThreeDimensionalAggregation | JSON object                                           | `{"groups": [{"key": "NYC", "groups": [{"key": "Engineer", "value" : 100}]}]}`|
        | Timestamp                   | ISO 8601 extended offset date-time string in UTC zone | `"2021-01-04T05:00:00Z"`                                                      |
      x-safety: unsafe
    PrimaryKeyValue:
      description: Represents the primary key value that is used as a unique identifier for an object.
      x-safety: unsafe
      x-namespace: Ontologies
    Property:
      description: Details about some property of an object.
      properties:
        description:
          type: string
          x-safety: unsafe
        displayName:
          $ref: "#/components/schemas/DisplayName"
        baseType:
          $ref: "#/components/schemas/ValueType"
      required:
      - baseType
      type: object
      x-namespace: Ontologies
    PropertyApiName:
      description: |
        The name of the property in the API. To find the API name for your property, use the `Get object type`
        endpoint or check the **Ontology Manager**.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    FieldNameV1:
      description: "A reference to an Ontology object property with the form `properties.{propertyApiName}`."
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    PropertyFilter:
      description: |
        Represents a filter used on properties.

        Endpoints that accept this supports optional parameters that have the form:
        `properties.{propertyApiName}.{propertyFilter}={propertyValueEscapedString}` to filter the returned objects.
        For instance, you may use `properties.firstName.eq=John` to find objects that contain a property called
        "firstName" that has the exact value of "John".

        The following are a list of supported property filters:

        - `properties.{propertyApiName}.contains` - supported on arrays and can be used to filter array properties
          that have at least one of the provided values. If multiple query parameters are provided, then objects
          that have any of the given values for the specified property will be matched.
        - `properties.{propertyApiName}.eq` - used to filter objects that have the exact value for the provided
          property. If multiple query parameters are provided, then objects that have any of the given values
          will be matched. For instance, if the user provides a request by doing
          `?properties.firstName.eq=John&properties.firstName.eq=Anna`, then objects that have a firstName property
          of either John or Anna will be matched. This filter is supported on all property types except Arrays.
        - `properties.{propertyApiName}.neq` - used to filter objects that do not have the provided property values.
          Similar to the `eq` filter, if multiple values are provided, then objects that have any of the given values
          will be excluded from the result.
        - `properties.{propertyApiName}.lt`, `properties.{propertyApiName}.lte`, `properties.{propertyApiName}.gt`
          `properties.{propertyApiName}.gte` - represent less than, less than or equal to, greater than, and greater
          than or equal to respectively. These are supported on date, timestamp, byte, integer, long, double, decimal.
        - `properties.{propertyApiName}.isNull` - used to filter objects where the provided property is (or is not) null.
          This filter is supported on all property types.
      type: string
      x-namespace: Ontologies
      x-safety: safe
    PropertyId:
      description: |
        The immutable ID of a property. Property IDs are only used to identify properties in the **Ontology Manager**
        application and assign them API names. In every other case, API names should be used instead of property IDs.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    SelectedPropertyApiName:
      description: |
        By default, anytime an object is requested, every property belonging to that object is returned.
        The response can be filtered to only include certain properties using the `properties` query parameter.

        Properties to include can be specified in one of two ways.

        - A comma delimited list as the value for the `properties` query parameter
          `properties={property1ApiName},{property2ApiName}`
        - Multiple `properties` query parameters.
          `properties={property1ApiName}&properties={property2ApiName}`

        The primary key of the object will always be returned even if it wasn't specified in the `properties` values.

        Unknown properties specified in the `properties` list will result in a `PropertiesNotFound` error.

        To find the API name for your property, use the `Get object type` endpoint or check the **Ontology Manager**.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    PropertyValue:
      description: |
        Represents the value of a property in the following format.

        | Type       | JSON encoding                                         | Example                                                                                            |
        |----------- |-------------------------------------------------------|----------------------------------------------------------------------------------------------------|
        | Array      | array                                                 | `["alpha", "bravo", "charlie"]`                                                                    |
        | Attachment | JSON encoded `AttachmentProperty` object              | `{"rid":"ri.blobster.main.attachment.2f944bae-5851-4204-8615-920c969a9f2e"}`                       |
        | Boolean    | boolean                                               | `true`                                                                                             |
        | Byte       | number                                                | `31`                                                                                               |
        | Date       | ISO 8601 extended local date string                   | `"2021-05-01"`                                                                                     |
        | Decimal    | string                                                | `"2.718281828"`                                                                                    |
        | Double     | number                                                | `3.14159265`                                                                                       |
        | Float      | number                                                | `3.14159265`                                                                                       |
        | GeoPoint   | geojson                                               | `{"type":"Point","coordinates":[102.0,0.5]}`                                                       |
        | GeoShape   | geojson                                               | `{"type":"LineString","coordinates":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}`            |
        | Integer    | number                                                | `238940`                                                                                           |
        | Long       | string                                                | `"58319870951433"`                                                                                 |
        | Short      | number                                                | `8739`                                                                                             |
        | String     | string                                                | `"Call me Ishmael"`                                                                                |
        | Timestamp  | ISO 8601 extended offset date-time string in UTC zone | `"2021-01-04T05:00:00Z"`                                                                           |

        Note that for backwards compatibility, the Boolean, Byte, Double, Float, Integer, and Short types can also be encoded as JSON strings.
      x-safety: unsafe
      x-namespace: Ontologies
    PropertyValueEscapedString:
      description: Represents the value of a property in string format. This is used in URL parameters.
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    LinkTypeSide:
      type: object
      x-namespace: Ontologies
      properties:
        apiName:
          $ref: "#/components/schemas/LinkTypeApiName"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        cardinality:
          $ref: "#/components/schemas/LinkTypeSideCardinality"
        foreignKeyPropertyApiName:
          $ref: "#/components/schemas/PropertyApiName"
      required:
      - apiName
      - displayName
      - status
      - objectTypeApiName
      - cardinality
    LinkTypeSideCardinality:
      enum:
      - ONE
      - MANY
      x-namespace: Ontologies
    AggregateObjectsRequest:
      type: object
      x-namespace: Ontologies
      properties:
        aggregation:
          items:
            $ref: "#/components/schemas/Aggregation"
          type: array
        query:
          $ref: "#/components/schemas/SearchJsonQuery"
        groupBy:
          items:
            $ref: "#/components/schemas/AggregationGroupBy"
          type: array
    AggregateObjectsResponse:
      properties:
        excludedItems:
          type: integer
          x-safety: unsafe
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          items:
            $ref: "#/components/schemas/AggregateObjectsResponseItem"
          type: array
      type: object
      x-namespace: Ontologies
    AggregateObjectsResponseItem:
      type: object
      x-namespace: Ontologies
      properties:
        group:
          additionalProperties:
            $ref: "#/components/schemas/AggregationGroupValue"
          x-mapKey:
            $ref: "#/components/schemas/AggregationGroupKey"
        metrics:
          items:
            $ref: "#/components/schemas/AggregationMetricResult"
          type: array
    AggregationGroupKey:
      type: string
      x-namespace: Ontologies
      x-safety: unsafe
    AggregationGroupValue:
      x-safety: unsafe
      x-namespace: Ontologies
    AggregationMetricResult:
      type: object
      x-namespace: Ontologies
      properties:
        name:
          type: string
          x-safety: unsafe
        value:
          type: number
          format: double
          description: TBD
          x-safety: unsafe
      required:
      - name
    SearchObjectsRequest:
      properties:
        query:
          $ref: "#/components/schemas/SearchJsonQuery"
        orderBy:
          $ref: "#/components/schemas/SearchOrderBy"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageToken:
          $ref: "#/components/schemas/PageToken"
        fields:
          description: |
            The API names of the object type properties to include in the response.
          type: array
          items:
            $ref: "#/components/schemas/PropertyApiName"
      required:
      - query
      type: object
      x-namespace: Ontologies
    SearchObjectsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/OntologyObject"
          type: array
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        totalCount:
          $ref: "#/components/schemas/TotalCount"
      required:
      - totalCount
      type: object
      x-namespace: Ontologies
    ValidateActionRequest:
      properties:
        parameters:
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
      type: object
      x-namespace: Ontologies
    ValidateActionResponse:
      type: object
      x-namespace: Ontologies
      properties:
        result:
          $ref: "#/components/schemas/ValidationResult"
        submissionCriteria:
          items:
            $ref: "#/components/schemas/SubmissionCriteriaEvaluation"
          type: array
        parameters:
          additionalProperties:
            $ref: "#/components/schemas/ParameterEvaluationResult"
          x-mapKey:
            $ref: "#/components/schemas/ParameterId"
      required:
      - result
    SubmissionCriteriaEvaluation:
      description: |
        Contains the status of the **submission criteria**.
        **Submission criteria** are the prerequisites that need to be satisfied before an Action can be applied.
        These are configured in the **Ontology Manager**.
      type: object
      x-namespace: Ontologies
      properties:
        configuredFailureMessage:
          description: |
            The message indicating one of the **submission criteria** was not satisfied.
            This is configured per **submission criteria** in the **Ontology Manager**.
          type: string
          x-safety: unsafe
        result:
          $ref: "#/components/schemas/ValidationResult"
      required:
      - result
    ValidationResult:
      description: |
        Represents the state of a validation.
      enum:
      - VALID
      - INVALID
      type: string
      x-namespace: Ontologies
    SearchJsonQuery:
      type: object
      x-namespace: Ontologies
      discriminator:
        propertyName: type
        mapping:
          lt: "#/components/schemas/LtQuery"
          gt: "#/components/schemas/GtQuery"
          lte: "#/components/schemas/LteQuery"
          gte: "#/components/schemas/GteQuery"
          eq: "#/components/schemas/EqualsQuery"
          isNull: "#/components/schemas/IsNullQuery"
          contains: "#/components/schemas/ContainsQuery"
          and: "#/components/schemas/AndQuery"
          or: "#/components/schemas/OrQuery"
          not: "#/components/schemas/NotQuery"
          prefix: "#/components/schemas/PrefixQuery"
          phrase: "#/components/schemas/PhraseQuery"
          anyTerm: "#/components/schemas/AnyTermQuery"
          allTerms: "#/components/schemas/AllTermsQuery"
      oneOf:
      - $ref: "#/components/schemas/LtQuery"
      - $ref: "#/components/schemas/GtQuery"
      - $ref: "#/components/schemas/LteQuery"
      - $ref: "#/components/schemas/GteQuery"
      - $ref: "#/components/schemas/EqualsQuery"
      - $ref: "#/components/schemas/IsNullQuery"
      - $ref: "#/components/schemas/ContainsQuery"
      - $ref: "#/components/schemas/AndQuery"
      - $ref: "#/components/schemas/OrQuery"
      - $ref: "#/components/schemas/NotQuery"
      - $ref: "#/components/schemas/PrefixQuery"
      - $ref: "#/components/schemas/PhraseQuery"
      - $ref: "#/components/schemas/AnyTermQuery"
      - $ref: "#/components/schemas/AllTermsQuery"
    LtQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is less than a value.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    GtQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is greater than a value.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    LteQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is less than or equal to a value.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    GteQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is greater than or equal to a value.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    EqualsQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field is equal to a value.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    IsNullQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects based on the existence of the specified field.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          type: boolean
          x-safety: unsafe
      required:
      - field
      - value
    ContainsQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified array contains a value.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          $ref: "#/components/schemas/PropertyValue"
      required:
      - field
      - value
    AndQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where every query is satisfied.
      properties:
        value:
          items:
            $ref: "#/components/schemas/SearchJsonQuery"
          type: array
    OrQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where at least 1 query is satisfied.
      properties:
        value:
          items:
            $ref: "#/components/schemas/SearchJsonQuery"
          type: array
    NotQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the query is not satisfied.
      properties:
        value:
          $ref: "#/components/schemas/SearchJsonQuery"
      required:
      - value
    PrefixQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field starts with the provided value.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          type: string
          x-safety: unsafe
      required:
      - field
      - value
    PhraseQuery:
      type: object
      x-namespace: Ontologies
      description: Returns objects where the specified field contains the provided value as a substring.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          type: string
          x-safety: unsafe
      required:
      - field
      - value
    AnyTermQuery:
      type: object
      x-namespace: Ontologies
      description: "Returns objects where the specified field contains any of the whitespace separated words in any \norder in the provided value. This query supports fuzzy matching.\n"
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          type: string
          x-safety: unsafe
        fuzzy:
          $ref: "#/components/schemas/Fuzzy"
      required:
      - field
      - value
    AllTermsQuery:
      type: object
      x-namespace: Ontologies
      description: |
        Returns objects where the specified field contains all of the whitespace separated words in any
        order in the provided value. This query supports fuzzy matching.
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        value:
          type: string
          x-safety: unsafe
        fuzzy:
          $ref: "#/components/schemas/Fuzzy"
      required:
      - field
      - value
    Fuzzy:
      description: Setting fuzzy to `true` allows approximate matching in search queries that support it.
      type: boolean
      x-namespace: Ontologies
      x-safety: safe
    SearchOrderBy:
      description: Specifies the ordering of search results by a field and an ordering direction.
      type: object
      x-namespace: Ontologies
      properties:
        fields:
          items:
            $ref: "#/components/schemas/SearchOrdering"
          type: array
    SearchOrdering:
      type: object
      x-namespace: Ontologies
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        direction:
          description: Specifies the ordering direction (can be either `asc` or `desc`)
          type: string
          x-safety: safe
      required:
      - field
    ResourcePath:
      description: |
        A path in the Foundry file tree.
      type: string
      x-safety: unsafe
      x-namespace: Datasets
    DatasetName:
      type: string
      x-safety: unsafe
      x-namespace: Datasets
    DatasetRid:
      description: |
        The Resource Identifier (RID) of a Dataset. Example: `ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da`.
      format: rid
      type: string
      x-safety: safe
    Dataset:
      properties:
        rid:
          $ref: "#/components/schemas/DatasetRid"
        name:
          $ref: "#/components/schemas/DatasetName"
        parentFolderRid:
          $ref: "#/components/schemas/FolderRid"
      required:
      - rid
      - name
      - parentFolderRid
      type: object
      x-namespace: Datasets
    CreateDatasetRequest:
      properties:
        name:
          $ref: "#/components/schemas/DatasetName"
        parentFolderRid:
          $ref: "#/components/schemas/FolderRid"
      required:
      - name
      - parentFolderRid
      type: object
      x-namespace: Datasets
    TableExportFormat:
      description: |
        Format for tabular dataset export.
      enum:
      - ARROW
      - CSV
      x-namespace: Datasets
    BranchId:
      description: |
        The identifier (name) of a Branch. Example: `master`.
      type: string
      x-safety: unsafe
    Branch:
      description: |
        A Branch of a Dataset.
      properties:
        branchId:
          $ref: "#/components/schemas/BranchId"
        transactionRid:
          $ref: "#/components/schemas/TransactionRid"
      required:
      - branchId
      type: object
      x-namespace: Datasets
    CreateBranchRequest:
      properties:
        branchId:
          $ref: "#/components/schemas/BranchId"
        transactionRid:
          $ref: "#/components/schemas/TransactionRid"
      required:
      - branchId
      type: object
      x-namespace: Datasets
    ListBranchesResponse:
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          description: The list of branches in the current page.
          items:
            $ref: "#/components/schemas/Branch"
          type: array
      type: object
      x-namespace: Datasets
    TransactionRid:
      description: |
        The Resource Identifier (RID) of a Transaction. Example: `ri.foundry.main.transaction.0a0207cb-26b7-415b-bc80-66a3aa3933f4`.
      format: rid
      type: string
      x-safety: safe
      x-namespace: Datasets
    TransactionType:
      description: |
        The type of a Transaction.
      enum:
      - APPEND
      - UPDATE
      - SNAPSHOT
      - DELETE
      x-namespace: Datasets
    TransactionStatus:
      description: |
        The status of a Transaction.
      enum:
      - ABORTED
      - COMMITTED
      - OPEN
      x-namespace: Datasets
    CreateTransactionRequest:
      properties:
        transactionType:
          $ref: "#/components/schemas/TransactionType"
      type: object
      x-namespace: Datasets
    Transaction:
      description: |
        An operation that modifies the files within a dataset.
      properties:
        rid:
          $ref: "#/components/schemas/TransactionRid"
        transactionType:
          $ref: "#/components/schemas/TransactionType"
        status:
          $ref: "#/components/schemas/TransactionStatus"
        createdTime:
          type: string
          format: date-time
          description: "The timestamp when the transaction was created, in ISO 8601 timestamp format."
          x-safety: unsafe
        closedTime:
          type: string
          format: date-time
          description: "The timestamp when the transaction was closed, in ISO 8601 timestamp format."
          x-safety: unsafe
      required:
      - rid
      - transactionType
      - status
      - createdTime
      type: object
      x-namespace: Datasets
    File:
      properties:
        path:
          $ref: "#/components/schemas/FilePath"
        transactionRid:
          $ref: "#/components/schemas/TransactionRid"
        sizeBytes:
          type: string
          format: long
          x-safety: safe
        updatedTime:
          type: string
          format: date-time
          x-safety: unsafe
      required:
      - path
      - transactionRid
      - updatedTime
      type: object
      x-namespace: Datasets
    ListFilesResponse:
      description: A page of Files and an optional page token that can be used to retrieve the next page.
      properties:
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        data:
          items:
            $ref: "#/components/schemas/File"
          type: array
      type: object
      x-namespace: Datasets
    OperationNotFound:
      description: "The operation is not found, or the user does not have access to it."
      properties:
        parameters:
          type: object
          properties:
            id:
              type: string
              format: rid
              x-safety: safe
          required:
          - id
        errorCode:
          enum:
          - INVALID_ARGUMENT
          type: string
        errorName:
          type: string
        errorInstanceId:
          type: string
      x-type: error
      x-namespace: Operations
    ParameterKey:
      description: |
        The unique identifier of the model parameter.
      type: string
      x-namespace: Models
      x-safety: unsafe
    ParameterValue:
      x-safety: unsafe
      x-namespace: Models
    ChatMessage:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/ChatMessageRole"
        content:
          type: string
          x-safety: unsafe
      x-namespace: Models
      required:
      - role
    ChatMessageRole:
      enum:
      - SYSTEM
      - ASSISTANT
      - USER
      x-namespace: Models
    ChatCompletionRequest:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
        parameters:
          description: |
            Any additional model-specific parameters:
            - for global models, the keys can be one of the following
                (refer to https://platform.openai.com/docs/api-reference/chat/create for documentation on these parameters):
              - `temperature`
              - `top_p`
              - `n`
              - `stop`
              - `max_tokens`
              - `presence_penalty`
              - `frequency_penalty`
              - `logit_bias`
          additionalProperties:
            $ref: "#/components/schemas/ParameterValue"
          x-mapKey:
            $ref: "#/components/schemas/ParameterKey"
      x-namespace: Models
    ChatCompletionChoice:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ChatMessage"
      x-namespace: Models
    ChatCompletionResponse:
      description: Contains `n` different completion choices as specified in the request parameter.
      type: object
      properties:
        choices:
          type: array
          items:
            $ref: "#/components/schemas/ChatCompletionChoice"
      x-namespace: Models
    LanguageModelSource:
      enum:
      - global
      - hosted
    ListLanguageModelsResponse:
      properties:
        data:
          description: The list of language models.
          items:
            $ref: "#/components/schemas/LanguageModel"
          type: array
      type: object
      x-namespace: Models
    LanguageModel:
      description: Represents a language model.
      properties:
        apiName:
          $ref: "#/components/schemas/LanguageModelApiName"
        source:
          $ref: "#/components/schemas/LanguageModelSource"
      type: object
      x-namespace: Models
    LanguageModelApiName:
      description: |
        The name of the language model in the API. To find the API name for your model, use the `List language models`
        endpoint.
      type: string
      x-namespace: Models
      x-safety: unsafe
paths:
  /api/v2/ontologies:
    get:
      description: |
        Lists the Ontologies visible to the current user.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listOntologiesV2
      x-operationVerb: list
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOntologiesV2Response"
              example:
                data:
                - apiName: default-ontology
                  displayName: Ontology
                  description: The default ontology
                  rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
                - apiName: shared-ontology
                  displayName: Shared ontology
                  description: The ontology shared with our suppliers
                  rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
          description: Success response.
  /api/v2/ontologies/{ontology}:
    get:
      description: |
        Gets a specific ontology with the given Ontology RID.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getOntologyV2
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyV2"
              example:
                apiName: default-ontology
                displayName: Ontology
                description: The default ontology
                rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
          description: Success response.
  /api/v2/ontologies/{ontology}/fullMetadata:
    get:
      description: |
        Get the full Ontology metadata. This includes the objects, links, actions, queries, and interfaces.
      operationId: getOntologyFullMetadata
      x-operationVerb: getFullMetadata
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyFullMetadata"
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}:
    get:
      description: |
        Lists the objects for the given Ontology and object type.

        Note that this endpoint does not guarantee consistency. Changes to the data could result in missing or
        repeated objects in the response pages.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Each page may be smaller or larger than the requested page size. However, it
        is guaranteed that if there are more results available, at least one result will be present
        in the response.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listObjectsV2
      x-operationVerb: list
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        in: query
        name: select
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - in: query
        name: orderBy
        required: false
        schema:
          $ref: "#/components/schemas/OrderBy"
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      - description: "A flag to exclude the retrieval of the `__rid` property. \nSetting this to true may improve performance of this endpoint for object types in OSV2.\n"
        in: query
        name: excludeRid
        schema:
          type: boolean
          x-safety: safe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObjectsResponseV2"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - __rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                  __primaryKey: 50030
                  __apiName: Employee
                  id: 50030
                  firstName: John
                  lastName: Doe
                - __rid: ri.phonograph2-objects.main.object.dcd887d1-c757-4d7a-8619-71e6ec2c25ab
                  __primaryKey: 20090
                  __apiName: Employee
                  id: 20090
                  firstName: John
                  lastName: Haymore
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}:
    get:
      description: |
        Gets a specific object with the given primary key.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getObjectV2
      x-operationVerb: get
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the requested object. To look up the expected primary key for your object type, use the
          `Get object type` endpoint or the **Ontology Manager**.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        in: query
        name: select
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      - description: "A flag to exclude the retrieval of the `__rid` property. \nSetting this to true may improve performance of this endpoint for object types in OSV2.\n"
        in: query
        name: excludeRid
        schema:
          type: boolean
          x-safety: safe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyObjectV2"
              example:
                __rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                __primaryKey: 50030
                __apiName: Employee
                id: 50030
                firstName: John
                lastName: Doe
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/count:
    post:
      description: |
        Returns a count of the objects of the given object type.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: countObjects
      x-operationVerb: count
      x-auditCategory: ontologyDataSearch
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountObjectsResponseV2"
              example:
                count: 100
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/search:
    post:
      description: "Search for objects in the specified ontology and object type. The request body is used\nto filter objects based on the specified query. The supported queries are:\n\n| Query type                              | Description                                                                                                       | Supported Types                 |\n|-----------------------------------------|-------------------------------------------------------------------------------------------------------------------|---------------------------------|\n| lt                                      | The provided property is less than the provided value.                                                            | number, string, date, timestamp |\n| gt                                      | The provided property is greater than the provided value.                                                         | number, string, date, timestamp |\n| lte                                     | The provided property is less than or equal to the provided value.                                                | number, string, date, timestamp |\n| gte                                     | The provided property is greater than or equal to the provided value.                                             | number, string, date, timestamp |\n| eq                                      | The provided property is exactly equal to the provided value.                                                     | number, string, date, timestamp |\n| isNull                                  | The provided property is (or is not) null.                                                                        | all                             |\n| contains                                | The provided property contains the provided value.                                                                | array                           |\n| not                                     | The sub-query does not match.                                                                                     | N/A (applied on a query)        |\n| and                                     | All the sub-queries match.                                                                                        | N/A (applied on queries)        |\n| or                                      | At least one of the sub-queries match.                                                                            | N/A (applied on queries)        |\n| startsWith                              | The provided property starts with the provided value.                                                             | string                          |\n| containsAllTermsInOrderPrefixLastTerm   | The provided property contains all the terms provided in order. The last term can be a partial prefix match.      | string                          |\n| containsAllTermsInOrder                 | The provided property contains the provided value as a substring.                                                 | string                          |\n| containsAnyTerm                         | The provided property contains at least one of the terms separated by whitespace.                                 | string                          |\n| containsAllTerms                        | The provided property contains all the terms separated by whitespace.                                             | string                          |                                                                   \n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.\n"
      operationId: searchObjectsV2
      x-operationVerb: search
      x-auditCategory: ontologyDataSearch
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchObjectsRequestV2"
            example:
              where:
                type: eq
                field: age
                value: 21
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchObjectsResponseV2"
              example:
                data:
                - __rid: ri.phonograph2-objects.main.object.5b5dbc28-7f05-4e83-a33a-1e5b851ababb
                  __primaryKey: 1000
                  __apiName: Employee
                  employeeId: 1000
                  lastName: smith
                  firstName: john
                  age: 21
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/aggregate:
    post:
      description: |
        Perform functions on object fields in the specified ontology and object type.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: aggregateObjectsV2
      x-operationVerb: aggregate
      x-auditCategory: ontologyDataSearch
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: The type of the object to aggregate on.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AggregateObjectsRequestV2"
            example:
              aggregation:
              - type: min
                field: properties.tenure
                name: min_tenure
              - type: avg
                field: properties.tenure
                name: avg_tenure
              query:
                not:
                  field: name
                  eq: john
              groupBy:
              - field: startDate
                type: range
                ranges:
                - startValue: 2020-01-01
                  endValue: 2020-06-01
              - field: city
                type: exact
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregateObjectsResponseV2"
              example:
                data:
                - metrics:
                  - name: min_tenure
                    value: 1
                  - name: avg_tenure
                    value: 3
                  group:
                    startDate:
                      startValue: 2020-01-01
                      endValue: 2020-06-01
                    city: New York City
                - metrics:
                  - name: min_tenure
                    value: 2
                  - name: avg_tenure
                    value: 3
                  group:
                    startDate:
                      startValue: 2020-01-01
                      endValue: 2020-06-01
                    city: San Francisco
          description: Success response.
  /api/v2/ontologies/{ontology}/interfaceTypes:
    get:
      description: ":::callout{theme=warning title=Warning}\n  This endpoint is in preview and may be modified or removed at any time.\n  To use this endpoint, add `preview=true` to the request query parameters.\n:::\n\nLists the interface types for the given Ontology.\n\nEach page may be smaller than the requested page size. However, it is guaranteed that if there are more\nresults available, at least one result will be present in the response.        \n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.\n"
      operationId: listInterfaceTypes
      x-operationVerb: list
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListInterfaceTypesResponse"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - apiName: Athlete
                  displayName: Athlete
                  description: Good at sportsball
                  properties:
                    name:
                      rid: com.palantir.property.d1abdbfe-0ce2-4fff-b0af-af21002c314b
                      apiName: name
                      displayName: Name
                      dataType: string
                  extendsInterfaces:
                  - Human
                  rid: ri.ontology.main.interface.bea1af8c-7d5c-4ec9-b845-8eeed6d77482
          description: Success response.
  /api/v2/ontologies/{ontology}/interfaceTypes/{interfaceType}:
    get:
      description: |
        :::callout{theme=warning title=Warning}
          This endpoint is in preview and may be modified or removed at any time.
          To use this endpoint, add `preview=true` to the request query parameters.
        :::

        Gets a specific object type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getInterfaceType
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the interface type. To find the API name, use the **List interface types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: interfaceType
        required: true
        schema:
          $ref: "#/components/schemas/InterfaceTypeApiName"
        example: Employee
      - description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterfaceType"
              example:
                apiName: Athlete
                displayName: Athlete
                description: Good at sportsball
                properties:
                  name:
                    rid: com.palantir.property.d1abdbfe-0ce2-4fff-b0af-af21002c314b
                    apiName: name
                    displayName: Name
                    dataType: string
                extendsInterfaces:
                - Human
                rid: ri.ontology.main.interface.bea1af8c-7d5c-4ec9-b845-8eeed6d77482
          description: Success response.
  /api/v2/ontologies/{ontology}/interfaces/{interfaceType}/search:
    post:
      description: ":::callout{theme=warning title=Warning}\n  This endpoint is in preview and may be modified or removed at any time.\n  To use this endpoint, add `preview=true` to the request query parameters.\n:::\n\nSearch for objects in the specified ontology and interface type. Any properties specified in the \"where\" or \n\"orderBy\" parameters must be shared property type API names defined on the interface. The following search \nqueries are supported:\n\n| Query type                              | Description                                                                                                       | Supported Types                 |\n|-----------------------------------------|-------------------------------------------------------------------------------------------------------------------|---------------------------------|\n| lt                                      | The provided property is less than the provided value.                                                            | number, string, date, timestamp |\n| gt                                      | The provided property is greater than the provided value.                                                         | number, string, date, timestamp |\n| lte                                     | The provided property is less than or equal to the provided value.                                                | number, string, date, timestamp |\n| gte                                     | The provided property is greater than or equal to the provided value.                                             | number, string, date, timestamp |\n| eq                                      | The provided property is exactly equal to the provided value.                                                     | number, string, date, timestamp |\n| isNull                                  | The provided property is (or is not) null.                                                                        | all                             |\n| contains                                | The provided property contains the provided value.                                                                | array                           |\n| not                                     | The sub-query does not match.                                                                                     | N/A (applied on a query)        |\n| and                                     | All the sub-queries match.                                                                                        | N/A (applied on queries)        |\n| or                                      | At least one of the sub-queries match.                                                                            | N/A (applied on queries)        |\n| startsWith                              | The provided property starts with the provided value.                                                             | string                          |\n| containsAllTermsInOrderPrefixLastTerm   | The provided property contains all the terms provided in order. The last term can be a partial prefix match.      | string                          |\n| containsAllTermsInOrder                 | The provided property contains the provided value as a substring.                                                 | string                          |\n| containsAnyTerm                         | The provided property contains at least one of the terms separated by whitespace.                                 | string                          |\n| containsAllTerms                        | The provided property contains all the terms separated by whitespace.                                             | string                          |                                                                 \n\nAttempting to use an unsupported query will result in a validation error. Third-party applications using this \nendpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.\n"
      operationId: searchObjectsForInterface
      x-operationVerb: list
      x-auditCategory: ontologyDataSearch
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the interface type. To find the API name, use the **List interface types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: interfaceType
        required: true
        schema:
          $ref: "#/components/schemas/InterfaceTypeApiName"
        example: Employee
      - description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchObjectsForInterfaceRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchObjectsResponseV2"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - __rid: ri.phonograph2-objects.main.object.5b5dbc28-7f05-4e83-a33a-1e5b851ababb
                  __primaryKey: 1000
                  __apiName: Employee
                  employeeId: 1000
                  lastName: smith
                  firstName: john
                  age: 21
          description: Success response.
  /api/v2/ontologies/{ontology}/interfaces/{interfaceType}/aggregate:
    post:
      description: ":::callout{theme=warning title=Warning}\n  This endpoint is in preview and may be modified or removed at any time.\n  To use this endpoint, add `preview=true` to the request query parameters.\n:::\n\nPerform functions on object fields in the specified ontology and of the specified interface type. Any \nproperties specified in the query must be shared property type API names defined on the interface.\n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.\n"
      operationId: aggregateObjectsForInterface
      x-operationVerb: aggregate
      x-auditCategory: ontologyDataSearch
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the interface type. To find the API name, use the **List interface types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: interfaceType
        required: true
        schema:
          $ref: "#/components/schemas/InterfaceTypeApiName"
        example: Employee
      - description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AggregateObjectsRequestV2"
            example:
              aggregation:
              - type: min
                field: properties.tenure
                name: min_tenure
              - type: avg
                field: properties.tenure
                name: avg_tenure
              query:
                not:
                  field: name
                  eq: john
              groupBy:
              - field: startDate
                type: range
                ranges:
                - startValue: 2020-01-01
                  endValue: 2020-06-01
              - field: city
                type: exact
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregateObjectsResponseV2"
              example:
                data:
                - metrics:
                  - name: min_tenure
                    value: 1
                  - name: avg_tenure
                    value: 3
                  group:
                    startDate:
                      startValue: 2020-01-01
                      endValue: 2020-06-01
                    city: New York City
                - metrics:
                  - name: min_tenure
                    value: 2
                  - name: avg_tenure
                    value: 3
                  group:
                    startDate:
                      startValue: 2020-01-01
                      endValue: 2020-06-01
                    city: San Francisco
          description: Success response.
  /api/v2/ontologies/{ontology}/queryTypes:
    get:
      description: "Lists the query types for the given Ontology.        \n\nEach page may be smaller than the requested page size. However, it is guaranteed that if there are more\nresults available, at least one result will be present in the response.        \n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.\n"
      operationId: listQueryTypesV2
      x-operationVerb: list
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The desired size of the page to be returned. Defaults to 100.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryTypesResponseV2"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - apiName: getEmployeesInCity
                  displayName: Get Employees in City
                  description: Gets all employees in a given city
                  parameters:
                    city:
                      dataType:
                        type: string
                      description: The city to search for employees in
                      required: true
                  output:
                    dataType:
                      type: array
                      required: true
                      subType:
                        type: object
                        objectApiName: Employee
                    required: true
                  rid: ri.function-registry.main.function.f05481407-1d67-4120-83b4-e3fed5305a29b
                  version: 1.1.3-rc1
                - apiName: getAverageTenureOfEmployees
                  displayName: Get Average Tenure
                  description: Gets the average tenure of all employees
                  parameters:
                    employees:
                      dataType:
                        type: string
                      description: An object set of the employees to calculate the average tenure of
                      required: true
                    useMedian:
                      dataType:
                        type: boolean
                      description: "An optional flag to use the median instead of the mean, defaults to false"
                      required: false
                  output:
                    dataType:
                      type: double
                    required: true
                  rid: ri.function-registry.main.function.9549c29d3-e92f-64a1-beeb-af817819a400
                  version: 2.1.1
          description: Success response.
  /api/v2/ontologies/{ontology}/queryTypes/{queryApiName}:
    get:
      description: |
        Gets a specific query type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getQueryTypeV2
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the query type. To find the API name, use the **List query types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: queryApiName
        required: true
        schema:
          $ref: "#/components/schemas/QueryApiName"
        example: getEmployeesInCity
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryTypeV2"
              example:
                apiName: getEmployeesInCity
                displayName: Get Employees in City
                description: Gets all employees in a given city
                parameters:
                  city:
                    dataType:
                      type: string
                    description: The city to search for employees in
                    required: true
                output:
                  dataType:
                    type: array
                    subType:
                      type: object
                      objectApiName: Employee
                  required: true
                rid: ri.function-registry.main.function.f05481407-1d67-4120-83b4-e3fed5305a29b
                version: 1.1.3-rc1
          description: Success response.
  /api/v2/ontologies/{ontology}/queries/{queryApiName}/execute:
    post:
      description: "Executes a Query using the given parameters.\n\nOptional parameters do not need to be supplied.\n\nThird-party applications using this endpoint via OAuth2 must request the \nfollowing operation scopes: `api:ontologies-read`.\n"
      operationId: executeQueryV2
      x-operationVerb: execute
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the Query to execute.
        in: path
        name: queryApiName
        required: true
        schema:
          $ref: "#/components/schemas/QueryApiName"
        example: getEmployeesInCity
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteQueryRequest"
            example:
              parameters:
                city: New York
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecuteQueryResponse"
              example:
                value:
                - EMP546
                - EMP609
                - EMP989
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/links/{linkType}:
    get:
      description: |
        Lists the linked objects for a specific object and the given link type.

        Note that this endpoint does not guarantee consistency. Changes to the data could result in missing or
        repeated objects in the response pages.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Each page may be smaller or larger than the requested page size. However, it
        is guaranteed that if there are more results available, at least one result will be present
        in the response.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listLinkedObjectsV2
      x-operationVerb: listLinkedObjects
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object from which the links originate. To look up the expected primary key for your
          object type, use the `Get object type` endpoint or the **Ontology Manager**.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the link that exists between the object and the requested objects.
          To find the API name for your link type, check the **Ontology Manager**.
        in: path
        name: linkType
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      - description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        in: query
        name: select
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - in: query
        name: orderBy
        required: false
        schema:
          $ref: "#/components/schemas/OrderBy"
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      - description: "A flag to exclude the retrieval of the `__rid` property. \nSetting this to true may improve performance of this endpoint for object types in OSV2.\n"
        in: query
        name: excludeRid
        schema:
          type: boolean
          x-safety: safe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLinkedObjectsResponseV2"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - __rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
                  __primaryKey: 80060
                  __apiName: Employee
                  id: 80060
                  firstName: Anna
                  lastName: Smith
                - __rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
                  __primaryKey: 51060
                  __apiName: Employee
                  id: 51060
                  firstName: James
                  lastName: Matthews
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/links/{linkType}/{linkedObjectPrimaryKey}:
    get:
      description: |
        Get a specific linked object that originates from another object.

        If there is no link between the two objects, `LinkedObjectNotFound` is thrown.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getLinkedObjectV2
      x-operationVerb: getLinkedObject
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object from which the links originate. To look up the expected primary key for your
          object type, use the `Get object type` endpoint or the **Ontology Manager**.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the link that exists between the object and the requested objects.
          To find the API name for your link type, check the **Ontology Manager**.
        in: path
        name: linkType
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      - description: |
          The primary key of the requested linked object. To look up the expected primary key for your object type,
          use the `Get object type` endpoint (passing the linked object type) or the **Ontology Manager**.
        in: path
        name: linkedObjectPrimaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 80060
      - description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        in: query
        name: select
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      - description: "A flag to exclude the retrieval of the `__rid` property. \nSetting this to true may improve performance of this endpoint for object types in OSV2.\n"
        in: query
        name: excludeRid
        schema:
          type: boolean
          x-safety: safe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyObjectV2"
              example:
                __rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                __primaryKey: 50030
                __apiName: Employee
                id: 50030
                firstName: John
                lastName: Doe
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/attachments/{property}:
    get:
      description: |
        Get the metadata of attachments parented to the given object.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: listPropertyAttachments
      x-operationVerb: getAttachment
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object containing the attachment.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the attachment property. To find the API name for your attachment,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        in: path
        name: property
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentMetadataResponse"
              example:
                type: single
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                filename: My Image.jpeg
                sizeBytes: 393469
                mediaType: image/jpeg
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/attachments/{property}/{attachmentRid}:
    get:
      description: |
        Get the metadata of a particular attachment in an attachment list.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getAttachmentPropertyByRidV2
      x-operationVerb: getAttachmentByRid
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object containing the attachment.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the attachment property. To find the API name for your attachment,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        in: path
        name: property
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - description: The RID of the attachment.
        name: attachmentRid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentV2"
              example:
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                filename: My Image.jpeg
                sizeBytes: 393469
                mediaType: image/jpeg
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/attachments/{property}/content:
    get:
      description: |
        Get the content of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getAttachmentPropertyContentV2
      x-operationVerb: readAttachment
      x-auditCategory: dataExport
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object containing the attachment.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the attachment property. To find the API name for your attachment,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        in: path
        name: property
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/attachments/{property}/{attachmentRid}/content:
    get:
      description: |
        Get the content of an attachment by its RID.

        The RID must exist in the attachment array of the property.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getAttachmentPropertyContentByRidV2
      x-operationVerb: readAttachmentByRid
      x-auditCategory: dataExport
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object containing the attachment.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the attachment property. To find the API name for your attachment,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        in: path
        name: property
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - description: The RID of the attachment.
        name: attachmentRid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: Success response.
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/timeseries/{property}/firstPoint:
    get:
      description: |
        Get the first point of a time series property.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getFirstPoint
      x-operationVerb: getFirstPoint
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object with the time series property.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the time series property. To find the API name for your time series property,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        in: path
        name: property
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeSeriesPoint"
          description: Success response.
        "204":
          description: No Content
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/timeseries/{property}/lastPoint:
    get:
      description: |
        Get the last point of a time series property.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getLastPoint
      x-operationVerb: getLastPoint
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object with the time series property.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the time series property. To find the API name for your time series property,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        in: path
        name: property
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeSeriesPoint"
          description: Success response.
        "204":
          description: No Content
  /api/v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/timeseries/{property}/streamPoints:
    post:
      description: |
        Stream all of the points of a time series property.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: streamPoints
      x-operationVerb: streamPoints
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object with the time series property.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the time series property. To find the API name for your time series property,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        in: path
        name: property
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: null
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StreamTimeSeriesPointsRequest"
            example:
              range:
                type: relative
                startTime:
                  when: BEFORE
                  value: 5
                  unit: MONTHS
                endTime:
                  when: BEFORE
                  value: 1
                  unit: MONTHS
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
              example:
                data:
                - time: 2020-03-06T12:00:00Z
                  value: 48.5
                - time: 2020-03-06T13:00:00Z
                  value: 75.01
                - time: 2020-03-06T14:00:00Z
                  value: 31.33
          description: Success response.
  /api/v2/ontologies/{ontology}/actions/{action}/apply:
    post:
      description: "Applies an action using the given parameters. \n\nChanges to the Ontology are eventually consistent and may take some time to be visible.\n\nNote that [parameter default values](/docs/foundry/action-types/parameters-default-value/) are not currently supported by\nthis endpoint.\n\nThird-party applications using this endpoint via OAuth2 must request the\nfollowing operation scopes: `api:ontologies-read api:ontologies-write`.\n"
      operationId: applyActionV2
      x-operationVerb: apply
      x-auditCategory: ontologyDataTransform
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        in: path
        name: action
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyActionRequestV2"
            example:
              parameters:
                id: 80060
                newName: Anna Smith-Doe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyncApplyActionResponseV2"
              example:
                validation:
                  result: VALID
                parameters:
                  id:
                    evaluatedConstraints: []
                    result: VALID
                    required: true
                  newName:
                    evaluatedConstraints: []
                    result: VALID
                    required: true
          description: Success response.
  /api/v2/ontologies/{ontology}/actions/{action}/applyBatch:
    post:
      description: |
        Applies multiple actions (of the same Action Type) using the given parameters.
        Changes to the Ontology are eventually consistent and may take some time to be visible.

        Up to 20 actions may be applied in one call. Actions that only modify objects in Object Storage v2 and do not
        call Functions may receive a higher limit.

        Note that [notifications](/docs/foundry/action-types/notifications/) are not currently supported by this endpoint.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read api:ontologies-write`.
      operationId: applyActionBatchV2
      x-operationVerb: applyBatch
      x-auditCategory: ontologyDataTransform
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        in: path
        name: action
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchApplyActionRequestV2"
            example:
              requests:
              - parameters:
                  id: 80060
                  newName: Anna Smith-Doe
              - parameters:
                  id: 80061
                  newName: Joe Bloggs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchApplyActionResponseV2"
              example: {}
          description: Success response.
  /api/v2/ontologies/{ontology}/actions/{action}/applyAsync:
    post:
      description: "Applies an action using the given parameters. \n\nChanges to the Ontology are eventually consistent and may take some time to be visible.\n\nNote that [parameter default values](/docs/foundry/action-types/parameters-default-value/) are not currently supported by\nthis endpoint.\n\nThird-party applications using this endpoint via OAuth2 must request the\nfollowing operation scopes: `api:ontologies-read api:ontologies-write`.\n"
      operationId: applyActionAsyncV2
      x-operationVerb: applyAsync
      x-auditCategory: ontologyDataTransform
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        in: path
        name: action
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AsyncApplyActionRequestV2"
            example:
              parameters:
                id: 80060
                newName: Anna Smith-Doe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncApplyActionResponseV2"
              example:
                operationId: ri.actions.main.action.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
          description: Success response.
  /api/v2/ontologies/{ontology}/objectSets/createTemporary:
    post:
      description: "Creates a temporary `ObjectSet` from the given definition.        \n\nThird-party applications using this endpoint via OAuth2 must request the\nfollowing operation scopes: `api:ontologies-read api:ontologies-write`.\n"
      operationId: createTemporaryObjectSetV2
      x-operationVerb: createTemporary
      x-auditCategory: ontologyLogicCreate
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTemporaryObjectSetRequestV2"
            example:
              objectSet:
                type: base
                objectType: Employee
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTemporaryObjectSetResponseV2"
              example:
                objectSetRid: ri.object-set.main.object-set.c32ccba5-1a55-4cfe-ad71-160c4c77a053
  /api/v2/ontologies/{ontology}/objectSets/{objectSetRid}:
    get:
      description: "Gets the definition of the `ObjectSet` with the given RID.        \n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.\n"
      operationId: getObjectSetV2
      x-operationVerb: get
      x-auditCategory: ontologyLogicAccess
      x-releaseStage: PRIVATE_BETA
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The RID of the object set.
        in: path
        name: objectSetRid
        required: true
        schema:
          $ref: "#/components/schemas/ObjectSetRid"
        example: ri.object-set.main.object-set.c32ccba5-1a55-4cfe-ad71-160c4c77a053
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectSet"
              example:
                data:
                  objectSet:
                    type: base
                    objectType: Employee
  /api/v2/ontologies/{ontology}/objectSets/loadObjects:
    post:
      description: |
        Load the ontology objects present in the `ObjectSet` from the provided object set definition.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: loadObjectSetV2
      x-operationVerb: load
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoadObjectSetRequestV2"
            example:
              objectSet:
                type: base
                objectType: Employee
              pageSize: 10000
              nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoadObjectSetResponseV2"
              example:
                data:
                - __rid: ri.phonograph2-objects.main.object.5b5dbc28-7f05-4e83-a33a-1e5b851
                  __primaryKey: 50030
                  __apiName: Employee
                  employeeId: 50030
                  firstName: John
                  lastName: Smith
                  age: 21
                - __rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                  __primaryKey: 20090
                  __apiName: Employee
                  employeeId: 20090
                  firstName: John
                  lastName: Haymore
                  age: 27
          description: Success response.
  /api/v2/ontologies/{ontology}/objectSets/aggregate:
    post:
      description: "Aggregates the ontology objects present in the `ObjectSet` from the provided object set definition.        \n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.\n"
      operationId: aggregateObjectSetV2
      x-operationVerb: aggregate
      x-auditCategory: ontologyDataSearch
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The repository associated with a marketplace installation.
        in: query
        name: artifactRepository
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - description: |
          The package name of the generated SDK.
        in: query
        name: packageName
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AggregateObjectSetRequestV2"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregateObjectsResponseV2"
              example:
                data:
                - metrics:
                  - name: min_tenure
                    value: 1
                  - name: avg_tenure
                    value: 3
                  group:
                    startDate:
                      startValue: 2020-01-01
                      endValue: 2020-06-01
                    city: New York City
                - metrics:
                  - name: min_tenure
                    value: 2
                  - name: avg_tenure
                    value: 3
                  group:
                    startDate:
                      startValue: 2020-01-01
                      endValue: 2020-06-01
                    city: San Francisco
          description: Success response.
  /api/v2/ontologies/{ontology}/objectTypes:
    get:
      description: |
        Lists the object types for the given Ontology.

        Each page may be smaller or larger than the requested page size. However, it is guaranteed that if there are
        more results available, at least one result will be present in the
        response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listObjectTypesV2
      x-operationVerb: list
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObjectTypesV2Response"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - apiName: employee
                  description: A full-time or part-time employee of our firm
                  displayName: Employee
                  status: ACTIVE
                  primaryKey: employeeId
                  properties:
                    employeeId:
                      dataType:
                        type: integer
                    fullName:
                      dataType:
                        type: string
                    office:
                      description: The unique ID of the employee's primary assigned office
                      dataType:
                        type: string
                    startDate:
                      description: "The date the employee was hired (most recently, if they were re-hired)"
                      dataType:
                        type: date
                    rid: ri.ontology.main.object-type.401ac022-89eb-4591-8b7e-0a912b9efb44
                - apiName: office
                  description: A physical location (not including rented co-working spaces)
                  displayName: Office
                  status: ACTIVE
                  primaryKey: officeId
                  properties:
                    officeId:
                      dataType:
                        type: string
                    address:
                      description: The office's physical address (not necessarily shipping address)
                      dataType:
                        type: string
                    capacity:
                      description: The maximum seated-at-desk capacity of the office (maximum fire-safe capacity may be higher)
                      dataType:
                        type: integer
                    rid: ri.ontology.main.object-type.9a0e4409-9b50-499f-a637-a3b8334060d9
          description: Success response.
  /api/v2/ontologies/{ontology}/objectTypes/{objectType}:
    get:
      description: |
        Gets a specific object type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getObjectTypeV2
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectTypeV2"
              example:
                apiName: employee
                description: A full-time or part-time employee of our firm
                displayName: Employee
                status: ACTIVE
                primaryKey: employeeId
                properties:
                  employeeId:
                    dataType:
                      type: integer
                  fullName:
                    dataType:
                      type: string
                  office:
                    description: The unique ID of the employee's primary assigned office
                    dataType:
                      type: string
                  startDate:
                    description: "The date the employee was hired (most recently, if they were re-hired)"
                    dataType:
                      type: date
                rid: ri.ontology.main.object-type.0381eda6-69bb-4cb7-8ba0-c6158e094a04
          description: Success response.
  /api/v2/ontologies/{ontology}/objectTypes/{objectType}/fullMetadata:
    get:
      description: |
        Gets the full metadata for a specific object type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getObjectTypeFullMetadata
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectTypeFullMetadata"
          description: Success response.
  /api/v2/ontologies/{ontology}/actionTypes:
    get:
      description: |
        Lists the action types for the given Ontology.

        Each page may be smaller than the requested page size. However, it is guaranteed that if there are more
        results available, at least one result will be present in the response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listActionTypesV2
      x-operationVerb: list
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListActionTypesResponseV2"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - apiName: promote-employee
                  description: Update an employee's title and compensation
                  parameters:
                    employeeId:
                      dataType:
                        type: integer
                    newTitle:
                      dataType:
                        type: string
                    newCompensation:
                      dataType:
                        type: double
                  rid: ri.ontology.main.action-type.7ed72754-7491-428a-bb18-4d7296eb2167
                - apiName: move-office
                  description: Update an office's physical location
                  parameters:
                    officeId:
                      dataType:
                        type: string
                    newAddress:
                      description: The office's new physical address (not necessarily shipping address)
                      dataType:
                        type: string
                    newCapacity:
                      description: The maximum seated-at-desk capacity of the new office (maximum fire-safe capacity may be higher)
                      dataType:
                        type: integer
                  rid: ri.ontology.main.action-type.9f84017d-cf17-4fa8-84c3-8e01e5d594f2
          description: Success response.
  /api/v2/ontologies/{ontology}/actionTypes/{actionType}:
    get:
      description: |
        Gets a specific action type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getActionTypeV2
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The name of the action type in the API.
        in: path
        name: actionType
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: promote-employee
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionTypeV2"
              example:
                data:
                  apiName: promote-employee
                  description: Update an employee's title and compensation
                  parameters:
                    employeeId:
                      dataType:
                        type: integer
                    newTitle:
                      dataType:
                        type: string
                    newCompensation:
                      dataType:
                        type: double
                  rid: ri.ontology.main.action-type.7ed72754-7491-428a-bb18-4d7296eb2167
          description: Success response.
  /api/v2/ontologies/{ontology}/objectTypes/{objectType}/outgoingLinkTypes:
    get:
      description: |
        List the outgoing links for an object type.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: listOutgoingLinkTypesV2
      x-operationVerb: listOutgoingLinkTypes
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager** application.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: Flight
      - description: The desired size of the page to be returned.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOutgoingLinkTypesResponseV2"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - apiName: originAirport
                  objectTypeApiName: Airport
                  cardinality: ONE
                  foreignKeyPropertyApiName: originAirportId
          description: Success response.
  /api/v2/ontologies/{ontology}/objectTypes/{objectType}/outgoingLinkTypes/{linkType}:
    get:
      description: |
        Get an outgoing link for an object type.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getOutgoingLinkTypeV2
      x-operationVerb: getOutgoingLinkType
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        in: path
        name: ontology
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager** application.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: Employee
      - description: |
          The API name of the outgoing link.
          To find the API name for your link type, check the **Ontology Manager**.
        in: path
        name: linkType
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkTypeSideV2"
              example:
                apiName: directReport
                objectTypeApiName: Employee
                cardinality: MANY
          description: Success response.
  /api/v2/ontologies/attachments/upload:
    post:
      description: |
        Upload an attachment to use in an action. Any attachment which has not been linked to an object via
        an action within one hour after upload will be removed.
        Previously mapped attachments which are not connected to any object anymore are also removed on
        a biweekly basis.
        The body of the request must contain the binary content of the file and the `Content-Type` header must be `application/octet-stream`.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-write`.
      operationId: uploadAttachmentV2
      x-operationVerb: upload
      x-auditCategory: dataCreate
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: The size in bytes of the file content being uploaded.
        in: header
        name: Content-Length
        required: true
        schema:
          $ref: "#/components/schemas/ContentLength"
      - description: The media type of the file being uploaded.
        in: header
        name: Content-Type
        required: true
        schema:
          $ref: "#/components/schemas/ContentType"
      - description: The name of the file being uploaded.
        in: query
        name: filename
        required: true
        schema:
          $ref: "#/components/schemas/Filename"
        example: My Image.jpeg
      requestBody:
        content:
          '*/*':
            schema:
              format: binary
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentV2"
              example:
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                filename: My Image.jpeg
                sizeBytes: 393469
                mediaType: image/jpeg
          description: Success response.
  /api/v2/ontologies/attachments/{attachmentRid}/content:
    get:
      description: |
        Get the content of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getAttachmentContentV2
      x-operationVerb: read
      x-auditCategory: dataExport
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: The RID of the attachment.
        in: path
        name: attachmentRid
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: Success response.
  /api/v2/ontologies/attachments/{attachmentRid}:
    get:
      description: |
        Get the metadata of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getAttachmentV2
      x-operationVerb: get
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: The RID of the attachment.
        in: path
        name: attachmentRid
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentV2"
              example:
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                filename: My Image.jpeg
                sizeBytes: 393469
                mediaType: image/jpeg
          description: Success response.
  /v2/operations/{operationId}:
    get:
      description: |
        Get an asynchronous operation by its ID.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getOperation
      x-operationVerb: get
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: "The unique Resource Identifier (RID) of the operation. \nThis is the id returned in the response of the invoking operation.\n"
        in: path
        name: operationId
        required: true
        schema:
          type: string
          format: rid
          x-safety: safe
        example: ri.actions.main.action.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      responses:
        "200":
          content:
            application/json:
              schema:
                x-type:
                  type: asyncOperationCollection
          description: Success response.
  /api/v1/ontologies:
    get:
      description: |
        Lists the Ontologies visible to the current user.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listOntologies
      x-operationVerb: list
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOntologiesResponse"
              example:
                data:
                - apiName: default-ontology
                  displayName: Ontology
                  description: The default ontology
                  rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
                - apiName: shared-ontology
                  displayName: Shared ontology
                  description: The ontology shared with our suppliers
                  rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
          description: Success response.
  /api/v1/ontologies/{ontologyRid}:
    get:
      description: |
        Gets a specific ontology with the given Ontology RID.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getOntology
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
              example:
                apiName: default-ontology
                displayName: Ontology
                description: The default ontology
                rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objectTypes:
    get:
      description: |
        Lists the object types for the given Ontology.

        Each page may be smaller or larger than the requested page size. However, it is guaranteed that if there are
        more results available, at least one result will be present in the
        response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listObjectTypes
      x-operationVerb: list
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object types. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObjectTypesResponse"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - apiName: employee
                  description: A full-time or part-time employee of our firm
                  primaryKey:
                  - employeeId
                  properties:
                    employeeId:
                      baseType: Integer
                    fullName:
                      baseType: String
                    office:
                      description: The unique ID of the employee's primary assigned office
                      baseType: String
                    startDate:
                      description: "The date the employee was hired (most recently, if they were re-hired)"
                      baseType: Date
                  rid: ri.ontology.main.object-type.401ac022-89eb-4591-8b7e-0a912b9efb44
                - apiName: office
                  description: A physical location (not including rented co-working spaces)
                  primaryKey:
                  - officeId
                  properties:
                    officeId:
                      baseType: String
                    address:
                      description: The office's physical address (not necessarily shipping address)
                      baseType: String
                    capacity:
                      description: The maximum seated-at-desk capacity of the office (maximum fire-safe capacity may be higher)
                      baseType: Integer
                  rid: ri.ontology.main.object-type.9a0e4409-9b50-499f-a637-a3b8334060d9
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objectTypes/{objectType}:
    get:
      description: |
        Gets a specific object type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getObjectType
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectType"
              example:
                apiName: employee
                description: A full-time or part-time employee of our firm
                primaryKey:
                - employeeId
                properties:
                  employeeId:
                    baseType: Integer
                  fullName:
                    baseType: String
                  office:
                    description: The unique ID of the employee's primary assigned office
                    baseType: String
                  startDate:
                    description: "The date the employee was hired (most recently, if they were re-hired)"
                    baseType: Date
                rid: ri.ontology.main.object-type.0381eda6-69bb-4cb7-8ba0-c6158e094a04
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/actionTypes:
    get:
      description: |
        Lists the action types for the given Ontology.

        Each page may be smaller than the requested page size. However, it is guaranteed that if there are more
        results available, at least one result will be present in the response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listActionTypes
      x-operationVerb: list
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action types. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListActionTypesResponse"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - apiName: promote-employee
                  description: Update an employee's title and compensation
                  parameters:
                    employeeId:
                      baseType: Integer
                    newTitle:
                      baseType: String
                    newCompensation:
                      baseType: Decimal
                  rid: ri.ontology.main.action-type.7ed72754-7491-428a-bb18-4d7296eb2167
                - apiName: move-office
                  description: Update an office's physical location
                  parameters:
                    officeId:
                      baseType: String
                    newAddress:
                      description: The office's new physical address (not necessarily shipping address)
                      baseType: String
                    newCapacity:
                      description: The maximum seated-at-desk capacity of the new office (maximum fire-safe capacity may be higher)
                      baseType: Integer
                  rid: ri.ontology.main.action-type.9f84017d-cf17-4fa8-84c3-8e01e5d594f2
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/actionTypes/{actionTypeApiName}:
    get:
      description: |
        Gets a specific action type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getActionType
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action type.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The name of the action type in the API.
        in: path
        name: actionTypeApiName
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: promote-employee
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionType"
              example:
                data:
                  apiName: promote-employee
                  description: Update an employee's title and compensation
                  parameters:
                    employeeId:
                      baseType: Integer
                    newTitle:
                      baseType: String
                    newCompensation:
                      baseType: Decimal
                  rid: ri.ontology.main.action-type.7ed72754-7491-428a-bb18-4d7296eb2167
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objects/{objectType}:
    get:
      description: |
        Lists the objects for the given Ontology and object type.

        This endpoint supports filtering objects.
        See the [Filtering Objects documentation](/docs/foundry/api/ontology-resources/objects/object-basics/#filtering-objects) for details.

        Note that this endpoint does not guarantee consistency. Changes to the data could result in missing or
        repeated objects in the response pages.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Each page may be smaller or larger than the requested page size. However, it
        is guaranteed that if there are more results available, at least one result will be present
        in the response.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listObjects
      x-operationVerb: list
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the objects. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        in: query
        name: properties
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - in: query
        name: orderBy
        required: false
        schema:
          $ref: "#/components/schemas/OrderBy"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObjectsResponse"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                  properties:
                    id: 50030
                    firstName: John
                    lastName: Doe
                - rid: ri.phonograph2-objects.main.object.dcd887d1-c757-4d7a-8619-71e6ec2c25ab
                  properties:
                    id: 20090
                    firstName: John
                    lastName: Haymore
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objects/{objectType}/{primaryKey}:
    get:
      description: |
        Gets a specific object with the given primary key.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getObject
      x-operationVerb: get
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the requested object. To look up the expected primary key for your object type, use the
          `Get object type` endpoint or the **Ontology Manager**.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        in: query
        name: properties
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyObject"
              example:
                rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                properties:
                  id: 50030
                  firstName: John
                  lastName: Doe
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objects/{objectType}/{primaryKey}/links/{linkType}:
    get:
      description: |
        Lists the linked objects for a specific object and the given link type.

        This endpoint supports filtering objects.
        See the [Filtering Objects documentation](/docs/foundry/api/ontology-resources/objects/object-basics/#filtering-objects) for details.

        Note that this endpoint does not guarantee consistency. Changes to the data could result in missing or
        repeated objects in the response pages.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Each page may be smaller or larger than the requested page size. However, it
        is guaranteed that if there are more results available, at least one result will be present
        in the response.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listLinkedObjects
      x-operationVerb: listLinkedObjects
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the objects. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the object from which the links originate. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object from which the links originate. To look up the expected primary key for your
          object type, use the `Get object type` endpoint or the **Ontology Manager**.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the link that exists between the object and the requested objects.
          To find the API name for your link type, check the **Ontology Manager**.
        in: path
        name: linkType
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      - description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        in: query
        name: properties
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - in: query
        name: orderBy
        required: false
        schema:
          $ref: "#/components/schemas/OrderBy"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLinkedObjectsResponse"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
                  properties:
                    id: 80060
                    firstName: Anna
                    lastName: Smith
                - rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
                  properties:
                    id: 51060
                    firstName: James
                    lastName: Matthews
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objects/{objectType}/{primaryKey}/links/{linkType}/{linkedObjectPrimaryKey}:
    get:
      description: |
        Get a specific linked object that originates from another object. If there is no link between the two objects,
        LinkedObjectNotFound is thrown.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getLinkedObject
      x-operationVerb: getLinkedObject
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: "The API name of the object from which the links originate. To find the API name, use the **List object types** endpoint or check the **Ontology Manager**."
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - description: |
          The primary key of the object from which the link originates. To look up the expected primary key for your
          object type, use the `Get object type` endpoint or the **Ontology Manager**.
        in: path
        name: primaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - description: |
          The API name of the link that exists between the object and the requested objects.
          To find the API name for your link type, check the **Ontology Manager**.
        in: path
        name: linkType
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      - description: |
          The primary key of the requested linked object. To look up the expected primary key for your object type,
          use the `Get object type` endpoint (passing the linked object type) or the **Ontology Manager**.
        in: path
        name: linkedObjectPrimaryKey
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 80060
      - description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        in: query
        name: properties
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyObject"
              example:
                rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
                properties:
                  id: 80060
                  firstName: Anna
                  lastName: Smith
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/actions/{actionType}/apply:
    post:
      description: |
        Applies an action using the given parameters. Changes to the Ontology are eventually consistent and may take
        some time to be visible.

        Note that [parameter default values](/docs/foundry/action-types/parameters-default-value/) are not currently supported by
        this endpoint.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read api:ontologies-write`.
      operationId: applyAction
      x-operationVerb: apply
      x-auditCategory: ontologyDataTransform
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        in: path
        name: actionType
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyActionRequest"
            example:
              parameters:
                id: 80060
                newName: Anna Smith-Doe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplyActionResponse"
              example: {}
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/actions/{actionType}/applyBatch:
    post:
      description: |
        Applies multiple actions (of the same Action Type) using the given parameters.
        Changes to the Ontology are eventually consistent and may take some time to be visible.

        Up to 20 actions may be applied in one call. Actions that only modify objects in Object Storage v2 and do not
        call Functions may receive a higher limit.

        Note that [parameter default values](/docs/foundry/action-types/parameters-default-value/) and
        [notifications](/docs/foundry/action-types/notifications/) are not currently supported by this endpoint.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read api:ontologies-write`.
      operationId: applyActionBatch
      x-operationVerb: applyBatch
      x-auditCategory: ontologyDataTransform
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        in: path
        name: actionType
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchApplyActionRequest"
            example:
              requests:
              - parameters:
                  id: 80060
                  newName: Anna Smith-Doe
              - parameters:
                  id: 80061
                  newName: Joe Bloggs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchApplyActionResponse"
              example: {}
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/actions/{actionType}/applyAsync:
    post:
      description: |
        Applies an action asynchronously using the given parameters. Changes to the Ontology are eventually consistent
        and may take some time to be visible.

        Note that [parameter default values](/docs/foundry/action-types/parameters-default-value/) are not currently
        supported by this endpoint.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read api:ontologies-write`.
      operationId: applyActionAsync
      x-operationVerb: applyAsync
      x-auditCategory: ontologyDataTransform
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        in: path
        name: actionType
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - description: |
          Represents a boolean value that restricts an endpoint to preview mode when set to true.
        in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AsyncApplyActionRequest"
            example:
              parameters:
                id: 80060
                newName: Anna Smith-Doe
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncActionOperation"
              example:
                data:
                - id: ri.actions.main.action.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
                  operationType: applyActionAsync
                  status: RUNNING
                  stage: RUNNING_SUBMISSION_CHECKS
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/actions/{actionType}/applyAsync/{actionRid}:
    get:
      operationId: getAsyncActionStatus
      x-operationVerb: getOperationStatus
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: PRIVATE_BETA
      security:
      - BearerAuth:
        - api:ontologies-read
        - api:ontologies-write
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        in: path
        name: actionType
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - in: path
        name: actionRid
        required: true
        schema:
          $ref: "#/components/schemas/ActionRid"
      - description: |
          Represents a boolean value that restricts an endpoint to preview mode when set to true.
        in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncActionOperation"
              example:
                id: ri.actions.main.action.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
                operationType: applyActionAsync
                status: SUCCESSFUL
                result:
                  type: success
          description: Success response
  /api/v1/ontologies/{ontologyRid}/queryTypes:
    get:
      description: |
        Lists the query types for the given Ontology.

        Each page may be smaller than the requested page size. However, it is guaranteed that if there are more
        results available, at least one result will be present in the response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: listQueryTypes
      x-operationVerb: list
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the query types. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The desired size of the page to be returned. Defaults to 100.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryTypesResponse"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - apiName: getEmployeesInCity
                  displayName: Get Employees in City
                  description: Gets all employees in a given city
                  parameters:
                    city:
                      baseType: String
                      description: The city to search for employees in
                      required: true
                  output: Array<OntologyObject<Employee>>
                  rid: ri.function-registry.main.function.f05481407-1d67-4120-83b4-e3fed5305a29b
                  version: 1.1.3-rc1
                - apiName: getAverageTenureOfEmployees
                  displayName: Get Average Tenure
                  description: Gets the average tenure of all employees
                  parameters:
                    employees:
                      baseType: String
                      description: An object set of the employees to calculate the average tenure of
                      required: true
                    useMedian:
                      baseType: Boolean
                      description: "An optional flag to use the median instead of the mean, defaults to false"
                      required: false
                  output: Double
                  rid: ri.function-registry.main.function.9549c29d3-e92f-64a1-beeb-af817819a400
                  version: 2.1.1
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/queryTypes/{queryApiName}:
    get:
      description: |
        Gets a specific query type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: getQueryType
      x-operationVerb: get
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the query type. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the query type. To find the API name, use the **List query types** endpoint or
          check the **Ontology Manager**.
        in: path
        name: queryApiName
        required: true
        schema:
          $ref: "#/components/schemas/QueryApiName"
        example: getEmployeesInCity
      - in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryType"
              example:
                apiName: getEmployeesInCity
                displayName: Get Employees in City
                description: Gets all employees in a given city
                parameters:
                  city:
                    baseType: String
                    description: The city to search for employees in
                    required: true
                output: Array<OntologyObject<Employee>>
                rid: ri.function-registry.main.function.f05481407-1d67-4120-83b4-e3fed5305a29b
                version: 1.1.3-rc1
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/queries/{queryApiName}/execute:
    post:
      description: |
        Executes a Query using the given parameters. Optional parameters do not need to be supplied.
        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: executeQuery
      x-operationVerb: execute
      x-auditCategory: ontologyDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the Query. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the Query to execute.
        in: path
        name: queryApiName
        required: true
        schema:
          $ref: "#/components/schemas/QueryApiName"
        example: getEmployeesInCity
      - in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteQueryRequest"
            example:
              parameters:
                city: New York
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecuteQueryResponse"
              example:
                value:
                - EMP546
                - EMP609
                - EMP989
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objects/{objectType}/search:
    post:
      description: |
        Search for objects in the specified ontology and object type. The request body is used
        to filter objects based on the specified query. The supported queries are:

        | Query type            | Description                                                                       | Supported Types                 |
        |----------|-----------------------------------------------------------------------------------|---------------------------------|
        | lt       | The provided property is less than the provided value.                            | number, string, date, timestamp |
        | gt       | The provided property is greater than the provided value.                         | number, string, date, timestamp |
        | lte      | The provided property is less than or equal to the provided value.                | number, string, date, timestamp |
        | gte      | The provided property is greater than or equal to the provided value.             | number, string, date, timestamp |
        | eq       | The provided property is exactly equal to the provided value.                     | number, string, date, timestamp |
        | isNull   | The provided property is (or is not) null.                                        | all                             |
        | contains | The provided property contains the provided value.                                | array                           |
        | not      | The sub-query does not match.                                                     | N/A (applied on a query)        |
        | and      | All the sub-queries match.                                                        | N/A (applied on queries)        |
        | or       | At least one of the sub-queries match.                                            | N/A (applied on queries)        |
        | prefix   | The provided property starts with the provided value.                             | string                          |
        | phrase   | The provided property contains the provided value as a substring.                 | string                          |
        | anyTerm  | The provided property contains at least one of the terms separated by whitespace. | string                          |
        | allTerms | The provided property contains all the terms separated by whitespace.             | string                          |                                                                            |

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: searchObjects
      x-operationVerb: search
      x-auditCategory: ontologyDataSearch
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: The unique Resource Identifier (RID) of the Ontology that contains the objects.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: The type of the requested objects.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchObjectsRequest"
            example:
              query:
                not:
                  field: properties.age
                  eq: 21
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchObjectsResponse"
              example:
                data:
                - properties:
                    lastName: smith
                    firstName: john
                    age: 21
                  rid: ri.phonograph2-objects.main.object.5b5dbc28-7f05-4e83-a33a-1e5b851ababb
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/actions/{actionType}/validate:
    post:
      description: |
        Validates if an action can be run with the given set of parameters.
        The response contains the evaluation of parameters and **submission criteria**
        that determine if the request is `VALID` or `INVALID`.
        For performance reasons, validations will not consider existing objects or other data in Foundry.
        For example, the uniqueness of a primary key or the existence of a user ID will not be checked.
        Note that [parameter default values](/docs/foundry/action-types/parameters-default-value/) are not currently supported by
        this endpoint. Unspecified parameters will be given a default value of `null`.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: validateAction
      x-operationVerb: validate
      x-auditCategory: ontologyLogicAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the action to validate. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        in: path
        name: actionType
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateActionRequest"
            example:
              parameters:
                id: 2
                firstName: Chuck
                lastName: Jones
                age: 17
                date: 2021-05-01
                numbers:
                - 1
                - 2
                - 3
                hasObjectSet: true
                objectSet: ri.object-set.main.object-set.39a9f4bd-f77e-45ce-9772-70f25852f623
                reference: Chuck
                percentage: 41.3
                differentObjectId: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateActionResponse"
              example:
                result: INVALID
                submissionCriteria:
                - configuredFailureMessage: First name can not match the first name of the referenced object.
                  result: INVALID
                parameters:
                  age:
                    result: INVALID
                    evaluatedConstraints:
                    - type: range
                      gte: 18
                    required: true
                  id:
                    result: VALID
                    evaluatedConstraints: []
                    required: true
                  date:
                    result: VALID
                    evaluatedConstraints: []
                    required: true
                  lastName:
                    result: VALID
                    evaluatedConstraints:
                    - type: oneOf
                      options:
                      - displayName: Doe
                        value: Doe
                      - displayName: Smith
                        value: Smith
                      - displayName: Adams
                        value: Adams
                      - displayName: Jones
                        value: Jones
                      otherValuesAllowed: true
                    required: true
                  numbers:
                    result: VALID
                    evaluatedConstraints:
                    - type: arraySize
                      lte: 4
                      gte: 2
                    required: true
                  differentObjectId:
                    result: VALID
                    evaluatedConstraints:
                    - type: objectPropertyValue
                    required: false
                  firstName:
                    result: VALID
                    evaluatedConstraints: []
                    required: true
                  reference:
                    result: VALID
                    evaluatedConstraints:
                    - type: objectQueryResult
                    required: false
                  percentage:
                    result: VALID
                    evaluatedConstraints:
                    - type: range
                      lt: 100
                      gte: 0
                    required: true
                  objectSet:
                    result: VALID
                    evaluatedConstraints: []
                    required: true
                  attachment:
                    result: VALID
                    evaluatedConstraints: []
                    required: false
                  hasObjectSet:
                    result: VALID
                    evaluatedConstraints: []
                    required: false
                  multipleAttachments:
                    result: VALID
                    evaluatedConstraints:
                    - type: arraySize
                      gte: 0
                    required: false
          description: Success response.
  /api/v1/attachments/upload:
    post:
      description: |
        Upload an attachment to use in an action. Any attachment which has not been linked to an object via
        an action within one hour after upload will be removed.
        Previously mapped attachments which are not connected to any object anymore are also removed on
        a biweekly basis.
        The body of the request must contain the binary content of the file and the `Content-Type` header must be `application/octet-stream`.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-write`.
      operationId: uploadAttachment
      x-operationVerb: upload
      x-auditCategory: dataCreate
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: The size in bytes of the file content being uploaded.
        in: header
        name: Content-Length
        required: true
        schema:
          $ref: "#/components/schemas/ContentLength"
      - description: The media type of the file being uploaded.
        in: header
        name: Content-Type
        required: true
        schema:
          $ref: "#/components/schemas/ContentType"
      - description: The name of the file being uploaded.
        in: query
        name: filename
        required: true
        schema:
          $ref: "#/components/schemas/Filename"
        example: My Image.jpeg
      requestBody:
        content:
          '*/*':
            schema:
              format: binary
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
              example:
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                filename: My Image.jpeg
                sizeBytes: 393469
                mediaType: image/jpeg
          description: Success response.
  /api/v1/attachments/{attachmentRid}/content:
    get:
      description: |
        Get the content of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getAttachmentContent
      x-operationVerb: read
      x-auditCategory: dataExport
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: The RID of the attachment.
        in: path
        name: attachmentRid
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: Success response.
  /api/v1/attachments/{attachmentRid}:
    get:
      description: |
        Get the metadata of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getAttachment
      x-operationVerb: get
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: The RID of the attachment.
        in: path
        name: attachmentRid
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
              example:
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                filename: My Image.jpeg
                sizeBytes: 393469
                mediaType: image/jpeg
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objects/{objectType}/aggregate:
    post:
      description: |
        Perform functions on object fields in the specified ontology and object type.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
      operationId: aggregateObjects
      x-operationVerb: aggregate
      x-auditCategory: ontologyDataSearch
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: The unique Resource Identifier (RID) of the Ontology that contains the objects.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: The type of the object to aggregate on.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AggregateObjectsRequest"
            example:
              aggregation:
              - type: min
                field: properties.tenure
                name: min_tenure
              - type: avg
                field: properties.tenure
                name: avg_tenure
              query:
                not:
                  field: properties.name
                  eq: john
              groupBy:
              - field: properties.startDate
                type: range
                ranges:
                - gte: 2020-01-01
                  lt: 2020-06-01
              - field: properties.city
                type: exact
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregateObjectsResponse"
              example:
                data:
                - metrics:
                  - name: min_tenure
                    value: 1
                  - name: avg_tenure
                    value: 3
                  group:
                    properties.startDate:
                      gte: 2020-01-01
                      lt: 2020-06-01
                    properties.city: New York City
                - metrics:
                  - name: min_tenure
                    value: 2
                  - name: avg_tenure
                    value: 3
                  group:
                    properties.startDate:
                      gte: 2020-01-01
                      lt: 2020-06-01
                    properties.city: San Francisco
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objectTypes/{objectType}/outgoingLinkTypes:
    get:
      description: |
        List the outgoing links for an object type.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: listOutgoingLinkTypes
      x-operationVerb: listOutgoingLinkTypes
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager** application.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager** application.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: Flight
      - description: The desired size of the page to be returned.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOutgoingLinkTypesResponse"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - apiName: originAirport
                  objectTypeApiName: Airport
                  cardinality: ONE
                  foreignKeyPropertyApiName: originAirportId
          description: Success response.
  /api/v1/ontologies/{ontologyRid}/objectTypes/{objectType}/outgoingLinkTypes/{linkType}:
    get:
      description: |
        Get an outgoing link for an object type.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:ontologies-read`.
      operationId: getOutgoingLinkType
      x-operationVerb: getOutgoingLinkType
      x-auditCategory: ontologyMetaDataLoad
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager** application.
        in: path
        name: ontologyRid
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager** application.
        in: path
        name: objectType
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: Employee
      - description: |
          The API name of the outgoing link.
          To find the API name for your link type, check the **Ontology Manager**.
        in: path
        name: linkType
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkTypeSide"
              example:
                apiName: directReport
                objectTypeApiName: Employee
                cardinality: MANY
          description: Success response.
  /api/v1/datasets:
    post:
      description: |
        Creates a new Dataset. A default branch - `master` for most enrollments - will be created on the Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: createDataset
      x-operationVerb: create
      x-auditCategory: metaDataCreate
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDatasetRequest"
            example:
              name: My Dataset
              parentFolderRid: ri.foundry.main.folder.bfe58487-4c56-4c58-aba7-25defd6163c4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
              example:
                rid: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
                path: /Empyrean Airlines/My Important Project/My Dataset
          description: ""
  /api/v1/datasets/{datasetRid}:
    get:
      description: |
        Gets the Dataset with the given DatasetRid.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: getDataset
      x-operationVerb: get
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-read
      - BearerAuth: []
      parameters:
      - in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
              example:
                rid: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
                name: My Dataset
                parentFolderRid: ri.foundry.main.folder.bfe58487-4c56-4c58-aba7-25defd6163c4
          description: ""
  /api/v1/datasets/{datasetRid}/readTable:
    get:
      description: |
        Gets the content of a dataset as a table in the specified format.

        This endpoint currently does not support views (Virtual datasets composed of other datasets).

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: readTable
      x-operationVerb: read
      x-auditCategory: dataExport
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-read
      - BearerAuth: []
      parameters:
      - description: |
          The RID of the Dataset.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - description: The identifier (name) of the Branch.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - description: The Resource Identifier (RID) of the start Transaction.
        in: query
        name: startTransactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - description: The Resource Identifier (RID) of the end Transaction.
        in: query
        name: endTransactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - description: |
          The export format. Must be `ARROW` or `CSV`.
        in: query
        name: format
        required: true
        schema:
          $ref: "#/components/schemas/TableExportFormat"
        example: CSV
      - description: |
          A subset of the dataset columns to include in the result. Defaults to all columns.
        in: query
        name: columns
        required: false
        schema:
          type: array
          items:
            type: string
            x-safety: unsafe
      - description: |
          A limit on the number of rows to return. Note that row ordering is non-deterministic.
        in: query
        name: rowLimit
        required: false
        schema:
          type: integer
          x-safety: unsafe
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: The content stream.
  /api/v1/datasets/{datasetRid}/branches:
    post:
      description: |
        Creates a branch on an existing dataset. A branch may optionally point to a (committed) transaction.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: createBranch
      x-operationVerb: create
      x-auditCategory: metaDataCreate
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset on which to create the Branch.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBranchRequest"
            example:
              branchId: my-branch
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branch"
              example:
                branchId: my-branch
          description: ""
    get:
      description: |
        Lists the Branches of a Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: listBranches
      x-operationVerb: list
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-read
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset on which to list Branches.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBranchesResponse"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - branchId: master
                  transactionRid: ri.foundry.main.transaction.0a0207cb-26b7-415b-bc80-66a3aa3933f4
                - branchId: test-v2
                  transactionRid: ri.foundry.main.transaction.fc9feb4b-34e4-4bfd-9e4f-b6425fbea85f
                - branchId: my-branch
          description: ""
  /api/v1/datasets/{datasetRid}/branches/{branchId}:
    get:
      description: |
        Get a Branch of a Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: getBranch
      x-operationVerb: get
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-read
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset that contains the Branch.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - description: The identifier (name) of the Branch.
        in: path
        name: branchId
        required: true
        schema:
          $ref: "#/components/schemas/BranchId"
        example: master
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branch"
              example:
                branchId: master
                transactionRid: ri.foundry.main.transaction.0a0207cb-26b7-415b-bc80-66a3aa3933f4
          description: ""
    delete:
      description: |
        Deletes the Branch with the given BranchId.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: deleteBranch
      x-operationVerb: delete
      x-auditCategory: metaDataDelete
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset that contains the Branch.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - description: The identifier (name) of the Branch.
        in: path
        name: branchId
        required: true
        schema:
          $ref: "#/components/schemas/BranchId"
        example: my-branch
      responses:
        "204":
          description: Branch deleted.
  /api/v1/datasets/{datasetRid}/transactions:
    post:
      description: |
        Creates a Transaction on a Branch of a Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: createTransaction
      x-operationVerb: create
      x-auditCategory: metaDataCreate
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset on which to create the Transaction.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - description: |
          The identifier (name) of the Branch on which to create the Transaction. Defaults to `master` for most enrollments.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
            example:
              transactionType: SNAPSHOT
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
              example:
                rid: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
                transactionType: SNAPSHOT
                status: OPEN
                createdTime: 2022-10-10T12:23:11.152Z
          description: ""
  /api/v1/datasets/{datasetRid}/transactions/{transactionRid}:
    get:
      description: |
        Gets a Transaction of a Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: getTransaction
      x-operationVerb: get
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-read
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset that contains the Transaction.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - description: The Resource Identifier (RID) of the Transaction.
        in: path
        name: transactionRid
        required: true
        schema:
          $ref: "#/components/schemas/TransactionRid"
        example: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
              example:
                rid: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
                transactionType: SNAPSHOT
                status: OPEN
                createdTime: 2022-10-10T12:20:15.166Z
          description: ""
  /api/v1/datasets/{datasetRid}/transactions/{transactionRid}/commit:
    post:
      description: |
        Commits an open Transaction. File modifications made on this Transaction are preserved and the Branch is
        updated to point to the Transaction.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: commitTransaction
      x-operationVerb: commit
      x-auditCategory: metaDataUpdate
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset that contains the Transaction.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - description: The Resource Identifier (RID) of the Transaction.
        in: path
        name: transactionRid
        required: true
        schema:
          $ref: "#/components/schemas/TransactionRid"
        example: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
              example:
                rid: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
                transactionType: SNAPSHOT
                status: COMMITTED
                createdTime: 2022-10-10T12:20:15.166Z
                closedTime: 2022-10-10T12:23:11.152Z
          description: ""
  /api/v1/datasets/{datasetRid}/transactions/{transactionRid}/abort:
    post:
      description: |
        Aborts an open Transaction. File modifications made on this Transaction are not preserved and the Branch is
        not updated.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: abortTransaction
      x-operationVerb: abort
      x-auditCategory: metaDataUpdate
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset that contains the Transaction.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - description: The Resource Identifier (RID) of the Transaction.
        in: path
        name: transactionRid
        required: true
        schema:
          $ref: "#/components/schemas/TransactionRid"
        example: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
              example:
                rid: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
                transactionType: SNAPSHOT
                status: ABORTED
                createdTime: 2022-10-10T12:20:15.166Z
                closedTime: 2022-10-10T12:23:11.152Z
          description: ""
  /api/v1/datasets/{datasetRid}/files:
    get:
      description: "Lists Files contained in a Dataset. By default files are listed on the latest view of the default \nbranch - `master` for most enrollments.\n\n#### Advanced Usage\n\nSee [Datasets Core Concepts](/docs/foundry/data-integration/datasets/) for details on using branches and transactions.\n\nTo **list files on a specific Branch** specify the Branch's identifier as `branchId`. This will include the most\nrecent version of all files since the latest snapshot transaction, or the earliest ancestor transaction of the \nbranch if there are no snapshot transactions.\n\nTo **list files on the resolved view of a transaction** specify the Transaction's resource identifier\nas `endTransactionRid`. This will include the most recent version of all files since the latest snapshot\ntransaction, or the earliest ancestor transaction if there are no snapshot transactions.\n\nTo **list files on the resolved view of a range of transactions** specify the the start transaction's resource\nidentifier as `startTransactionRid` and the end transaction's resource identifier as `endTransactionRid`. This\nwill include the most recent version of all files since the `startTransactionRid` up to the `endTransactionRid`.\nNote that an intermediate snapshot transaction will remove all files from the view. Behavior is undefined when \nthe start and end transactions do not belong to the same root-to-leaf path.\n\nTo **list files on a specific transaction** specify the Transaction's resource identifier as both the \n`startTransactionRid` and `endTransactionRid`. This will include only files that were modified as part of that\nTransaction.\n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.\n"
      operationId: listFiles
      x-operationVerb: list
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-read
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset on which to list Files.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - description: The identifier (name) of the Branch on which to list Files. Defaults to `master` for most enrollments.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - description: The Resource Identifier (RID) of the start Transaction.
        in: query
        name: startTransactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - description: The Resource Identifier (RID) of the end Transaction.
        in: query
        name: endTransactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        in: query
        name: pageSize
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - in: query
        name: pageToken
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListFilesResponse"
              example:
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
                data:
                - path: q3-data/my-file.csv
                  transactionRid: ri.foundry.main.transaction.bf9515c2-02d4-4703-8f84-c3b3c190254d
                  sizeBytes: 74930
                  updatedTime: 2022-10-10T16:44:55.192Z
                - path: q2-data/my-file.csv
                  transactionRid: ri.foundry.main.transaction.d8db1cfc-9f8b-4bad-9d8c-00bd818a37c5
                  sizeBytes: 47819
                  updatedTime: 2022-07-12T10:12:50.919Z
                - path: q2-data/my-other-file.csv
                  transactionRid: ri.foundry.main.transaction.d8db1cfc-9f8b-4bad-9d8c-00bd818a37c5
                  sizeBytes: 55320
                  updatedTime: 2022-07-12T10:12:46.112Z
          description: ""
  /api/v1/datasets/{datasetRid}/files:upload:
    post:
      description: "Uploads a File to an existing Dataset.\nThe body of the request must contain the binary content of the file and the `Content-Type` header must be `application/octet-stream`.\n\nBy default the file is uploaded to a new transaction on the default branch - `master` for most enrollments.\nIf the file already exists only the most recent version will be visible in the updated view.\n\n#### Advanced Usage\n\nSee [Datasets Core Concepts](/docs/foundry/data-integration/datasets/) for details on using branches and transactions. \n\nTo **upload a file to a specific Branch** specify the Branch's identifier as `branchId`. A new transaction will \nbe created and committed on this branch. By default the TransactionType will be `UPDATE`, to override this\ndefault specify `transactionType` in addition to `branchId`. \nSee [createBranch](/docs/foundry/api/datasets-resources/branches/create-branch/) to create a custom branch.\n\nTo **upload a file on a manually opened transaction** specify the Transaction's resource identifier as\n`transactionRid`. This is useful for uploading multiple files in a single transaction. \nSee [createTransaction](/docs/foundry/api/datasets-resources/transactions/create-transaction/) to open a transaction.\n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.\n"
      operationId: uploadFile
      x-operationVerb: upload
      x-auditCategory: dataCreate
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset on which to upload the File.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - description: The File's path within the Dataset.
        in: query
        name: filePath
        required: true
        schema:
          $ref: "#/components/schemas/FilePath"
        example: q3-data%2fmy-file.csv
      - description: The identifier (name) of the Branch on which to upload the File. Defaults to `master` for most enrollments.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - description: The type of the Transaction to create when using branchId. Defaults to `UPDATE`.
        in: query
        name: transactionType
        required: false
        schema:
          $ref: "#/components/schemas/TransactionType"
      - description: The Resource Identifier (RID) of the open Transaction on which to upload the File.
        in: query
        name: transactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      requestBody:
        content:
          '*/*':
            schema:
              format: binary
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              example:
                path: q3-data/my-file.csv
                transactionRid: ri.foundry.main.transaction.bf9515c2-02d4-4703-8f84-c3b3c190254d
                sizeBytes: 74930
                updatedTime: 2022-10-10T16:44:55.192Z
          description: ""
  /api/v1/datasets/{datasetRid}/files/{filePath}:
    get:
      description: "Gets metadata about a File contained in a Dataset. By default this retrieves the file's metadata from the latest\nview of the default branch - `master` for most enrollments.\n\n#### Advanced Usage\n\nSee [Datasets Core Concepts](/docs/foundry/data-integration/datasets/) for details on using branches and transactions. \n\nTo **get a file's metadata from a specific Branch** specify the Branch's identifier as `branchId`. This will \nretrieve metadata for the most recent version of the file since the latest snapshot transaction, or the earliest\nancestor transaction of the branch if there are no snapshot transactions.\n\nTo **get a file's metadata from the resolved view of a transaction** specify the Transaction's resource identifier\nas `endTransactionRid`. This will retrieve metadata for the most recent version of the file since the latest snapshot\ntransaction, or the earliest ancestor transaction if there are no snapshot transactions.\n\nTo **get a file's metadata from the resolved view of a range of transactions** specify the the start transaction's\nresource identifier as `startTransactionRid` and the end transaction's resource identifier as `endTransactionRid`.\nThis will retrieve metadata for the most recent version of the file since the `startTransactionRid` up to the \n`endTransactionRid`. Behavior is undefined when the start and end transactions do not belong to the same root-to-leaf path.\n\nTo **get a file's metadata from a specific transaction** specify the Transaction's resource identifier as both the \n`startTransactionRid` and `endTransactionRid`.\n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.\n"
      operationId: getFileMetadata
      x-operationVerb: get
      x-auditCategory: metaDataAccess
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-read
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset that contains the File.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - description: The File's path within the Dataset.
        in: path
        name: filePath
        required: true
        schema:
          $ref: "#/components/schemas/FilePath"
        example: q3-data%2fmy-file.csv
      - description: The identifier (name) of the Branch that contains the File. Defaults to `master` for most enrollments.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - description: The Resource Identifier (RID) of the start Transaction.
        in: query
        name: startTransactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - description: The Resource Identifier (RID) of the end Transaction.
        in: query
        name: endTransactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              example:
                path: q3-data/my-file.csv
                transactionRid: ri.foundry.main.transaction.bf9515c2-02d4-4703-8f84-c3b3c190254d
                sizeBytes: 74930
                updatedTime: 2022-10-10T16:44:55.192Z
          description: ""
    delete:
      description: "Deletes a File from a Dataset. By default the file is deleted in a new transaction on the default \nbranch - `master` for most enrollments. The file will still be visible on historical views.\n\n#### Advanced Usage\n             \nSee [Datasets Core Concepts](/docs/foundry/data-integration/datasets/) for details on using branches and transactions.\n\nTo **delete a File from a specific Branch** specify the Branch's identifier as `branchId`. A new delete Transaction \nwill be created and committed on this branch.\n\nTo **delete a File using a manually opened Transaction**, specify the Transaction's resource identifier \nas `transactionRid`. The transaction must be of type `DELETE`. This is useful for deleting multiple files in a\nsingle transaction. See [createTransaction](/docs/foundry/api/datasets-resources/transactions/create-transaction/) to \nopen a transaction.\n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.\n"
      operationId: deleteFile
      x-operationVerb: delete
      x-auditCategory: dataDelete
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset on which to delete the File.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - description: The File path within the Dataset.
        in: path
        name: filePath
        required: true
        schema:
          $ref: "#/components/schemas/FilePath"
        example: q3-data%2fmy-file.csv
      - description: The identifier (name) of the Branch on which to delete the File. Defaults to `master` for most enrollments.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - description: The Resource Identifier (RID) of the open delete Transaction on which to delete the File.
        in: query
        name: transactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      responses:
        "204":
          description: File deleted.
  /api/v1/datasets/{datasetRid}/files/{filePath}/content:
    get:
      description: "Gets the content of a File contained in a Dataset. By default this retrieves the file's content from the latest\nview of the default branch - `master` for most enrollments.\n\n#### Advanced Usage\n\nSee [Datasets Core Concepts](/docs/foundry/data-integration/datasets/) for details on using branches and transactions. \n\nTo **get a file's content from a specific Branch** specify the Branch's identifier as `branchId`. This will \nretrieve the content for the most recent version of the file since the latest snapshot transaction, or the\nearliest ancestor transaction of the branch if there are no snapshot transactions.\n\nTo **get a file's content from the resolved view of a transaction** specify the Transaction's resource identifier\nas `endTransactionRid`. This will retrieve the content for the most recent version of the file since the latest\nsnapshot transaction, or the earliest ancestor transaction if there are no snapshot transactions.\n\nTo **get a file's content from the resolved view of a range of transactions** specify the the start transaction's\nresource identifier as `startTransactionRid` and the end transaction's resource identifier as `endTransactionRid`.\nThis will retrieve the content for the most recent version of the file since the `startTransactionRid` up to the \n`endTransactionRid`. Note that an intermediate snapshot transaction will remove all files from the view. Behavior\nis undefined when the start and end transactions do not belong to the same root-to-leaf path.\n\nTo **get a file's content from a specific transaction** specify the Transaction's resource identifier as both the \n`startTransactionRid` and `endTransactionRid`.\n\nThird-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.\n"
      operationId: getFileContent
      x-operationVerb: read
      x-auditCategory: dataExport
      x-releaseStage: STABLE
      security:
      - OAuth2:
        - api:datasets-read
      - BearerAuth: []
      parameters:
      - description: The Resource Identifier (RID) of the Dataset that contains the File.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - description: The File's path within the Dataset.
        in: path
        name: filePath
        required: true
        schema:
          $ref: "#/components/schemas/FilePath"
        example: q3-data%2fmy-file.csv
      - description: The identifier (name) of the Branch that contains the File. Defaults to `master` for most enrollments.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - description: The Resource Identifier (RID) of the start Transaction.
        in: query
        name: startTransactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - description: The Resource Identifier (RID) of the end Transaction.
        in: query
        name: endTransactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: ""
  /api/v1/datasets/{datasetRid}/schema:
    put:
      description: |
        Puts a Schema on an existing Dataset and Branch.
      operationId: putSchema
      x-operationVerb: replaceSchema
      x-auditCategory: metaDataUpdate
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      parameters:
      - description: |
          The RID of the Dataset on which to put the Schema.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - description: |
          The ID of the Branch on which to put the Schema.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-type:
                type: external
                java: com.palantir.foundry.schemas.api.types.FoundrySchema
      responses:
        "204":
          description: ""
    get:
      description: |
        Retrieves the Schema for a Dataset and Branch, if it exists.
      operationId: getSchema
      x-operationVerb: getSchema
      x-auditCategory: metaDataAccess
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:datasets-read
      - BearerAuth: []
      parameters:
      - description: |
          The RID of the Dataset.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - description: |
          The ID of the Branch.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - description: |
          The TransactionRid that contains the Schema.
        in: query
        name: transactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-type:
                  type: external
                  java: com.palantir.foundry.schemas.api.types.FoundrySchema
          description: ""
        "204":
          description: no schema
    delete:
      description: |
        Deletes the Schema from a Dataset and Branch.
      operationId: deleteSchema
      x-operationVerb: deleteSchema
      x-auditCategory: metaDataDelete
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:datasets-write
      - BearerAuth: []
      parameters:
      - description: |
          The RID of the Dataset on which to delete the schema.
        in: path
        name: datasetRid
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - description: |
          The ID of the Branch on which to delete the schema.
        in: query
        name: branchId
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - description: |
          The RID of the Transaction on which to delete the schema.
        in: query
        name: transactionRid
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - in: query
        name: preview
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "204":
          description: Schema deleted.
  /api/v1/models/languageModels/{modelName}/chatCompletions:
    post:
      description: |
        Creates a chat completion for a prompt.
      operationId: createChatCompletion
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the model to use for the completion.
        in: path
        name: modelName
        required: true
        schema:
          $ref: "#/components/schemas/LanguageModelApiName"
        example: gpt_v4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCompletionRequest"
            example:
              messages:
              - role: USER
                content: Hello.
              parameters:
                temperature: 0.8
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatCompletionResponse"
              example:
                choices:
                - message:
                    role: ASSISTANT
                    content: Hello.
          description: Success response.
  /api/v1/models/languageModels/{modelName}/chatCompletions/stream:
    post:
      description: |
        Runs the same query as create chat completion, but streams the raw response as a string of UTF8 encoded bytes.
          Note: This endpoint returns only the string response.
      operationId: streamChatCompletion
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
        - api:ontologies-write
      - BearerAuth: []
      parameters:
      - description: |
          The API name of the model to use for the completion.
        in: path
        name: modelName
        required: true
        schema:
          $ref: "#/components/schemas/LanguageModelApiName"
        example: gpt_v4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCompletionRequest"
            example:
              messages:
              - role: USER
                content: Hello.
              parameters:
                temperature: 0.8
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
              example: Hello.
          description: Success response.
  /api/v1/models/languageModels:
    get:
      description: |
        Lists the language models available. Can be filtered by source.
      operationId: listLanguageModels
      x-operationVerb: list
      x-releaseStage: PRIVATE_BETA
      security:
      - OAuth2:
        - api:ontologies-read
      - BearerAuth: []
      parameters:
      - name: source
        in: query
        description: language model source
        schema:
          $ref: "#/components/schemas/LanguageModelSource"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLanguageModelsResponse"
              example:
                data:
                - apiName: gpt_v4
                  source: global
                - apiName: my_gpt
                  source: hosted
          description: Success response.
