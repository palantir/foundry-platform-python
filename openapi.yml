openapi: 3.0.1
info:
  title: Palantir OpenAPI
  description: The Palantir REST API. Please see https://www.palantir.com/docs for
    more details.
  version: 1.878.0
externalDocs:
  description: API Documentation
  url: https://www.palantir.com/docs
paths:
  /v1/attachments/upload:
    post:
      tags:
      - OntologiesApiService
      description: |
        Upload an attachment to use in an action. Any attachment which has not been linked to an object via
        an action within one hour after upload will be removed.
        Previously mapped attachments which are not connected to any object anymore are also removed on
        a biweekly basis.
        The body of the request must contain the binary content of the file and the `Content-Type` header must be `application/octet-stream`.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:write-data`.
      operationId: uploadAttachment
      parameters:
      - name: Content-Length
        in: header
        description: The size in bytes of the file content being uploaded.
        required: true
        schema:
          $ref: "#/components/schemas/ContentLength"
      - name: Content-Type
        in: header
        description: The media type of the file being uploaded.
        required: true
        schema:
          $ref: "#/components/schemas/ContentType"
      - name: filename
        in: query
        description: The name of the file being uploaded.
        required: true
        schema:
          $ref: "#/components/schemas/Filename"
        example: My Image.jpeg
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
              example:
                filename: My Image.jpeg
                mediaType: image/jpeg
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                sizeBytes: 393469
      security:
      - BearerAuth: []
  /v1/attachments/{attachmentRid}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Get the metadata of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getAttachment
      parameters:
      - name: attachmentRid
        in: path
        description: The RID of the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
              example:
                filename: My Image.jpeg
                mediaType: image/jpeg
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                sizeBytes: 393469
      security:
      - BearerAuth: []
  /v1/attachments/{attachmentRid}/content:
    get:
      tags:
      - OntologiesApiService
      description: |
        Get the content of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getAttachmentContent
      parameters:
      - name: attachmentRid
        in: path
        description: The RID of the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      responses:
        "200":
          description: Success response.
          content:
            '*/*':
              schema:
                type: string
                format: binary
      security:
      - BearerAuth: []
  /v1/datasets:
    post:
      tags:
      - DatasetsApiService
      description: |
        Creates a new Dataset. A default branch - `master` for most enrollments - will be created on the Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: createDataset
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDatasetRequest"
            example:
              name: My Dataset
              parentFolderRid: ri.foundry.main.folder.bfe58487-4c56-4c58-aba7-25defd6163c4
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
              example:
                path: /Empyrean Airlines/My Important Project/My Dataset
                rid: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}:
    get:
      tags:
      - DatasetsApiService
      description: |
        Gets the Dataset with the given DatasetRid.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: getDataset
      parameters:
      - name: datasetRid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
              example:
                name: My Dataset
                parentFolderRid: ri.foundry.main.folder.bfe58487-4c56-4c58-aba7-25defd6163c4
                rid: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/branches:
    get:
      tags:
      - DatasetsApiService
      description: |
        Lists the Branches of a Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: listBranches
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset on which to list
          Branches.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBranchesResponse"
              example:
                data:
                - branchId: master
                  transactionRid: ri.foundry.main.transaction.0a0207cb-26b7-415b-bc80-66a3aa3933f4
                - branchId: test-v2
                  transactionRid: ri.foundry.main.transaction.fc9feb4b-34e4-4bfd-9e4f-b6425fbea85f
                - branchId: my-branch
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
    post:
      tags:
      - DatasetsApiService
      description: |
        Creates a branch on an existing dataset. A branch may optionally point to a (committed) transaction.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: createBranch
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset on which to create
          the Branch.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBranchRequest"
            example:
              branchId: my-branch
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branch"
              example:
                branchId: my-branch
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/branches/{branchId}:
    get:
      tags:
      - DatasetsApiService
      description: |
        Get a Branch of a Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: getBranch
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset that contains the
          Branch.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - name: branchId
        in: path
        description: The identifier (name) of the Branch.
        required: true
        schema:
          $ref: "#/components/schemas/BranchId"
        example: master
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branch"
              example:
                branchId: master
                transactionRid: ri.foundry.main.transaction.0a0207cb-26b7-415b-bc80-66a3aa3933f4
      security:
      - BearerAuth: []
    delete:
      tags:
      - DatasetsApiService
      description: |
        Deletes the Branch with the given BranchId.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: deleteBranch
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset that contains the
          Branch.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - name: branchId
        in: path
        description: The identifier (name) of the Branch.
        required: true
        schema:
          $ref: "#/components/schemas/BranchId"
        example: my-branch
      responses:
        "204":
          description: Branch deleted.
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/files:
    get:
      tags:
      - DatasetsApiService
      description: "Lists Files contained in a Dataset. By default files are listed\
        \ on the latest view of the default \nbranch - `master` for most enrollments.\n\
        \n#### Advanced Usage\n\nSee [Datasets Core Concepts](/docs/foundry/data-integration/datasets/)\
        \ for details on using branches and transactions.\n\nTo **list files on a\
        \ specific Branch** specify the Branch's identifier as `branchId`. This will\
        \ include the most\nrecent version of all files since the latest snapshot\
        \ transaction, or the earliest ancestor transaction of the \nbranch if there\
        \ are no snapshot transactions.\n\nTo **list files on the resolved view of\
        \ a transaction** specify the Transaction's resource identifier\nas `endTransactionRid`.\
        \ This will include the most recent version of all files since the latest\
        \ snapshot\ntransaction, or the earliest ancestor transaction if there are\
        \ no snapshot transactions.\n\nTo **list files on the resolved view of a range\
        \ of transactions** specify the the start transaction's resource\nidentifier\
        \ as `startTransactionRid` and the end transaction's resource identifier as\
        \ `endTransactionRid`. This\nwill include the most recent version of all files\
        \ since the `startTransactionRid` up to the `endTransactionRid`.\nNote that\
        \ an intermediate snapshot transaction will remove all files from the view.\
        \ Behavior is undefined when \nthe start and end transactions do not belong\
        \ to the same root-to-leaf path.\n\nTo **list files on a specific transaction**\
        \ specify the Transaction's resource identifier as both the \n`startTransactionRid`\
        \ and `endTransactionRid`. This will include only files that were modified\
        \ as part of that\nTransaction.\n\nThird-party applications using this endpoint\
        \ via OAuth2 must request the following operation scope: `api:datasets-read`.\n"
      operationId: listFiles
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset on which to list
          Files.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - name: branchId
        in: query
        description: The identifier (name) of the Branch on which to list Files. Defaults
          to `master` for most enrollments.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - name: startTransactionRid
        in: query
        description: The Resource Identifier (RID) of the start Transaction.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - name: endTransactionRid
        in: query
        description: The Resource Identifier (RID) of the end Transaction.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListFilesResponse"
              example:
                data:
                - path: q3-data/my-file.csv
                  sizeBytes: "74930"
                  transactionRid: ri.foundry.main.transaction.bf9515c2-02d4-4703-8f84-c3b3c190254d
                  updatedTime: 2022-10-10T16:44:55.192Z
                - path: q2-data/my-file.csv
                  sizeBytes: "47819"
                  transactionRid: ri.foundry.main.transaction.d8db1cfc-9f8b-4bad-9d8c-00bd818a37c5
                  updatedTime: 2022-07-12T10:12:50.919Z
                - path: q2-data/my-other-file.csv
                  sizeBytes: "55320"
                  transactionRid: ri.foundry.main.transaction.d8db1cfc-9f8b-4bad-9d8c-00bd818a37c5
                  updatedTime: 2022-07-12T10:12:46.112Z
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/files/{filePath}:
    get:
      tags:
      - DatasetsApiService
      description: "Gets metadata about a File contained in a Dataset. By default\
        \ this retrieves the file's metadata from the latest\nview of the default\
        \ branch - `master` for most enrollments.\n\n#### Advanced Usage\n\nSee [Datasets\
        \ Core Concepts](/docs/foundry/data-integration/datasets/) for details on\
        \ using branches and transactions. \n\nTo **get a file's metadata from a specific\
        \ Branch** specify the Branch's identifier as `branchId`. This will \nretrieve\
        \ metadata for the most recent version of the file since the latest snapshot\
        \ transaction, or the earliest\nancestor transaction of the branch if there\
        \ are no snapshot transactions.\n\nTo **get a file's metadata from the resolved\
        \ view of a transaction** specify the Transaction's resource identifier\n\
        as `endTransactionRid`. This will retrieve metadata for the most recent version\
        \ of the file since the latest snapshot\ntransaction, or the earliest ancestor\
        \ transaction if there are no snapshot transactions.\n\nTo **get a file's\
        \ metadata from the resolved view of a range of transactions** specify the\
        \ the start transaction's\nresource identifier as `startTransactionRid` and\
        \ the end transaction's resource identifier as `endTransactionRid`.\nThis\
        \ will retrieve metadata for the most recent version of the file since the\
        \ `startTransactionRid` up to the \n`endTransactionRid`. Behavior is undefined\
        \ when the start and end transactions do not belong to the same root-to-leaf\
        \ path.\n\nTo **get a file's metadata from a specific transaction** specify\
        \ the Transaction's resource identifier as both the \n`startTransactionRid`\
        \ and `endTransactionRid`.\n\nThird-party applications using this endpoint\
        \ via OAuth2 must request the following operation scope: `api:datasets-read`.\n"
      operationId: getFileMetadata
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset that contains the
          File.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - name: filePath
        in: path
        description: The File's path within the Dataset.
        required: true
        schema:
          $ref: "#/components/schemas/FilePath"
        example: q3-data%2fmy-file.csv
      - name: branchId
        in: query
        description: The identifier (name) of the Branch that contains the File. Defaults
          to `master` for most enrollments.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - name: startTransactionRid
        in: query
        description: The Resource Identifier (RID) of the start Transaction.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - name: endTransactionRid
        in: query
        description: The Resource Identifier (RID) of the end Transaction.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              example:
                path: q3-data/my-file.csv
                sizeBytes: "74930"
                transactionRid: ri.foundry.main.transaction.bf9515c2-02d4-4703-8f84-c3b3c190254d
                updatedTime: 2022-10-10T16:44:55.192Z
      security:
      - BearerAuth: []
    delete:
      tags:
      - DatasetsApiService
      description: "Deletes a File from a Dataset. By default the file is deleted\
        \ in a new transaction on the default \nbranch - `master` for most enrollments.\
        \ The file will still be visible on historical views.\n\n#### Advanced Usage\n\
        \             \nSee [Datasets Core Concepts](/docs/foundry/data-integration/datasets/)\
        \ for details on using branches and transactions.\n\nTo **delete a File from\
        \ a specific Branch** specify the Branch's identifier as `branchId`. A new\
        \ delete Transaction \nwill be created and committed on this branch.\n\nTo\
        \ **delete a File using a manually opened Transaction**, specify the Transaction's\
        \ resource identifier \nas `transactionRid`. The transaction must be of type\
        \ `DELETE`. This is useful for deleting multiple files in a\nsingle transaction.\
        \ See [createTransaction](/docs/foundry/api/datasets-resources/transactions/create-transaction/)\
        \ to \nopen a transaction.\n\nThird-party applications using this endpoint\
        \ via OAuth2 must request the following operation scope: `api:datasets-write`.\n"
      operationId: deleteFile
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset on which to delete
          the File.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - name: filePath
        in: path
        description: The File path within the Dataset.
        required: true
        schema:
          $ref: "#/components/schemas/FilePath"
        example: q3-data%2fmy-file.csv
      - name: branchId
        in: query
        description: The identifier (name) of the Branch on which to delete the File.
          Defaults to `master` for most enrollments.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - name: transactionRid
        in: query
        description: The Resource Identifier (RID) of the open delete Transaction
          on which to delete the File.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      responses:
        "204":
          description: File deleted.
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/files/{filePath}/content:
    get:
      tags:
      - DatasetsApiService
      description: "Gets the content of a File contained in a Dataset. By default\
        \ this retrieves the file's content from the latest\nview of the default branch\
        \ - `master` for most enrollments.\n\n#### Advanced Usage\n\nSee [Datasets\
        \ Core Concepts](/docs/foundry/data-integration/datasets/) for details on\
        \ using branches and transactions. \n\nTo **get a file's content from a specific\
        \ Branch** specify the Branch's identifier as `branchId`. This will \nretrieve\
        \ the content for the most recent version of the file since the latest snapshot\
        \ transaction, or the\nearliest ancestor transaction of the branch if there\
        \ are no snapshot transactions.\n\nTo **get a file's content from the resolved\
        \ view of a transaction** specify the Transaction's resource identifier\n\
        as `endTransactionRid`. This will retrieve the content for the most recent\
        \ version of the file since the latest\nsnapshot transaction, or the earliest\
        \ ancestor transaction if there are no snapshot transactions.\n\nTo **get\
        \ a file's content from the resolved view of a range of transactions** specify\
        \ the the start transaction's\nresource identifier as `startTransactionRid`\
        \ and the end transaction's resource identifier as `endTransactionRid`.\n\
        This will retrieve the content for the most recent version of the file since\
        \ the `startTransactionRid` up to the \n`endTransactionRid`. Note that an\
        \ intermediate snapshot transaction will remove all files from the view. Behavior\n\
        is undefined when the start and end transactions do not belong to the same\
        \ root-to-leaf path.\n\nTo **get a file's content from a specific transaction**\
        \ specify the Transaction's resource identifier as both the \n`startTransactionRid`\
        \ and `endTransactionRid`.\n\nThird-party applications using this endpoint\
        \ via OAuth2 must request the following operation scope: `api:datasets-read`.\n"
      operationId: getFileContent
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset that contains the
          File.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - name: filePath
        in: path
        description: The File's path within the Dataset.
        required: true
        schema:
          $ref: "#/components/schemas/FilePath"
        example: q3-data%2fmy-file.csv
      - name: branchId
        in: query
        description: The identifier (name) of the Branch that contains the File. Defaults
          to `master` for most enrollments.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - name: startTransactionRid
        in: query
        description: The Resource Identifier (RID) of the start Transaction.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - name: endTransactionRid
        in: query
        description: The Resource Identifier (RID) of the end Transaction.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      responses:
        "200":
          description: ""
          content:
            '*/*':
              schema:
                type: string
                format: binary
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/files:upload:
    post:
      tags:
      - DatasetsApiService
      description: "Uploads a File to an existing Dataset.\nThe body of the request\
        \ must contain the binary content of the file and the `Content-Type` header\
        \ must be `application/octet-stream`.\n\nBy default the file is uploaded to\
        \ a new transaction on the default branch - `master` for most enrollments.\n\
        If the file already exists only the most recent version will be visible in\
        \ the updated view.\n\n#### Advanced Usage\n\nSee [Datasets Core Concepts](/docs/foundry/data-integration/datasets/)\
        \ for details on using branches and transactions. \n\nTo **upload a file to\
        \ a specific Branch** specify the Branch's identifier as `branchId`. A new\
        \ transaction will \nbe created and committed on this branch. By default the\
        \ TransactionType will be `UPDATE`, to override this\ndefault specify `transactionType`\
        \ in addition to `branchId`. \nSee [createBranch](/docs/foundry/api/datasets-resources/branches/create-branch/)\
        \ to create a custom branch.\n\nTo **upload a file on a manually opened transaction**\
        \ specify the Transaction's resource identifier as\n`transactionRid`. This\
        \ is useful for uploading multiple files in a single transaction. \nSee [createTransaction](/docs/foundry/api/datasets-resources/transactions/create-transaction/)\
        \ to open a transaction.\n\nThird-party applications using this endpoint via\
        \ OAuth2 must request the following operation scope: `api:datasets-write`.\n"
      operationId: uploadFile
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset on which to upload
          the File.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - name: filePath
        in: query
        description: The File's path within the Dataset.
        required: true
        schema:
          $ref: "#/components/schemas/FilePath"
        example: q3-data%2fmy-file.csv
      - name: branchId
        in: query
        description: The identifier (name) of the Branch on which to upload the File.
          Defaults to `master` for most enrollments.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - name: transactionType
        in: query
        description: The type of the Transaction to create when using branchId. Defaults
          to `UPDATE`.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionType"
      - name: transactionRid
        in: query
        description: The Resource Identifier (RID) of the open Transaction on which
          to upload the File.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              example:
                path: q3-data/my-file.csv
                sizeBytes: "74930"
                transactionRid: ri.foundry.main.transaction.bf9515c2-02d4-4703-8f84-c3b3c190254d
                updatedTime: 2022-10-10T16:44:55.192Z
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/readTable:
    get:
      tags:
      - DatasetsApiService
      description: |
        Gets the content of a dataset as a table in the specified format.

        This endpoint currently does not support views (Virtual datasets composed of other datasets).

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: readTable
      parameters:
      - name: datasetRid
        in: path
        description: |
          The RID of the Dataset.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - name: branchId
        in: query
        description: The identifier (name) of the Branch.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - name: startTransactionRid
        in: query
        description: The Resource Identifier (RID) of the start Transaction.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - name: endTransactionRid
        in: query
        description: The Resource Identifier (RID) of the end Transaction.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - name: format
        in: query
        description: |
          The export format. Must be `ARROW` or `CSV`.
        required: true
        schema:
          $ref: "#/components/schemas/TableExportFormat"
        example: CSV
      - name: columns
        in: query
        description: |
          A subset of the dataset columns to include in the result. Defaults to all columns.
        required: false
        schema:
          type: array
          items:
            type: string
      - name: rowLimit
        in: query
        description: |
          A limit on the number of rows to return. Note that row ordering is non-deterministic.
        required: false
        schema:
          type: integer
      responses:
        "200":
          description: The content stream.
          content:
            '*/*':
              schema:
                type: string
                format: binary
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/schema:
    get:
      tags:
      - DatasetsApiService
      description: |
        Retrieves the Schema for a Dataset and Branch, if it exists.
      operationId: getSchema
      parameters:
      - name: datasetRid
        in: path
        description: |
          The RID of the Dataset.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - name: branchId
        in: query
        description: |
          The ID of the Branch.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - name: transactionRid
        in: query
        description: |
          The TransactionRid that contains the Schema.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - name: preview
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
        "204":
          description: No Content
      security:
      - BearerAuth: []
    put:
      tags:
      - DatasetsApiService
      description: |
        Puts a Schema on an existing Dataset and Branch.
      operationId: putSchema
      parameters:
      - name: datasetRid
        in: path
        description: |
          The RID of the Dataset on which to put the Schema.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - name: branchId
        in: query
        description: |
          The ID of the Branch on which to put the Schema.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - name: preview
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
    delete:
      tags:
      - DatasetsApiService
      description: |
        Deletes the Schema from a Dataset and Branch.
      operationId: deleteSchema
      parameters:
      - name: datasetRid
        in: path
        description: |
          The RID of the Dataset on which to delete the schema.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
      - name: branchId
        in: query
        description: |
          The ID of the Branch on which to delete the schema.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      - name: transactionRid
        in: query
        description: |
          The RID of the Transaction on which to delete the schema.
        required: false
        schema:
          $ref: "#/components/schemas/TransactionRid"
      - name: preview
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "204":
          description: Schema deleted.
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/transactions:
    post:
      tags:
      - DatasetsApiService
      description: |
        Creates a Transaction on a Branch of a Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: createTransaction
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset on which to create
          the Transaction.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - name: branchId
        in: query
        description: |
          The identifier (name) of the Branch on which to create the Transaction. Defaults to `master` for most enrollments.
        required: false
        schema:
          $ref: "#/components/schemas/BranchId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
            example:
              transactionType: SNAPSHOT
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
              example:
                createdTime: 2022-10-10T12:23:11.152Z
                rid: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
                status: OPEN
                transactionType: SNAPSHOT
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/transactions/{transactionRid}:
    get:
      tags:
      - DatasetsApiService
      description: |
        Gets a Transaction of a Dataset.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-read`.
      operationId: getTransaction
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset that contains the
          Transaction.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - name: transactionRid
        in: path
        description: The Resource Identifier (RID) of the Transaction.
        required: true
        schema:
          $ref: "#/components/schemas/TransactionRid"
        example: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
              example:
                createdTime: 2022-10-10T12:20:15.166Z
                rid: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
                status: OPEN
                transactionType: SNAPSHOT
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/transactions/{transactionRid}/abort:
    post:
      tags:
      - DatasetsApiService
      description: |
        Aborts an open Transaction. File modifications made on this Transaction are not preserved and the Branch is
        not updated.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: abortTransaction
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset that contains the
          Transaction.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - name: transactionRid
        in: path
        description: The Resource Identifier (RID) of the Transaction.
        required: true
        schema:
          $ref: "#/components/schemas/TransactionRid"
        example: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
              example:
                closedTime: 2022-10-10T12:23:11.152Z
                createdTime: 2022-10-10T12:20:15.166Z
                rid: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
                status: ABORTED
                transactionType: SNAPSHOT
      security:
      - BearerAuth: []
  /v1/datasets/{datasetRid}/transactions/{transactionRid}/commit:
    post:
      tags:
      - DatasetsApiService
      description: |
        Commits an open Transaction. File modifications made on this Transaction are preserved and the Branch is
        updated to point to the Transaction.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:datasets-write`.
      operationId: commitTransaction
      parameters:
      - name: datasetRid
        in: path
        description: The Resource Identifier (RID) of the Dataset that contains the
          Transaction.
        required: true
        schema:
          $ref: "#/components/schemas/DatasetRid"
        example: ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da
      - name: transactionRid
        in: path
        description: The Resource Identifier (RID) of the Transaction.
        required: true
        schema:
          $ref: "#/components/schemas/TransactionRid"
        example: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
              example:
                closedTime: 2022-10-10T12:23:11.152Z
                createdTime: 2022-10-10T12:20:15.166Z
                rid: ri.foundry.main.transaction.abffc380-ea68-4843-9be1-9f44d2565496
                status: COMMITTED
                transactionType: SNAPSHOT
      security:
      - BearerAuth: []
  /v1/models/languageModels:
    get:
      tags:
      - ModelsApiService
      description: |
        Lists the language models available. Can be filtered by source.
      operationId: listLanguageModels
      parameters:
      - name: source
        in: query
        description: language model source
        required: false
        schema:
          $ref: "#/components/schemas/LanguageModelSource"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLanguageModelsResponse"
              example:
                data:
                - apiName: gpt_v4
                  source: global
                - apiName: my_gpt
                  source: hosted
      security:
      - BearerAuth: []
  /v1/models/languageModels/{modelName}/chatCompletions:
    post:
      tags:
      - ModelsApiService
      description: |
        Creates a chat completion for a prompt.
      operationId: createChatCompletion
      parameters:
      - name: modelName
        in: path
        description: |
          The API name of the model to use for the completion.
        required: true
        schema:
          $ref: "#/components/schemas/LanguageModelApiName"
        example: gpt_v4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCompletionRequest"
            example:
              messages:
              - content: Hello.
                role: USER
              parameters:
                temperature: 0.8
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatCompletionResponse"
              example:
                choices:
                - message:
                    content: Hello.
                    role: ASSISTANT
      security:
      - BearerAuth: []
  /v1/models/languageModels/{modelName}/chatCompletions/stream:
    post:
      tags:
      - ModelsApiService
      description: |
        Runs the same query as create chat completion, but streams the raw response as a string of UTF8 encoded bytes.
          Note: This endpoint returns only the string response.
      operationId: streamChatCompletion
      parameters:
      - name: modelName
        in: path
        description: |
          The API name of the model to use for the completion.
        required: true
        schema:
          $ref: "#/components/schemas/LanguageModelApiName"
        example: gpt_v4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCompletionRequest"
            example:
              messages:
              - content: Hello.
                role: USER
              parameters:
                temperature: 0.8
        required: true
      responses:
        "200":
          description: Success response.
          content:
            '*/*':
              schema:
                type: string
                format: binary
      security:
      - BearerAuth: []
  /v1/ontologies:
    get:
      tags:
      - OntologiesApiService
      description: |
        Lists the Ontologies visible to the current user.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listOntologies
      parameters: []
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOntologiesResponse"
              example:
                data:
                - apiName: default-ontology
                  description: The default ontology
                  displayName: Ontology
                  rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
                - apiName: shared-ontology
                  description: The ontology shared with our suppliers
                  displayName: Shared ontology
                  rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Gets a specific ontology with the given Ontology RID.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getOntology
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
              example:
                apiName: default-ontology
                description: The default ontology
                displayName: Ontology
                rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/actionTypes:
    get:
      tags:
      - OntologiesApiService
      description: |
        Lists the action types for the given Ontology.

        Each page may be smaller than the requested page size. However, it is guaranteed that if there are more
        results available, at least one result will be present in the response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listActionTypes
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action types. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListActionTypesResponse"
              example:
                data:
                - apiName: promote-employee
                  description: Update an employee's title and compensation
                  parameters:
                    employeeId:
                      baseType: Integer
                    newCompensation:
                      baseType: Decimal
                    newTitle:
                      baseType: String
                  rid: ri.ontology.main.action-type.7ed72754-7491-428a-bb18-4d7296eb2167
                - apiName: move-office
                  description: Update an office's physical location
                  parameters:
                    newAddress:
                      baseType: String
                      description: The office's new physical address (not necessarily
                        shipping address)
                    newCapacity:
                      baseType: Integer
                      description: The maximum seated-at-desk capacity of the new
                        office (maximum fire-safe capacity may be higher)
                    officeId:
                      baseType: String
                  rid: ri.ontology.main.action-type.9f84017d-cf17-4fa8-84c3-8e01e5d594f2
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/actionTypes/{actionTypeApiName}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Gets a specific action type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getActionType
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action type.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: actionTypeApiName
        in: path
        description: |
          The name of the action type in the API.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: promote-employee
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionType"
              example:
                data:
                  apiName: promote-employee
                  description: Update an employee's title and compensation
                  parameters:
                    employeeId:
                      baseType: Integer
                    newCompensation:
                      baseType: Decimal
                    newTitle:
                      baseType: String
                  rid: ri.ontology.main.action-type.7ed72754-7491-428a-bb18-4d7296eb2167
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/actions/{actionType}/apply:
    post:
      tags:
      - OntologiesApiService
      description: |
        Applies an action using the given parameters. Changes to the Ontology are eventually consistent and may take
        some time to be visible.

        Note that [parameter default values](/docs/foundry/action-types/parameters-default-value/) are not currently supported by
        this endpoint.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data api:write-data`.
      operationId: applyAction
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: actionType
        in: path
        description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyActionRequest"
            example:
              parameters:
                id: 80060
                newName: Anna Smith-Doe
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplyActionResponse"
              example: {}
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/actions/{actionType}/applyAsync:
    post:
      tags:
      - OntologiesApiService
      description: |
        Applies an action asynchronously using the given parameters. Changes to the Ontology are eventually consistent
        and may take some time to be visible.

        Note that [parameter default values](/docs/foundry/action-types/parameters-default-value/) are not currently
        supported by this endpoint.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data api:write-data`.
      operationId: applyActionAsync
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: actionType
        in: path
        description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - name: preview
        in: query
        description: |
          Represents a boolean value that restricts an endpoint to preview mode when set to true.
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AsyncApplyActionRequest"
            example:
              parameters:
                id: 80060
                newName: Anna Smith-Doe
        required: true
      responses:
        "202":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncActionOperation"
              example:
                data:
                - id: ri.actions.main.action.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
                  operationType: applyActionAsync
                  stage: RUNNING_SUBMISSION_CHECKS
                  status: RUNNING
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/actions/{actionType}/applyAsync/{actionRid}:
    get:
      tags:
      - OntologiesApiService
      operationId: getAsyncActionStatus
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: actionType
        in: path
        description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - name: actionRid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/ActionRid"
      - name: preview
        in: query
        description: |
          Represents a boolean value that restricts an endpoint to preview mode when set to true.
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncActionOperation"
              example:
                id: ri.actions.main.action.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
                operationType: applyActionAsync
                result:
                  type: success
                status: SUCCESSFUL
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/actions/{actionType}/applyBatch:
    post:
      tags:
      - OntologiesApiService
      description: |
        Applies multiple actions (of the same Action Type) using the given parameters.
        Changes to the Ontology are eventually consistent and may take some time to be visible.

        Up to 20 actions may be applied in one call. Actions that only modify objects in Object Storage v2 and do not
        call Functions may receive a higher limit.

        Note that [parameter default values](/docs/foundry/action-types/parameters-default-value/) and
        [notifications](/docs/foundry/action-types/notifications/) are not currently supported by this endpoint.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data api:write-data`.
      operationId: applyActionBatch
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: actionType
        in: path
        description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchApplyActionRequest"
            example:
              requests:
              - parameters:
                  id: 80060
                  newName: Anna Smith-Doe
              - parameters:
                  id: 80061
                  newName: Joe Bloggs
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchApplyActionResponse"
              example: {}
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/actions/{actionType}/validate:
    post:
      tags:
      - OntologiesApiService
      description: |
        Validates if an action can be run with the given set of parameters.
        The response contains the evaluation of parameters and **submission criteria**
        that determine if the request is `VALID` or `INVALID`.
        For performance reasons, validations will not consider existing objects or other data in Foundry.
        For example, the uniqueness of a primary key or the existence of a user ID will not be checked.
        Note that [parameter default values](/docs/foundry/action-types/parameters-default-value/) are not currently supported by
        this endpoint. Unspecified parameters will be given a default value of `null`.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: validateAction
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the action. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: actionType
        in: path
        description: |
          The API name of the action to validate. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateActionRequest"
            example:
              parameters:
                age: 17
                date: 2021-05-01
                differentObjectId: "2"
                firstName: Chuck
                hasObjectSet: true
                id: "2"
                lastName: Jones
                numbers:
                - 1
                - 2
                - 3
                objectSet: ri.object-set.main.object-set.39a9f4bd-f77e-45ce-9772-70f25852f623
                percentage: 41.3
                reference: Chuck
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateActionResponse"
              example:
                parameters:
                  age:
                    evaluatedConstraints:
                    - gte: 18
                      type: range
                    required: true
                    result: INVALID
                  attachment:
                    evaluatedConstraints: []
                    required: false
                    result: VALID
                  date:
                    evaluatedConstraints: []
                    required: true
                    result: VALID
                  differentObjectId:
                    evaluatedConstraints:
                    - type: objectPropertyValue
                    required: false
                    result: VALID
                  firstName:
                    evaluatedConstraints: []
                    required: true
                    result: VALID
                  hasObjectSet:
                    evaluatedConstraints: []
                    required: false
                    result: VALID
                  id:
                    evaluatedConstraints: []
                    required: true
                    result: VALID
                  lastName:
                    evaluatedConstraints:
                    - options:
                      - displayName: Doe
                        value: Doe
                      - displayName: Smith
                        value: Smith
                      - displayName: Adams
                        value: Adams
                      - displayName: Jones
                        value: Jones
                      otherValuesAllowed: true
                      type: oneOf
                    required: true
                    result: VALID
                  multipleAttachments:
                    evaluatedConstraints:
                    - gte: 0
                      type: arraySize
                    required: false
                    result: VALID
                  numbers:
                    evaluatedConstraints:
                    - gte: 2
                      lte: 4
                      type: arraySize
                    required: true
                    result: VALID
                  objectSet:
                    evaluatedConstraints: []
                    required: true
                    result: VALID
                  percentage:
                    evaluatedConstraints:
                    - gte: 0
                      lt: 100
                      type: range
                    required: true
                    result: VALID
                  reference:
                    evaluatedConstraints:
                    - type: objectQueryResult
                    required: false
                    result: VALID
                result: INVALID
                submissionCriteria:
                - configuredFailureMessage: First name can not match the first name
                    of the referenced object.
                  result: INVALID
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objectTypes:
    get:
      tags:
      - OntologiesApiService
      description: |
        Lists the object types for the given Ontology.

        Each page may be smaller or larger than the requested page size. However, it is guaranteed that if there are
        more results available, at least one result will be present in the
        response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listObjectTypes
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object types. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObjectTypesResponse"
              example:
                data:
                - apiName: employee
                  description: A full-time or part-time employee of our firm
                  primaryKey:
                  - employeeId
                  properties:
                    employeeId:
                      baseType: Integer
                    fullName:
                      baseType: String
                    office:
                      baseType: String
                      description: The unique ID of the employee's primary assigned
                        office
                    startDate:
                      baseType: Date
                      description: "The date the employee was hired (most recently,\
                        \ if they were re-hired)"
                  rid: ri.ontology.main.object-type.401ac022-89eb-4591-8b7e-0a912b9efb44
                - apiName: office
                  description: A physical location (not including rented co-working
                    spaces)
                  primaryKey:
                  - officeId
                  properties:
                    address:
                      baseType: String
                      description: The office's physical address (not necessarily
                        shipping address)
                    capacity:
                      baseType: Integer
                      description: The maximum seated-at-desk capacity of the office
                        (maximum fire-safe capacity may be higher)
                    officeId:
                      baseType: String
                  rid: ri.ontology.main.object-type.9a0e4409-9b50-499f-a637-a3b8334060d9
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objectTypes/{objectType}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Gets a specific object type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getObjectType
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectType"
              example:
                apiName: employee
                description: A full-time or part-time employee of our firm
                primaryKey:
                - employeeId
                properties:
                  employeeId:
                    baseType: Integer
                  fullName:
                    baseType: String
                  office:
                    baseType: String
                    description: The unique ID of the employee's primary assigned
                      office
                  startDate:
                    baseType: Date
                    description: "The date the employee was hired (most recently,\
                      \ if they were re-hired)"
                rid: ri.ontology.main.object-type.0381eda6-69bb-4cb7-8ba0-c6158e094a04
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objectTypes/{objectType}/outgoingLinkTypes:
    get:
      tags:
      - OntologiesApiService
      description: |
        List the outgoing links for an object type.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: listOutgoingLinkTypes
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager** application.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager** application.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: Flight
      - name: pageSize
        in: query
        description: The desired size of the page to be returned.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOutgoingLinkTypesResponse"
              example:
                data:
                - apiName: originAirport
                  cardinality: ONE
                  foreignKeyPropertyApiName: originAirportId
                  objectTypeApiName: Airport
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objectTypes/{objectType}/outgoingLinkTypes/{linkType}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Get an outgoing link for an object type.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getOutgoingLinkType
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object type. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager** application.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager** application.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: Employee
      - name: linkType
        in: path
        description: |
          The API name of the outgoing link.
          To find the API name for your link type, check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkTypeSide"
              example:
                apiName: directReport
                cardinality: MANY
                objectTypeApiName: Employee
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objects/{objectType}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Lists the objects for the given Ontology and object type.

        This endpoint supports filtering objects.
        See the [Filtering Objects documentation](/docs/foundry/api/ontology-resources/objects/object-basics/#filtering-objects) for details.

        Note that this endpoint does not guarantee consistency. Changes to the data could result in missing or
        repeated objects in the response pages.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Each page may be smaller or larger than the requested page size. However, it
        is guaranteed that if there are more results available, at least one result will be present
        in the response.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listObjects
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the objects. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - name: properties
        in: query
        description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        required: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - name: orderBy
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/OrderBy"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObjectsResponse"
              example:
                data:
                - properties:
                    firstName: John
                    id: 50030
                    lastName: Doe
                  rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                - properties:
                    firstName: John
                    id: 20090
                    lastName: Haymore
                  rid: ri.phonograph2-objects.main.object.dcd887d1-c757-4d7a-8619-71e6ec2c25ab
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objects/{objectType}/aggregate:
    post:
      tags:
      - OntologiesApiService
      description: |
        Perform functions on object fields in the specified ontology and object type.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: aggregateObjects
      parameters:
      - name: ontologyRid
        in: path
        description: The unique Resource Identifier (RID) of the Ontology that contains
          the objects.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: objectType
        in: path
        description: The type of the object to aggregate on.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AggregateObjectsRequest"
            example:
              aggregation:
              - field: properties.tenure
                name: min_tenure
                type: min
              - field: properties.tenure
                name: avg_tenure
                type: avg
              groupBy:
              - field: properties.startDate
                ranges:
                - gte: 2020-01-01
                  lt: 2020-06-01
                type: range
              - field: properties.city
                type: exact
              query:
                not:
                  eq: john
                  field: properties.name
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregateObjectsResponse"
              example:
                data:
                - group:
                    properties.city: New York City
                    properties.startDate:
                      gte: 2020-01-01
                      lt: 2020-06-01
                  metrics:
                  - name: min_tenure
                    value: 1
                  - name: avg_tenure
                    value: 3
                - group:
                    properties.city: San Francisco
                    properties.startDate:
                      gte: 2020-01-01
                      lt: 2020-06-01
                  metrics:
                  - name: min_tenure
                    value: 2
                  - name: avg_tenure
                    value: 3
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objects/{objectType}/search:
    post:
      tags:
      - OntologiesApiService
      description: |
        Search for objects in the specified ontology and object type. The request body is used
        to filter objects based on the specified query. The supported queries are:

        | Query type            | Description                                                                       | Supported Types                 |
        |----------|-----------------------------------------------------------------------------------|---------------------------------|
        | lt       | The provided property is less than the provided value.                            | number, string, date, timestamp |
        | gt       | The provided property is greater than the provided value.                         | number, string, date, timestamp |
        | lte      | The provided property is less than or equal to the provided value.                | number, string, date, timestamp |
        | gte      | The provided property is greater than or equal to the provided value.             | number, string, date, timestamp |
        | eq       | The provided property is exactly equal to the provided value.                     | number, string, date, timestamp |
        | isNull   | The provided property is (or is not) null.                                        | all                             |
        | contains | The provided property contains the provided value.                                | array                           |
        | not      | The sub-query does not match.                                                     | N/A (applied on a query)        |
        | and      | All the sub-queries match.                                                        | N/A (applied on queries)        |
        | or       | At least one of the sub-queries match.                                            | N/A (applied on queries)        |
        | prefix   | The provided property starts with the provided value.                             | string                          |
        | phrase   | The provided property contains the provided value as a substring.                 | string                          |
        | anyTerm  | The provided property contains at least one of the terms separated by whitespace. | string                          |
        | allTerms | The provided property contains all the terms separated by whitespace.             | string                          |                                                                            |

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: searchObjects
      parameters:
      - name: ontologyRid
        in: path
        description: The unique Resource Identifier (RID) of the Ontology that contains
          the objects.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: objectType
        in: path
        description: The type of the requested objects.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchObjectsRequest"
            example:
              query:
                not:
                  eq: 21
                  field: properties.age
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchObjectsResponse"
              example:
                data:
                - properties:
                    age: 21
                    firstName: john
                    lastName: smith
                  rid: ri.phonograph2-objects.main.object.5b5dbc28-7f05-4e83-a33a-1e5b851ababb
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objects/{objectType}/{primaryKey}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Gets a specific object with the given primary key.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getObject
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the requested object. To look up the expected primary key for your object type, use the
          `Get object type` endpoint or the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: properties
        in: query
        description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        required: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyObject"
              example:
                properties:
                  firstName: John
                  id: 50030
                  lastName: Doe
                rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objects/{objectType}/{primaryKey}/links/{linkType}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Lists the linked objects for a specific object and the given link type.

        This endpoint supports filtering objects.
        See the [Filtering Objects documentation](/docs/foundry/api/ontology-resources/objects/object-basics/#filtering-objects) for details.

        Note that this endpoint does not guarantee consistency. Changes to the data could result in missing or
        repeated objects in the response pages.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Each page may be smaller or larger than the requested page size. However, it
        is guaranteed that if there are more results available, at least one result will be present
        in the response.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listLinkedObjects
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the objects. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: objectType
        in: path
        description: |
          The API name of the object from which the links originate. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object from which the links originate. To look up the expected primary key for your
          object type, use the `Get object type` endpoint or the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: linkType
        in: path
        description: |
          The API name of the link that exists between the object and the requested objects.
          To find the API name for your link type, check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - name: properties
        in: query
        description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        required: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - name: orderBy
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/OrderBy"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLinkedObjectsResponse"
              example:
                data:
                - properties:
                    firstName: Anna
                    id: 80060
                    lastName: Smith
                  rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
                - properties:
                    firstName: James
                    id: 51060
                    lastName: Matthews
                  rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/objects/{objectType}/{primaryKey}/links/{linkType}/{linkedObjectPrimaryKey}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Get a specific linked object that originates from another object. If there is no link between the two objects,
        LinkedObjectNotFound is thrown.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getLinkedObject
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the object. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: objectType
        in: path
        description: "The API name of the object from which the links originate. To\
          \ find the API name, use the **List object types** endpoint or check the\
          \ **Ontology Manager**."
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object from which the link originates. To look up the expected primary key for your
          object type, use the `Get object type` endpoint or the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: linkType
        in: path
        description: |
          The API name of the link that exists between the object and the requested objects.
          To find the API name for your link type, check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      - name: linkedObjectPrimaryKey
        in: path
        description: |
          The primary key of the requested linked object. To look up the expected primary key for your object type,
          use the `Get object type` endpoint (passing the linked object type) or the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 80060
      - name: properties
        in: query
        description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        required: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyObject"
              example:
                properties:
                  firstName: Anna
                  id: 80060
                  lastName: Smith
                rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/queries/{queryApiName}/execute:
    post:
      tags:
      - OntologiesApiService
      description: |
        Executes a Query using the given parameters. Optional parameters do not need to be supplied.
        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: executeQuery
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the Query. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: queryApiName
        in: path
        description: |
          The API name of the Query to execute.
        required: true
        schema:
          $ref: "#/components/schemas/QueryApiName"
        example: getEmployeesInCity
      - name: preview
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteQueryRequest"
            example:
              parameters:
                city: New York
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecuteQueryResponse"
              example:
                value:
                - EMP546
                - EMP609
                - EMP989
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/queryTypes:
    get:
      tags:
      - OntologiesApiService
      description: |
        Lists the query types for the given Ontology.

        Each page may be smaller than the requested page size. However, it is guaranteed that if there are more
        results available, at least one result will be present in the response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listQueryTypes
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the query types. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 100.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - name: preview
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryTypesResponse"
              example:
                data:
                - apiName: getEmployeesInCity
                  description: Gets all employees in a given city
                  displayName: Get Employees in City
                  output: Array<OntologyObject<Employee>>
                  parameters:
                    city:
                      baseType: String
                      description: The city to search for employees in
                      required: true
                  rid: ri.function-registry.main.function.f05481407-1d67-4120-83b4-e3fed5305a29b
                  version: 1.1.3-rc1
                - apiName: getAverageTenureOfEmployees
                  description: Gets the average tenure of all employees
                  displayName: Get Average Tenure
                  output: Double
                  parameters:
                    employees:
                      baseType: String
                      description: An object set of the employees to calculate the
                        average tenure of
                      required: true
                    useMedian:
                      baseType: Boolean
                      description: "An optional flag to use the median instead of\
                        \ the mean, defaults to false"
                      required: false
                  rid: ri.function-registry.main.function.9549c29d3-e92f-64a1-beeb-af817819a400
                  version: 2.1.1
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v1/ontologies/{ontologyRid}/queryTypes/{queryApiName}:
    get:
      tags:
      - OntologiesApiService
      description: |
        Gets a specific query type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getQueryType
      parameters:
      - name: ontologyRid
        in: path
        description: |
          The unique Resource Identifier (RID) of the Ontology that contains the query type. To look up your Ontology RID, please use the
          **List ontologies** endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyRid"
        example: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      - name: queryApiName
        in: path
        description: |
          The API name of the query type. To find the API name, use the **List query types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/QueryApiName"
        example: getEmployeesInCity
      - name: preview
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
        example: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryType"
              example:
                apiName: getEmployeesInCity
                description: Gets all employees in a given city
                displayName: Get Employees in City
                output: Array<OntologyObject<Employee>>
                parameters:
                  city:
                    baseType: String
                    description: The city to search for employees in
                    required: true
                rid: ri.function-registry.main.function.f05481407-1d67-4120-83b4-e3fed5305a29b
                version: 1.1.3-rc1
      security:
      - BearerAuth: []
  /v2/ontologies:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Lists the Ontologies visible to the current user.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listOntologiesV2
      parameters: []
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOntologiesV2Response"
              example:
                data:
                - apiName: default-ontology
                  description: The default ontology
                  displayName: Ontology
                  rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
                - apiName: shared-ontology
                  description: The ontology shared with our suppliers
                  displayName: Shared ontology
                  rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      security:
      - BearerAuth: []
  /v2/ontologies/attachments/upload:
    post:
      tags:
      - OntologiesV2ApiService
      description: |
        Upload an attachment to use in an action. Any attachment which has not been linked to an object via
        an action within one hour after upload will be removed.
        Previously mapped attachments which are not connected to any object anymore are also removed on
        a biweekly basis.
        The body of the request must contain the binary content of the file and the `Content-Type` header must be `application/octet-stream`.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:write-data`.
      operationId: uploadAttachmentV2
      parameters:
      - name: Content-Length
        in: header
        description: The size in bytes of the file content being uploaded.
        required: true
        schema:
          $ref: "#/components/schemas/ContentLength"
      - name: Content-Type
        in: header
        description: The media type of the file being uploaded.
        required: true
        schema:
          $ref: "#/components/schemas/ContentType"
      - name: filename
        in: query
        description: The name of the file being uploaded.
        required: true
        schema:
          $ref: "#/components/schemas/Filename"
        example: My Image.jpeg
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentV2"
              example:
                filename: My Image.jpeg
                mediaType: image/jpeg
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                sizeBytes: 393469
      security:
      - BearerAuth: []
  /v2/ontologies/attachments/{attachmentRid}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get the metadata of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getAttachmentV2
      parameters:
      - name: attachmentRid
        in: path
        description: The RID of the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentV2"
              example:
                filename: My Image.jpeg
                mediaType: image/jpeg
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                sizeBytes: 393469
      security:
      - BearerAuth: []
  /v2/ontologies/attachments/{attachmentRid}/content:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get the content of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getAttachmentContentV2
      parameters:
      - name: attachmentRid
        in: path
        description: The RID of the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      responses:
        "200":
          description: Success response.
          content:
            '*/*':
              schema:
                type: string
                format: binary
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Gets a specific ontology with the given Ontology RID.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getOntologyV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyV2"
              example:
                apiName: default-ontology
                description: The default ontology
                displayName: Ontology
                rid: ri.ontology.main.ontology.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/actionTypes:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Lists the action types for the given Ontology.

        Each page may be smaller than the requested page size. However, it is guaranteed that if there are more
        results available, at least one result will be present in the response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listActionTypesV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListActionTypesResponseV2"
              example:
                data:
                - apiName: promote-employee
                  description: Update an employee's title and compensation
                  parameters:
                    employeeId:
                      dataType:
                        type: integer
                    newCompensation:
                      dataType:
                        type: double
                    newTitle:
                      dataType:
                        type: string
                  rid: ri.ontology.main.action-type.7ed72754-7491-428a-bb18-4d7296eb2167
                - apiName: move-office
                  description: Update an office's physical location
                  parameters:
                    newAddress:
                      dataType:
                        type: string
                      description: The office's new physical address (not necessarily
                        shipping address)
                    newCapacity:
                      dataType:
                        type: integer
                      description: The maximum seated-at-desk capacity of the new
                        office (maximum fire-safe capacity may be higher)
                    officeId:
                      dataType:
                        type: string
                  rid: ri.ontology.main.action-type.9f84017d-cf17-4fa8-84c3-8e01e5d594f2
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/actionTypes/{actionType}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Gets a specific action type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getActionTypeV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: actionType
        in: path
        description: |
          The name of the action type in the API.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: promote-employee
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionTypeV2"
              example:
                data:
                  apiName: promote-employee
                  description: Update an employee's title and compensation
                  parameters:
                    employeeId:
                      dataType:
                        type: integer
                    newCompensation:
                      dataType:
                        type: double
                    newTitle:
                      dataType:
                        type: string
                  rid: ri.ontology.main.action-type.7ed72754-7491-428a-bb18-4d7296eb2167
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/actions/{action}/apply:
    post:
      tags:
      - OntologiesV2ApiService
      description: "Applies an action using the given parameters. \n\nChanges to the\
        \ Ontology are eventually consistent and may take some time to be visible.\n\
        \nNote that [parameter default values](/docs/foundry/action-types/parameters-default-value/)\
        \ are not currently supported by\nthis endpoint.\n\nThird-party applications\
        \ using this endpoint via OAuth2 must request the\nfollowing operation scopes:\
        \ `api:read-data api:write-data`.\n"
      operationId: applyActionV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: action
        in: path
        description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyActionRequestV2"
            example:
              parameters:
                id: 80060
                newName: Anna Smith-Doe
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyncApplyActionResponseV2"
              example:
                parameters:
                  id:
                    evaluatedConstraints: []
                    required: true
                    result: VALID
                  newName:
                    evaluatedConstraints: []
                    required: true
                    result: VALID
                validation:
                  result: VALID
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/actions/{action}/applyAsync:
    post:
      tags:
      - OntologiesV2ApiService
      description: "Applies an action using the given parameters. \n\nChanges to the\
        \ Ontology are eventually consistent and may take some time to be visible.\n\
        \nNote that [parameter default values](/docs/foundry/action-types/parameters-default-value/)\
        \ are not currently supported by\nthis endpoint.\n\nThird-party applications\
        \ using this endpoint via OAuth2 must request the\nfollowing operation scopes:\
        \ `api:read-data api:write-data`.\n"
      operationId: applyActionAsyncV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: action
        in: path
        description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AsyncApplyActionRequestV2"
            example:
              parameters:
                id: 80060
                newName: Anna Smith-Doe
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncApplyActionResponseV2"
              example:
                operationId: ri.actions.main.action.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/actions/{action}/applyBatch:
    post:
      tags:
      - OntologiesV2ApiService
      description: |
        Applies multiple actions (of the same Action Type) using the given parameters.
        Changes to the Ontology are eventually consistent and may take some time to be visible.

        Up to 20 actions may be applied in one call. Actions that only modify objects in Object Storage v2 and do not
        call Functions may receive a higher limit.

        Note that [notifications](/docs/foundry/action-types/notifications/) are not currently supported by this endpoint.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data api:write-data`.
      operationId: applyActionBatchV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: action
        in: path
        description: |
          The API name of the action to apply. To find the API name for your action, use the **List action types**
          endpoint or check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ActionTypeApiName"
        example: rename-employee
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchApplyActionRequestV2"
            example:
              requests:
              - parameters:
                  id: 80060
                  newName: Anna Smith-Doe
              - parameters:
                  id: 80061
                  newName: Joe Bloggs
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchApplyActionResponseV2"
              example: {}
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/fullMetadata:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get the full Ontology metadata. This includes the objects, links, actions, queries, and interfaces.
      operationId: getOntologyFullMetadata
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyFullMetadata"
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/interfaceTypes:
    get:
      tags:
      - OntologiesV2ApiService
      description: ":::callout{theme=warning title=Warning}\n  This endpoint is in\
        \ preview and may be modified or removed at any time.\n  To use this endpoint,\
        \ add `preview=true` to the request query parameters.\n:::\n\nLists the interface\
        \ types for the given Ontology.\n\nEach page may be smaller than the requested\
        \ page size. However, it is guaranteed that if there are more\nresults available,\
        \ at least one result will be present in the response.        \n\nThird-party\
        \ applications using this endpoint via OAuth2 must request the following operation\
        \ scope: `api:read-data`.\n"
      operationId: listInterfaceTypes
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - name: preview
        in: query
        description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListInterfaceTypesResponse"
              example:
                data:
                - apiName: Athlete
                  description: Good at sportsball
                  displayName: Athlete
                  extendsInterfaces:
                  - Human
                  properties:
                    name:
                      apiName: name
                      dataType: string
                      displayName: Name
                      rid: com.palantir.property.d1abdbfe-0ce2-4fff-b0af-af21002c314b
                  rid: ri.ontology.main.interface.bea1af8c-7d5c-4ec9-b845-8eeed6d77482
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/interfaceTypes/{interfaceType}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        :::callout{theme=warning title=Warning}
          This endpoint is in preview and may be modified or removed at any time.
          To use this endpoint, add `preview=true` to the request query parameters.
        :::

        Gets a specific object type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getInterfaceType
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: interfaceType
        in: path
        description: |
          The API name of the interface type. To find the API name, use the **List interface types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/InterfaceTypeApiName"
        example: Employee
      - name: preview
        in: query
        description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterfaceType"
              example:
                apiName: Athlete
                description: Good at sportsball
                displayName: Athlete
                extendsInterfaces:
                - Human
                properties:
                  name:
                    apiName: name
                    dataType: string
                    displayName: Name
                    rid: com.palantir.property.d1abdbfe-0ce2-4fff-b0af-af21002c314b
                rid: ri.ontology.main.interface.bea1af8c-7d5c-4ec9-b845-8eeed6d77482
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/interfaces/{interfaceType}/aggregate:
    post:
      tags:
      - OntologiesV2ApiService
      description: ":::callout{theme=warning title=Warning}\n  This endpoint is in\
        \ preview and may be modified or removed at any time.\n  To use this endpoint,\
        \ add `preview=true` to the request query parameters.\n:::\n\nPerform functions\
        \ on object fields in the specified ontology and of the specified interface\
        \ type. Any \nproperties specified in the query must be shared property type\
        \ API names defined on the interface.\n\nThird-party applications using this\
        \ endpoint via OAuth2 must request the following operation scope: `api:read-data`.\n"
      operationId: aggregateObjectsForInterface
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: interfaceType
        in: path
        description: |
          The API name of the interface type. To find the API name, use the **List interface types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/InterfaceTypeApiName"
        example: Employee
      - name: preview
        in: query
        description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AggregateObjectsRequestV2"
            example:
              aggregation:
              - field: properties.tenure
                name: min_tenure
                type: min
              - field: properties.tenure
                name: avg_tenure
                type: avg
              groupBy:
              - field: startDate
                ranges:
                - endValue: 2020-06-01
                  startValue: 2020-01-01
                type: range
              - field: city
                type: exact
              query:
                not:
                  eq: john
                  field: name
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregateObjectsResponseV2"
              example:
                data:
                - group:
                    city: New York City
                    startDate:
                      endValue: 2020-06-01
                      startValue: 2020-01-01
                  metrics:
                  - name: min_tenure
                    value: 1
                  - name: avg_tenure
                    value: 3
                - group:
                    city: San Francisco
                    startDate:
                      endValue: 2020-06-01
                      startValue: 2020-01-01
                  metrics:
                  - name: min_tenure
                    value: 2
                  - name: avg_tenure
                    value: 3
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/interfaces/{interfaceType}/search:
    post:
      tags:
      - OntologiesV2ApiService
      description: ":::callout{theme=warning title=Warning}\n  This endpoint is in\
        \ preview and may be modified or removed at any time.\n  To use this endpoint,\
        \ add `preview=true` to the request query parameters.\n:::\n\nSearch for objects\
        \ in the specified ontology and interface type. Any properties specified in\
        \ the \"where\" or \n\"orderBy\" parameters must be shared property type API\
        \ names defined on the interface. The following search \nqueries are supported:\n\
        \n| Query type                              | Description                \
        \                                                                        \
        \               | Supported Types                 |\n|-----------------------------------------|-------------------------------------------------------------------------------------------------------------------|---------------------------------|\n\
        | lt                                      | The provided property is less\
        \ than the provided value.                                               \
        \             | number, string, date, timestamp |\n| gt                  \
        \                    | The provided property is greater than the provided\
        \ value.                                                         | number,\
        \ string, date, timestamp |\n| lte                                     | The\
        \ provided property is less than or equal to the provided value.         \
        \                                       | number, string, date, timestamp\
        \ |\n| gte                                     | The provided property is\
        \ greater than or equal to the provided value.                           \
        \                  | number, string, date, timestamp |\n| eq             \
        \                         | The provided property is exactly equal to the\
        \ provided value.                                                     | number,\
        \ string, date, timestamp |\n| isNull                                  | The\
        \ provided property is (or is not) null.                                 \
        \                                       | all                            \
        \ |\n| contains                                | The provided property contains\
        \ the provided value.                                                    \
        \            | array                           |\n| not                  \
        \                   | The sub-query does not match.                      \
        \                                                               | N/A (applied\
        \ on a query)        |\n| and                                     | All the\
        \ sub-queries match.                                                     \
        \                                   | N/A (applied on queries)        |\n\
        | or                                      | At least one of the sub-queries\
        \ match.                                                                 \
        \           | N/A (applied on queries)        |\n| startsWith            \
        \                  | The provided property starts with the provided value.\
        \                                                             | string   \
        \                       |\n| containsAllTermsInOrderPrefixLastTerm   | The\
        \ provided property contains all the terms provided in order. The last term\
        \ can be a partial prefix match.      | string                          |\n\
        | containsAllTermsInOrder                 | The provided property contains\
        \ the provided value as a substring.                                     \
        \            | string                          |\n| containsAnyTerm      \
        \                   | The provided property contains at least one of the terms\
        \ separated by whitespace.                                 | string      \
        \                    |\n| containsAllTerms                        | The provided\
        \ property contains all the terms separated by whitespace.               \
        \                              | string                          |       \
        \                                                          \n\nAttempting\
        \ to use an unsupported query will result in a validation error. Third-party\
        \ applications using this \nendpoint via OAuth2 must request the following\
        \ operation scope: `api:read-data`.\n"
      operationId: searchObjectsForInterface
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: interfaceType
        in: path
        description: |
          The API name of the interface type. To find the API name, use the **List interface types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/InterfaceTypeApiName"
        example: Employee
      - name: preview
        in: query
        description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchObjectsForInterfaceRequest"
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchObjectsResponseV2"
              example:
                data:
                - __apiName: Employee
                  __primaryKey: 1000
                  __rid: ri.phonograph2-objects.main.object.5b5dbc28-7f05-4e83-a33a-1e5b851ababb
                  age: 21
                  employeeId: 1000
                  firstName: john
                  lastName: smith
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objectSets/aggregate:
    post:
      tags:
      - OntologiesV2ApiService
      description: "Aggregates the ontology objects present in the `ObjectSet` from\
        \ the provided object set definition.        \n\nThird-party applications\
        \ using this endpoint via OAuth2 must request the following operation scope:\
        \ `api:read-data`.\n"
      operationId: aggregateObjectSetV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AggregateObjectSetRequestV2"
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregateObjectsResponseV2"
              example:
                data:
                - group:
                    city: New York City
                    startDate:
                      endValue: 2020-06-01
                      startValue: 2020-01-01
                  metrics:
                  - name: min_tenure
                    value: 1
                  - name: avg_tenure
                    value: 3
                - group:
                    city: San Francisco
                    startDate:
                      endValue: 2020-06-01
                      startValue: 2020-01-01
                  metrics:
                  - name: min_tenure
                    value: 2
                  - name: avg_tenure
                    value: 3
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objectSets/createTemporary:
    post:
      tags:
      - OntologiesV2ApiService
      description: "Creates a temporary `ObjectSet` from the given definition.   \
        \     \n\nThird-party applications using this endpoint via OAuth2 must request\
        \ the\nfollowing operation scopes: `api:read-data api:write-data`.\n"
      operationId: createTemporaryObjectSetV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTemporaryObjectSetRequestV2"
            example:
              objectSet:
                objectType: Employee
                type: base
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTemporaryObjectSetResponseV2"
              example:
                objectSetRid: ri.object-set.main.object-set.c32ccba5-1a55-4cfe-ad71-160c4c77a053
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objectSets/loadObjects:
    post:
      tags:
      - OntologiesV2ApiService
      description: |
        Load the ontology objects present in the `ObjectSet` from the provided object set definition.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: loadObjectSetV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoadObjectSetRequestV2"
            example:
              nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
              objectSet:
                objectType: Employee
                type: base
              pageSize: 10000
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoadObjectSetResponseV2"
              example:
                data:
                - __apiName: Employee
                  __primaryKey: 50030
                  __rid: ri.phonograph2-objects.main.object.5b5dbc28-7f05-4e83-a33a-1e5b851
                  age: 21
                  employeeId: 50030
                  firstName: John
                  lastName: Smith
                - __apiName: Employee
                  __primaryKey: 20090
                  __rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                  age: 27
                  employeeId: 20090
                  firstName: John
                  lastName: Haymore
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objectSets/{objectSetRid}:
    get:
      tags:
      - OntologiesV2ApiService
      description: "Gets the definition of the `ObjectSet` with the given RID.   \
        \     \n\nThird-party applications using this endpoint via OAuth2 must request\
        \ the following operation scope: `api:read-data`.\n"
      operationId: getObjectSetV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectSetRid
        in: path
        description: |
          The RID of the object set.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectSetRid"
        example: ri.object-set.main.object-set.c32ccba5-1a55-4cfe-ad71-160c4c77a053
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectSet"
              example:
                data:
                  objectSet:
                    objectType: Employee
                    type: base
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objectTypes:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Lists the object types for the given Ontology.

        Each page may be smaller or larger than the requested page size. However, it is guaranteed that if there are
        more results available, at least one result will be present in the
        response.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listObjectTypesV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 500.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObjectTypesV2Response"
              example:
                data:
                - apiName: employee
                  description: A full-time or part-time employee of our firm
                  displayName: Employee
                  primaryKey: employeeId
                  properties:
                    employeeId:
                      dataType:
                        type: integer
                    fullName:
                      dataType:
                        type: string
                    office:
                      dataType:
                        type: string
                      description: The unique ID of the employee's primary assigned
                        office
                    rid: ri.ontology.main.object-type.401ac022-89eb-4591-8b7e-0a912b9efb44
                    startDate:
                      dataType:
                        type: date
                      description: "The date the employee was hired (most recently,\
                        \ if they were re-hired)"
                  status: ACTIVE
                - apiName: office
                  description: A physical location (not including rented co-working
                    spaces)
                  displayName: Office
                  primaryKey: officeId
                  properties:
                    address:
                      dataType:
                        type: string
                      description: The office's physical address (not necessarily
                        shipping address)
                    capacity:
                      dataType:
                        type: integer
                      description: The maximum seated-at-desk capacity of the office
                        (maximum fire-safe capacity may be higher)
                    officeId:
                      dataType:
                        type: string
                    rid: ri.ontology.main.object-type.9a0e4409-9b50-499f-a637-a3b8334060d9
                  status: ACTIVE
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objectTypes/{objectType}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Gets a specific object type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getObjectTypeV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectTypeV2"
              example:
                apiName: employee
                description: A full-time or part-time employee of our firm
                displayName: Employee
                primaryKey: employeeId
                properties:
                  employeeId:
                    dataType:
                      type: integer
                  fullName:
                    dataType:
                      type: string
                  office:
                    dataType:
                      type: string
                    description: The unique ID of the employee's primary assigned
                      office
                  startDate:
                    dataType:
                      type: date
                    description: "The date the employee was hired (most recently,\
                      \ if they were re-hired)"
                rid: ri.ontology.main.object-type.0381eda6-69bb-4cb7-8ba0-c6158e094a04
                status: ACTIVE
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objectTypes/{objectType}/fullMetadata:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Gets the full metadata for a specific object type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getObjectTypeFullMetadata
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: preview
        in: query
        description: |
          A boolean flag that, when set to true, enables the use of beta features in preview mode.
        required: false
        schema:
          $ref: "#/components/schemas/PreviewMode"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectTypeFullMetadata"
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objectTypes/{objectType}/outgoingLinkTypes:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        List the outgoing links for an object type.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: listOutgoingLinkTypesV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager** application.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: Flight
      - name: pageSize
        in: query
        description: The desired size of the page to be returned.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOutgoingLinkTypesResponseV2"
              example:
                data:
                - apiName: originAirport
                  cardinality: ONE
                  foreignKeyPropertyApiName: originAirportId
                  objectTypeApiName: Airport
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objectTypes/{objectType}/outgoingLinkTypes/{linkType}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get an outgoing link for an object type.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getOutgoingLinkTypeV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager** application.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: Employee
      - name: linkType
        in: path
        description: |
          The API name of the outgoing link.
          To find the API name for your link type, check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkTypeSideV2"
              example:
                apiName: directReport
                cardinality: MANY
                objectTypeApiName: Employee
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Lists the objects for the given Ontology and object type.

        Note that this endpoint does not guarantee consistency. Changes to the data could result in missing or
        repeated objects in the response pages.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Each page may be smaller or larger than the requested page size. However, it
        is guaranteed that if there are more results available, at least one result will be present
        in the response.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listObjectsV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - name: select
        in: query
        description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        required: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - name: orderBy
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/OrderBy"
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      - name: excludeRid
        in: query
        description: "A flag to exclude the retrieval of the `__rid` property. \n\
          Setting this to true may improve performance of this endpoint for object\
          \ types in OSV2.\n"
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObjectsResponseV2"
              example:
                data:
                - __apiName: Employee
                  __primaryKey: 50030
                  __rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                  firstName: John
                  id: 50030
                  lastName: Doe
                - __apiName: Employee
                  __primaryKey: 20090
                  __rid: ri.phonograph2-objects.main.object.dcd887d1-c757-4d7a-8619-71e6ec2c25ab
                  firstName: John
                  id: 20090
                  lastName: Haymore
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/aggregate:
    post:
      tags:
      - OntologiesV2ApiService
      description: |
        Perform functions on object fields in the specified ontology and object type.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: aggregateObjectsV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: The type of the object to aggregate on.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AggregateObjectsRequestV2"
            example:
              aggregation:
              - field: properties.tenure
                name: min_tenure
                type: min
              - field: properties.tenure
                name: avg_tenure
                type: avg
              groupBy:
              - field: startDate
                ranges:
                - endValue: 2020-06-01
                  startValue: 2020-01-01
                type: range
              - field: city
                type: exact
              query:
                not:
                  eq: john
                  field: name
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregateObjectsResponseV2"
              example:
                data:
                - group:
                    city: New York City
                    startDate:
                      endValue: 2020-06-01
                      startValue: 2020-01-01
                  metrics:
                  - name: min_tenure
                    value: 1
                  - name: avg_tenure
                    value: 3
                - group:
                    city: San Francisco
                    startDate:
                      endValue: 2020-06-01
                      startValue: 2020-01-01
                  metrics:
                  - name: min_tenure
                    value: 2
                  - name: avg_tenure
                    value: 3
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/count:
    post:
      tags:
      - OntologiesV2ApiService
      description: |
        Returns a count of the objects of the given object type.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: countObjects
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountObjectsResponseV2"
              example:
                count: 100
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/search:
    post:
      tags:
      - OntologiesV2ApiService
      description: "Search for objects in the specified ontology and object type.\
        \ The request body is used\nto filter objects based on the specified query.\
        \ The supported queries are:\n\n| Query type                             \
        \ | Description                                                          \
        \                                             | Supported Types          \
        \       |\n|-----------------------------------------|-------------------------------------------------------------------------------------------------------------------|---------------------------------|\n\
        | lt                                      | The provided property is less\
        \ than the provided value.                                               \
        \             | number, string, date, timestamp |\n| gt                  \
        \                    | The provided property is greater than the provided\
        \ value.                                                         | number,\
        \ string, date, timestamp |\n| lte                                     | The\
        \ provided property is less than or equal to the provided value.         \
        \                                       | number, string, date, timestamp\
        \ |\n| gte                                     | The provided property is\
        \ greater than or equal to the provided value.                           \
        \                  | number, string, date, timestamp |\n| eq             \
        \                         | The provided property is exactly equal to the\
        \ provided value.                                                     | number,\
        \ string, date, timestamp |\n| isNull                                  | The\
        \ provided property is (or is not) null.                                 \
        \                                       | all                            \
        \ |\n| contains                                | The provided property contains\
        \ the provided value.                                                    \
        \            | array                           |\n| not                  \
        \                   | The sub-query does not match.                      \
        \                                                               | N/A (applied\
        \ on a query)        |\n| and                                     | All the\
        \ sub-queries match.                                                     \
        \                                   | N/A (applied on queries)        |\n\
        | or                                      | At least one of the sub-queries\
        \ match.                                                                 \
        \           | N/A (applied on queries)        |\n| startsWith            \
        \                  | The provided property starts with the provided value.\
        \                                                             | string   \
        \                       |\n| containsAllTermsInOrderPrefixLastTerm   | The\
        \ provided property contains all the terms provided in order. The last term\
        \ can be a partial prefix match.      | string                          |\n\
        | containsAllTermsInOrder                 | The provided property contains\
        \ the provided value as a substring.                                     \
        \            | string                          |\n| containsAnyTerm      \
        \                   | The provided property contains at least one of the terms\
        \ separated by whitespace.                                 | string      \
        \                    |\n| containsAllTerms                        | The provided\
        \ property contains all the terms separated by whitespace.               \
        \                              | string                          |       \
        \                                                            \n\nThird-party\
        \ applications using this endpoint via OAuth2 must request the following operation\
        \ scope: `api:read-data`.\n"
      operationId: searchObjectsV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchObjectsRequestV2"
            example:
              where:
                field: age
                type: eq
                value: 21
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchObjectsResponseV2"
              example:
                data:
                - __apiName: Employee
                  __primaryKey: 1000
                  __rid: ri.phonograph2-objects.main.object.5b5dbc28-7f05-4e83-a33a-1e5b851ababb
                  age: 21
                  employeeId: 1000
                  firstName: john
                  lastName: smith
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Gets a specific object with the given primary key.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getObjectV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the requested object. To look up the expected primary key for your object type, use the
          `Get object type` endpoint or the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: select
        in: query
        description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        required: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      - name: excludeRid
        in: query
        description: "A flag to exclude the retrieval of the `__rid` property. \n\
          Setting this to true may improve performance of this endpoint for object\
          \ types in OSV2.\n"
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyObjectV2"
              example:
                __apiName: Employee
                __primaryKey: 50030
                __rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                firstName: John
                id: 50030
                lastName: Doe
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/attachments/{property}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get the metadata of attachments parented to the given object.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: listPropertyAttachments
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object containing the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: property
        in: path
        description: |
          The API name of the attachment property. To find the API name for your attachment,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentMetadataResponse"
              example:
                filename: My Image.jpeg
                mediaType: image/jpeg
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                sizeBytes: 393469
                type: single
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/attachments/{property}/content:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get the content of an attachment.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getAttachmentPropertyContentV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object containing the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: property
        in: path
        description: |
          The API name of the attachment property. To find the API name for your attachment,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          description: Success response.
          content:
            '*/*':
              schema:
                type: string
                format: binary
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/attachments/{property}/{attachmentRid}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get the metadata of a particular attachment in an attachment list.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getAttachmentPropertyByRidV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object containing the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: property
        in: path
        description: |
          The API name of the attachment property. To find the API name for your attachment,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - name: attachmentRid
        in: path
        description: The RID of the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentV2"
              example:
                filename: My Image.jpeg
                mediaType: image/jpeg
                rid: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
                sizeBytes: 393469
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/attachments/{property}/{attachmentRid}/content:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get the content of an attachment by its RID.

        The RID must exist in the attachment array of the property.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getAttachmentPropertyContentByRidV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object containing the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: property
        in: path
        description: |
          The API name of the attachment property. To find the API name for your attachment,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - name: attachmentRid
        in: path
        description: The RID of the attachment.
        required: true
        schema:
          $ref: "#/components/schemas/AttachmentRid"
        example: ri.attachments.main.attachment.bb32154e-e043-4b00-9461-93136ca96b6f
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          description: Success response.
          content:
            '*/*':
              schema:
                type: string
                format: binary
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/links/{linkType}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Lists the linked objects for a specific object and the given link type.

        Note that this endpoint does not guarantee consistency. Changes to the data could result in missing or
        repeated objects in the response pages.

        For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
        are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.

        Each page may be smaller or larger than the requested page size. However, it
        is guaranteed that if there are more results available, at least one result will be present
        in the response.

        Note that null value properties will not be returned.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: listLinkedObjectsV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object from which the links originate. To look up the expected primary key for your
          object type, use the `Get object type` endpoint or the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: linkType
        in: path
        description: |
          The API name of the link that exists between the object and the requested objects.
          To find the API name for your link type, check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 1,000.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      - name: select
        in: query
        description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        required: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - name: orderBy
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/OrderBy"
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      - name: excludeRid
        in: query
        description: "A flag to exclude the retrieval of the `__rid` property. \n\
          Setting this to true may improve performance of this endpoint for object\
          \ types in OSV2.\n"
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLinkedObjectsResponseV2"
              example:
                data:
                - __apiName: Employee
                  __primaryKey: 80060
                  __rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
                  firstName: Anna
                  id: 80060
                  lastName: Smith
                - __apiName: Employee
                  __primaryKey: 51060
                  __rid: ri.phonograph2-objects.main.object.74f00352-8f13-4764-89ea-28e13e086136
                  firstName: James
                  id: 51060
                  lastName: Matthews
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/links/{linkType}/{linkedObjectPrimaryKey}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get a specific linked object that originates from another object.

        If there is no link between the two objects, `LinkedObjectNotFound` is thrown.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getLinkedObjectV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object from which the links originate. To look up the expected primary key for your
          object type, use the `Get object type` endpoint or the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: linkType
        in: path
        description: |
          The API name of the link that exists between the object and the requested objects.
          To find the API name for your link type, check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/LinkTypeApiName"
        example: directReport
      - name: linkedObjectPrimaryKey
        in: path
        description: |
          The primary key of the requested linked object. To look up the expected primary key for your object type,
          use the `Get object type` endpoint (passing the linked object type) or the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 80060
      - name: select
        in: query
        description: |
          The properties of the object type that should be included in the response. Omit this parameter to get all
          the properties.
        required: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      - name: excludeRid
        in: query
        description: "A flag to exclude the retrieval of the `__rid` property. \n\
          Setting this to true may improve performance of this endpoint for object\
          \ types in OSV2.\n"
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyObjectV2"
              example:
                __apiName: Employee
                __primaryKey: 50030
                __rid: ri.phonograph2-objects.main.object.88a6fccb-f333-46d6-a07e-7725c5f18b61
                firstName: John
                id: 50030
                lastName: Doe
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/timeseries/{property}/firstPoint:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get the first point of a time series property.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getFirstPoint
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object with the time series property.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: property
        in: path
        description: |
          The API name of the time series property. To find the API name for your time series property,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeSeriesPoint"
        "204":
          description: No Content
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/timeseries/{property}/lastPoint:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Get the last point of a time series property.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: getLastPoint
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object with the time series property.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: property
        in: path
        description: |
          The API name of the time series property. To find the API name for your time series property,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
        example: performance
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeSeriesPoint"
        "204":
          description: No Content
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/timeseries/{property}/streamPoints:
    post:
      tags:
      - OntologiesV2ApiService
      description: |
        Stream all of the points of a time series property.

        Third-party applications using this endpoint via OAuth2 must request the
        following operation scopes: `api:read-data`.
      operationId: streamPoints
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: objectType
        in: path
        description: |
          The API name of the object type. To find the API name, use the **List object types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/ObjectTypeApiName"
        example: employee
      - name: primaryKey
        in: path
        description: |
          The primary key of the object with the time series property.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyValueEscapedString"
        example: 50030
      - name: property
        in: path
        description: |
          The API name of the time series property. To find the API name for your time series property,
          check the **Ontology Manager** or use the **Get object type** endpoint.
        required: true
        schema:
          $ref: "#/components/schemas/PropertyApiName"
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StreamTimeSeriesPointsRequest"
            example:
              range:
                endTime:
                  unit: MONTHS
                  value: 1
                  when: BEFORE
                startTime:
                  unit: MONTHS
                  value: 5
                  when: BEFORE
                type: relative
        required: true
      responses:
        "200":
          description: Success response.
          content:
            '*/*':
              schema:
                type: string
                format: binary
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/queries/{queryApiName}/execute:
    post:
      tags:
      - OntologiesV2ApiService
      description: "Executes a Query using the given parameters.\n\nOptional parameters\
        \ do not need to be supplied.\n\nThird-party applications using this endpoint\
        \ via OAuth2 must request the \nfollowing operation scopes: `api:read-data`.\n"
      operationId: executeQueryV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: queryApiName
        in: path
        description: |
          The API name of the Query to execute.
        required: true
        schema:
          $ref: "#/components/schemas/QueryApiName"
        example: getEmployeesInCity
      - name: artifactRepository
        in: query
        description: |
          The repository associated with a marketplace installation.
        required: false
        schema:
          $ref: "#/components/schemas/ArtifactRepositoryRid"
      - name: packageName
        in: query
        description: |
          The package name of the generated SDK.
        required: false
        schema:
          $ref: "#/components/schemas/SdkPackageName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteQueryRequest"
            example:
              parameters:
                city: New York
        required: true
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecuteQueryResponse"
              example:
                value:
                - EMP546
                - EMP609
                - EMP989
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/queryTypes:
    get:
      tags:
      - OntologiesV2ApiService
      description: "Lists the query types for the given Ontology.        \n\nEach\
        \ page may be smaller than the requested page size. However, it is guaranteed\
        \ that if there are more\nresults available, at least one result will be present\
        \ in the response.        \n\nThird-party applications using this endpoint\
        \ via OAuth2 must request the following operation scope: `api:read-data`.\n"
      operationId: listQueryTypesV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: pageSize
        in: query
        description: |
          The desired size of the page to be returned. Defaults to 100.
          See [page sizes](/docs/foundry/api/general/overview/paging/#page-sizes) for details.
        required: false
        schema:
          $ref: "#/components/schemas/PageSize"
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/PageToken"
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryTypesResponseV2"
              example:
                data:
                - apiName: getEmployeesInCity
                  description: Gets all employees in a given city
                  displayName: Get Employees in City
                  output:
                    dataType:
                      required: true
                      subType:
                        objectApiName: Employee
                        type: object
                      type: array
                    required: true
                  parameters:
                    city:
                      dataType:
                        type: string
                      description: The city to search for employees in
                      required: true
                  rid: ri.function-registry.main.function.f05481407-1d67-4120-83b4-e3fed5305a29b
                  version: 1.1.3-rc1
                - apiName: getAverageTenureOfEmployees
                  description: Gets the average tenure of all employees
                  displayName: Get Average Tenure
                  output:
                    dataType:
                      type: double
                    required: true
                  parameters:
                    employees:
                      dataType:
                        type: string
                      description: An object set of the employees to calculate the
                        average tenure of
                      required: true
                    useMedian:
                      dataType:
                        type: boolean
                      description: "An optional flag to use the median instead of\
                        \ the mean, defaults to false"
                      required: false
                  rid: ri.function-registry.main.function.9549c29d3-e92f-64a1-beeb-af817819a400
                  version: 2.1.1
                nextPageToken: v1.VGhlcmUgaXMgc28gbXVjaCBsZWZ0IHRvIGJ1aWxkIC0gcGFsYW50aXIuY29tL2NhcmVlcnMv
      security:
      - BearerAuth: []
  /v2/ontologies/{ontology}/queryTypes/{queryApiName}:
    get:
      tags:
      - OntologiesV2ApiService
      description: |
        Gets a specific query type with the given API name.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getQueryTypeV2
      parameters:
      - name: ontology
        in: path
        description: |
          The API name of the ontology. To find the API name, use the **List ontologies** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/OntologyIdentifier"
        example: palantir
      - name: queryApiName
        in: path
        description: |
          The API name of the query type. To find the API name, use the **List query types** endpoint or
          check the **Ontology Manager**.
        required: true
        schema:
          $ref: "#/components/schemas/QueryApiName"
        example: getEmployeesInCity
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryTypeV2"
              example:
                apiName: getEmployeesInCity
                description: Gets all employees in a given city
                displayName: Get Employees in City
                output:
                  dataType:
                    subType:
                      objectApiName: Employee
                      type: object
                    type: array
                  required: true
                parameters:
                  city:
                    dataType:
                      type: string
                    description: The city to search for employees in
                    required: true
                rid: ri.function-registry.main.function.f05481407-1d67-4120-83b4-e3fed5305a29b
                version: 1.1.3-rc1
      security:
      - BearerAuth: []
  /v2/operations/{operationId}:
    get:
      tags:
      - OperationsApiService
      description: |
        Get an asynchronous operation by its ID.

        Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:read-data`.
      operationId: getOperation
      parameters:
      - name: operationId
        in: path
        description: "The unique Resource Identifier (RID) of the operation. \nThis\
          \ is the id returned in the response of the invoking operation.\n"
        required: true
        schema:
          type: string
        example: ri.actions.main.action.c61d9ab5-2919-4127-a0a1-ac64c0ce6367
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncOperation"
      security:
      - BearerAuth: []
components:
  schemas:
    AbortTransactionPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          - transactionRid
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
      description: The provided token does not have permission to abort the given
        treansaction on the given dataset.
    AbsoluteTimeRange:
      required:
      - type
      type: object
      properties:
        endTime:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        type:
          type: string
      description: ISO 8601 timestamps forming a range for a time series query. Start
        is inclusive and end is exclusive.
    ActionContainsDuplicateEdits:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: The given action request has multiple edits on the same object.
    ActionEditedPropertiesNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        Actions attempted to edit properties that could not be found on the object type.
        Please contact the Ontology administrator to resolve this issue.
    ActionMode:
      type: string
      enum:
      - ASYNC
      - RUN
      - VALIDATE
    ActionNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - actionRid
          type: object
          properties:
            actionRid:
              $ref: "#/components/schemas/ActionRid"
      description: "The action is not found, or the user does not have access to it."
    ActionParameterArrayType:
      required:
      - subType
      - type
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/ActionParameterType"
        type:
          type: string
    ActionParameterObjectNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - parameterId
          type: object
          properties:
            parameterId:
              $ref: "#/components/schemas/ParameterId"
      description: |
        The parameter object reference or parameter default value is not found, or the client token does not have access to it.
    ActionParameterObjectTypeNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - parameterId
          type: object
          properties:
            parameterId:
              $ref: "#/components/schemas/ParameterId"
      description: |
        The parameter references an object type that could not be found, or the client token does not have access to it.
    ActionParameterType:
      description: |
        A union of all the types supported by Ontology Action parameters.
      discriminator:
        propertyName: type
        mapping:
          array: "#/components/schemas/ActionParameterArrayType"
          attachment: "#/components/schemas/AttachmentType"
          boolean: "#/components/schemas/BooleanType"
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          integer: "#/components/schemas/IntegerType"
          long: "#/components/schemas/LongType"
          marking: "#/components/schemas/MarkingType"
          object: "#/components/schemas/OntologyObjectType"
          objectSet: "#/components/schemas/OntologyObjectSetType"
          string: "#/components/schemas/StringType"
          timestamp: "#/components/schemas/TimestampType"
      oneOf:
      - $ref: "#/components/schemas/ActionParameterArrayType"
      - $ref: "#/components/schemas/AttachmentType"
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/LongType"
      - $ref: "#/components/schemas/MarkingType"
      - $ref: "#/components/schemas/OntologyObjectSetType"
      - $ref: "#/components/schemas/OntologyObjectType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/TimestampType"
    ActionParameterV2:
      required:
      - dataType
      - required
      type: object
      properties:
        dataType:
          $ref: "#/components/schemas/ActionParameterType"
        description:
          type: string
        required:
          type: boolean
      description: Details about a parameter of an action.
    ActionResults:
      discriminator:
        propertyName: type
        mapping:
          edits: "#/components/schemas/ObjectEdits"
          largeScaleEdits: "#/components/schemas/ObjectTypeEdits"
      oneOf:
      - $ref: "#/components/schemas/ObjectEdits"
      - $ref: "#/components/schemas/ObjectTypeEdits"
    ActionRid:
      type: string
      description: The unique resource identifier for an action.
    ActionType:
      required:
      - apiName
      - rid
      - status
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/ActionTypeApiName"
        description:
          type: string
        displayName:
          $ref: "#/components/schemas/DisplayName"
        operations:
          type: array
          items:
            $ref: "#/components/schemas/LogicRule"
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Parameter"
        rid:
          $ref: "#/components/schemas/ActionTypeRid"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
      description: Represents an action type in the Ontology.
    ActionTypeApiName:
      type: string
      description: |
        The name of the action type in the API. To find the API name for your Action Type, use the `List action types`
        endpoint or check the **Ontology Manager**.
    ActionTypeNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            actionType:
              $ref: "#/components/schemas/ActionTypeApiName"
            rid:
              $ref: "#/components/schemas/ActionTypeRid"
      description: "The action type is not found, or the user does not have access\
        \ to it."
    ActionTypeRid:
      type: string
      description: |
        The unique resource identifier of an action type, useful for interacting with other Foundry APIs.
    ActionTypeV2:
      required:
      - apiName
      - rid
      - status
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/ActionTypeApiName"
        description:
          type: string
        displayName:
          $ref: "#/components/schemas/DisplayName"
        operations:
          type: array
          items:
            $ref: "#/components/schemas/LogicRule"
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ActionParameterV2"
        rid:
          $ref: "#/components/schemas/ActionTypeRid"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
      description: Represents an action type in the Ontology.
    ActionValidationFailed:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - actionType
          type: object
          properties:
            actionType:
              $ref: "#/components/schemas/ActionTypeApiName"
      description: |
        The validation failed for the given action parameters. Please use the `validateAction` endpoint for more
        details.
    AddLink:
      required:
      - aSideObject
      - bSideObject
      - linkTypeApiNameAtoB
      - linkTypeApiNameBtoA
      - type
      type: object
      properties:
        aSideObject:
          $ref: "#/components/schemas/LinkSideObject"
        bSideObject:
          $ref: "#/components/schemas/LinkSideObject"
        linkTypeApiNameAtoB:
          $ref: "#/components/schemas/LinkTypeApiName"
        linkTypeApiNameBtoA:
          $ref: "#/components/schemas/LinkTypeApiName"
        type:
          type: string
    AddObject:
      required:
      - objectType
      - primaryKey
      - type
      type: object
      properties:
        objectType:
          $ref: "#/components/schemas/ObjectTypeApiName"
        primaryKey:
          $ref: "#/components/schemas/PropertyValue"
        type:
          type: string
    AggregateObjectSetRequestV2:
      required:
      - objectSet
      type: object
      properties:
        accuracy:
          $ref: "#/components/schemas/AggregationAccuracyRequest"
        aggregation:
          type: array
          items:
            $ref: "#/components/schemas/AggregationV2"
        groupBy:
          type: array
          items:
            $ref: "#/components/schemas/AggregationGroupByV2"
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
    AggregateObjectsRequest:
      type: object
      properties:
        aggregation:
          type: array
          items:
            $ref: "#/components/schemas/Aggregation"
        groupBy:
          type: array
          items:
            $ref: "#/components/schemas/AggregationGroupBy"
        query:
          $ref: "#/components/schemas/SearchJsonQuery"
    AggregateObjectsRequestV2:
      type: object
      properties:
        accuracy:
          $ref: "#/components/schemas/AggregationAccuracyRequest"
        aggregation:
          type: array
          items:
            $ref: "#/components/schemas/AggregationV2"
        groupBy:
          type: array
          items:
            $ref: "#/components/schemas/AggregationGroupByV2"
        where:
          $ref: "#/components/schemas/SearchJsonQueryV2"
    AggregateObjectsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AggregateObjectsResponseItem"
        excludedItems:
          type: integer
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    AggregateObjectsResponseItem:
      type: object
      properties:
        group:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AggregationGroupValue"
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/AggregationMetricResult"
    AggregateObjectsResponseItemV2:
      type: object
      properties:
        group:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AggregationGroupValueV2"
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/AggregationMetricResultV2"
    AggregateObjectsResponseV2:
      required:
      - accuracy
      type: object
      properties:
        accuracy:
          $ref: "#/components/schemas/AggregationAccuracy"
        data:
          type: array
          items:
            $ref: "#/components/schemas/AggregateObjectsResponseItemV2"
        excludedItems:
          type: integer
    Aggregation:
      description: Specifies an aggregation function.
      discriminator:
        propertyName: type
        mapping:
          approximateDistinct: "#/components/schemas/ApproximateDistinctAggregation"
          avg: "#/components/schemas/AvgAggregation"
          count: "#/components/schemas/CountAggregation"
          max: "#/components/schemas/MaxAggregation"
          min: "#/components/schemas/MinAggregation"
          sum: "#/components/schemas/SumAggregation"
      oneOf:
      - $ref: "#/components/schemas/MaxAggregation"
      - $ref: "#/components/schemas/MinAggregation"
      - $ref: "#/components/schemas/AvgAggregation"
      - $ref: "#/components/schemas/SumAggregation"
      - $ref: "#/components/schemas/CountAggregation"
      - $ref: "#/components/schemas/ApproximateDistinctAggregation"
    AggregationAccuracy:
      type: string
      enum:
      - ACCURATE
      - APPROXIMATE
    AggregationAccuracyRequest:
      type: string
      enum:
      - REQUIRE_ACCURATE
      - ALLOW_APPROXIMATE
    AggregationDurationGrouping:
      required:
      - duration
      - field
      - type
      type: object
      properties:
        duration:
          $ref: "#/components/schemas/Duration"
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
      description: |
        Divides objects into groups according to an interval. Note that this grouping applies only on date types.
        The interval uses the ISO 8601 notation. For example, "PT1H2M34S" represents a duration of 3754 seconds.
    AggregationDurationGroupingV2:
      required:
      - field
      - type
      - unit
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        unit:
          $ref: "#/components/schemas/TimeUnit"
        value:
          type: integer
      description: |
        Divides objects into groups according to an interval. Note that this grouping applies only on date and timestamp types.
        When grouping by `YEARS`, `QUARTERS`, `MONTHS`, or `WEEKS`, the `value` must be set to `1`.
    AggregationExactGrouping:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        maxGroupCount:
          type: integer
        type:
          type: string
      description: Divides objects into groups according to an exact value.
    AggregationExactGroupingV2:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        maxGroupCount:
          type: integer
        type:
          type: string
      description: Divides objects into groups according to an exact value.
    AggregationFixedWidthGrouping:
      required:
      - field
      - fixedWidth
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        fixedWidth:
          type: integer
        type:
          type: string
      description: Divides objects into groups with the specified width.
    AggregationFixedWidthGroupingV2:
      required:
      - field
      - fixedWidth
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        fixedWidth:
          type: integer
        type:
          type: string
      description: Divides objects into groups with the specified width.
    AggregationGroupBy:
      description: Specifies a grouping for aggregation results.
      discriminator:
        propertyName: type
        mapping:
          duration: "#/components/schemas/AggregationDurationGrouping"
          exact: "#/components/schemas/AggregationExactGrouping"
          fixedWidth: "#/components/schemas/AggregationFixedWidthGrouping"
          ranges: "#/components/schemas/AggregationRangesGrouping"
      oneOf:
      - $ref: "#/components/schemas/AggregationFixedWidthGrouping"
      - $ref: "#/components/schemas/AggregationRangesGrouping"
      - $ref: "#/components/schemas/AggregationExactGrouping"
      - $ref: "#/components/schemas/AggregationDurationGrouping"
    AggregationGroupByV2:
      description: Specifies a grouping for aggregation results.
      discriminator:
        propertyName: type
        mapping:
          duration: "#/components/schemas/AggregationDurationGroupingV2"
          exact: "#/components/schemas/AggregationExactGroupingV2"
          fixedWidth: "#/components/schemas/AggregationFixedWidthGroupingV2"
          ranges: "#/components/schemas/AggregationRangesGroupingV2"
      oneOf:
      - $ref: "#/components/schemas/AggregationFixedWidthGroupingV2"
      - $ref: "#/components/schemas/AggregationRangesGroupingV2"
      - $ref: "#/components/schemas/AggregationExactGroupingV2"
      - $ref: "#/components/schemas/AggregationDurationGroupingV2"
    AggregationGroupCountExceededLimit:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            groupsCount:
              type: integer
            groupsLimit:
              type: integer
      description: |
        The number of groups in the aggregations grouping exceeded the allowed limit. This can typically be fixed by
        adjusting your query to reduce the number of groups created by your aggregation. For instance:
        - If you are using multiple `groupBy` clauses, try reducing the number of clauses.
        - If you are using a `groupBy` clause with a high cardinality property, try filtering the data first
          to reduce the number of groups.
    AggregationGroupKey:
      type: string
    AggregationGroupKeyV2:
      type: string
    AggregationGroupValue: {}
    AggregationGroupValueV2: {}
    AggregationMemoryExceededLimit:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - memoryLimitBytes
          - memoryUsedBytes
          type: object
          properties:
            memoryLimitBytes:
              type: string
            memoryUsedBytes:
              type: string
      description: |
        The amount of memory used in the request exceeded the limit. The number of groups in the aggregations grouping exceeded the allowed limit. This can typically be fixed by
        adjusting your query to reduce the number of groups created by your aggregation. For instance:
        - If you are using multiple `groupBy` clauses, try reducing the number of clauses.
        - If you are using a `groupBy` clause with a high cardinality property, try filtering the data first
          to reduce the number of groups.
    AggregationMetricName:
      type: string
      description: A user-specified alias for an aggregation metric name.
    AggregationMetricResult:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        value:
          type: number
          description: TBD
          format: double
    AggregationMetricResultV2:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        value:
          description: |
            The value of the metric. This will be a double in the case of
            a numeric metric, or a date string in the case of a date metric.
    AggregationObjectTypeGrouping:
      type: object
      description: "Divides objects into groups based on their object type. This grouping\
        \ is only useful when aggregating across \nmultiple object types, such as\
        \ when aggregating over an interface type.\n"
    AggregationOrderBy:
      required:
      - metricName
      type: object
      properties:
        metricName:
          type: string
    AggregationRange:
      type: object
      properties:
        gt:
          description: Exclusive start date.
        gte:
          description: Inclusive start date.
        lt:
          description: Exclusive end date.
        lte:
          description: Inclusive end date.
      description: Specifies a date range from an inclusive start date to an exclusive
        end date.
    AggregationRangeV2:
      required:
      - endValue
      - startValue
      type: object
      properties:
        endValue:
          description: Exclusive end.
        startValue:
          description: Inclusive start.
      description: Specifies a range from an inclusive start value to an exclusive
        end value.
    AggregationRangesGrouping:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        ranges:
          type: array
          items:
            $ref: "#/components/schemas/AggregationRange"
        type:
          type: string
      description: Divides objects into groups according to specified ranges.
    AggregationRangesGroupingV2:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        ranges:
          type: array
          items:
            $ref: "#/components/schemas/AggregationRangeV2"
        type:
          type: string
      description: Divides objects into groups according to specified ranges.
    AggregationV2:
      description: Specifies an aggregation function.
      discriminator:
        propertyName: type
        mapping:
          approximateDistinct: "#/components/schemas/ApproximateDistinctAggregationV2"
          approximatePercentile: "#/components/schemas/ApproximatePercentileAggregationV2"
          avg: "#/components/schemas/AvgAggregationV2"
          count: "#/components/schemas/CountAggregationV2"
          max: "#/components/schemas/MaxAggregationV2"
          min: "#/components/schemas/MinAggregationV2"
          sum: "#/components/schemas/SumAggregationV2"
      oneOf:
      - $ref: "#/components/schemas/MaxAggregationV2"
      - $ref: "#/components/schemas/MinAggregationV2"
      - $ref: "#/components/schemas/AvgAggregationV2"
      - $ref: "#/components/schemas/SumAggregationV2"
      - $ref: "#/components/schemas/CountAggregationV2"
      - $ref: "#/components/schemas/ApproximateDistinctAggregationV2"
      - $ref: "#/components/schemas/ApproximatePercentileAggregationV2"
    AllTermsQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        fuzzy:
          $ref: "#/components/schemas/Fuzzy"
        type:
          type: string
        value:
          type: string
      description: |
        Returns objects where the specified field contains all of the whitespace separated words in any
        order in the provided value. This query supports fuzzy matching.
    AndQuery:
      required:
      - type
      type: object
      properties:
        type:
          type: string
        value:
          type: array
          items:
            $ref: "#/components/schemas/SearchJsonQuery"
      description: Returns objects where every query is satisfied.
    AndQueryV2:
      required:
      - type
      type: object
      properties:
        type:
          type: string
        value:
          type: array
          items:
            $ref: "#/components/schemas/SearchJsonQueryV2"
      description: Returns objects where every query is satisfied.
    AnyTermQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        fuzzy:
          $ref: "#/components/schemas/Fuzzy"
        type:
          type: string
        value:
          type: string
      description: "Returns objects where the specified field contains any of the\
        \ whitespace separated words in any \norder in the provided value. This query\
        \ supports fuzzy matching.\n"
    AnyType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    ApiFeaturePreviewUsageOnly:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        This feature is only supported in preview mode. Please use `preview=true` in the query
        parameters to call this endpoint.
    ApiUsageDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: You are not allowed to use Palantir APIs.
    ApplyActionFailed:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
    ApplyActionMode:
      type: string
      enum:
      - VALIDATE_ONLY
      - VALIDATE_AND_EXECUTE
    ApplyActionRequest:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          nullable: true
    ApplyActionRequestOptions:
      type: object
      properties:
        mode:
          $ref: "#/components/schemas/ApplyActionMode"
        returnEdits:
          $ref: "#/components/schemas/ReturnEditsMode"
    ApplyActionRequestV2:
      type: object
      properties:
        options:
          $ref: "#/components/schemas/ApplyActionRequestOptions"
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          nullable: true
    ApplyActionResponse:
      type: object
    ApproximateDistinctAggregation:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes an approximate number of distinct values for the provided
        field.
    ApproximateDistinctAggregationV2:
      required:
      - field
      - type
      type: object
      properties:
        direction:
          $ref: "#/components/schemas/OrderByDirection"
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes an approximate number of distinct values for the provided
        field.
    ApproximatePercentileAggregationV2:
      required:
      - approximatePercentile
      - field
      - type
      type: object
      properties:
        approximatePercentile:
          type: number
          format: double
        direction:
          $ref: "#/components/schemas/OrderByDirection"
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the approximate percentile value for the provided field.
    ArchiveFileFormat:
      type: string
      description: |
        The format of an archive file.
      enum:
      - ZIP
    Arg:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ArraySizeConstraint:
      required:
      - type
      type: object
      properties:
        gt:
          description: Greater than
        gte:
          description: Greater than or equal
        lt:
          description: Less than
        lte:
          description: Less than or equal
        type:
          type: string
      description: |
        The parameter expects an array of values and the size of the array must fall within the defined range.
    ArtifactRepositoryRid:
      type: string
    AsyncActionOperation:
      required:
      - id
      properties:
        expiryTime:
          type: string
          format: date-time
        id:
          type: string
        result:
          discriminator:
            propertyName: type
            mapping:
              error: "#/components/schemas/AsyncOperationError"
              success: "#/components/schemas/AsyncApplyActionResponse"
          oneOf:
          - $ref: "#/components/schemas/AsyncApplyActionResponse"
          - $ref: "#/components/schemas/AsyncOperationError"
        stage:
          $ref: "#/components/schemas/AsyncActionStatus"
        status:
          $ref: "#/components/schemas/AsyncOperationStatus"
    AsyncActionStatus:
      type: string
      enum:
      - RUNNING_SUBMISSION_CHECKS
      - EXECUTING_WRITE_BACK_WEBHOOK
      - COMPUTING_ONTOLOGY_EDITS
      - COMPUTING_FUNCTION
      - WRITING_ONTOLOGY_EDITS
      - EXECUTING_SIDE_EFFECT_WEBHOOK
      - SENDING_NOTIFICATIONS
    AsyncApplyActionOperationResponseV2:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    AsyncApplyActionOperationV2:
      required:
      - id
      properties:
        expiryTime:
          type: string
          format: date-time
        id:
          type: string
        result:
          discriminator:
            propertyName: type
            mapping:
              error: "#/components/schemas/AsyncOperationError"
              success: "#/components/schemas/AsyncApplyActionOperationResponseV2"
          oneOf:
          - $ref: "#/components/schemas/AsyncApplyActionOperationResponseV2"
          - $ref: "#/components/schemas/AsyncOperationError"
        stage:
          $ref: "#/components/schemas/AsyncActionStatus"
        status:
          $ref: "#/components/schemas/AsyncOperationStatus"
    AsyncApplyActionRequest:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          nullable: true
    AsyncApplyActionRequestV2:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          nullable: true
    AsyncApplyActionResponse:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    AsyncApplyActionResponseV2:
      required:
      - operationId
      type: object
      properties:
        operationId:
          type: string
    AsyncOperation:
      discriminator:
        propertyName: type
        mapping:
          applyActionAsync: "#/components/schemas/AsyncActionOperation"
          applyActionAsyncV2: "#/components/schemas/AsyncApplyActionOperationV2"
      oneOf:
      - $ref: "#/components/schemas/AsyncApplyActionOperationV2"
      - $ref: "#/components/schemas/AsyncActionOperation"
    AsyncOperationError:
      required:
      - errorCode
      - errorName
      - type
      type: object
      properties:
        errorCode:
          type: string
        errorInstanceId:
          type: string
        errorName:
          type: string
        parameters:
          type: object
          additionalProperties: {}
        type:
          type: string
    AsyncOperationStatus:
      type: string
      enum:
      - WAITING
      - RUNNING
      - SUCCEEDED
      - FAILED
      - CANCELLED
      - PAUSED
    Attachment:
      required:
      - filename
      - mediaType
      - rid
      - sizeBytes
      type: object
      properties:
        filename:
          $ref: "#/components/schemas/Filename"
        mediaType:
          $ref: "#/components/schemas/MediaType"
        rid:
          $ref: "#/components/schemas/AttachmentRid"
        sizeBytes:
          $ref: "#/components/schemas/SizeBytes"
      description: The representation of an attachment.
    AttachmentMetadataResponse:
      description: The attachment metadata response
      discriminator:
        propertyName: type
        mapping:
          multiple: "#/components/schemas/ListAttachmentsResponseV2"
          single: "#/components/schemas/AttachmentV2"
      oneOf:
      - $ref: "#/components/schemas/AttachmentV2"
      - $ref: "#/components/schemas/ListAttachmentsResponseV2"
    AttachmentNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            attachmentRid:
              $ref: "#/components/schemas/AttachmentRid"
      description: "The requested attachment is not found, or the client token does\
        \ not have access to it. \nAttachments that are not attached to any objects\
        \ are deleted after two weeks.\nAttachments that have not been attached to\
        \ an object can only be viewed by the user who uploaded them.\nAttachments\
        \ that have been attached to an object can be viewed by users who can view\
        \ the object.\n"
    AttachmentProperty:
      required:
      - rid
      type: object
      properties:
        rid:
          $ref: "#/components/schemas/AttachmentRid"
      description: The representation of an attachment as a data type.
    AttachmentRid:
      type: string
      description: The unique resource identifier of an attachment.
    AttachmentSizeExceededLimit:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - fileLimitBytes
          - fileSizeBytes
          type: object
          properties:
            fileLimitBytes:
              type: string
            fileSizeBytes:
              type: string
      description: |
        The file is too large to be uploaded as an attachment.
        The maximum attachment size is 200MB.
    AttachmentType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    AttachmentV2:
      required:
      - filename
      - mediaType
      - rid
      - sizeBytes
      - type
      type: object
      properties:
        filename:
          $ref: "#/components/schemas/Filename"
        mediaType:
          $ref: "#/components/schemas/MediaType"
        rid:
          $ref: "#/components/schemas/AttachmentRid"
        sizeBytes:
          $ref: "#/components/schemas/SizeBytes"
        type:
          type: string
      description: The representation of an attachment.
    AvgAggregation:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the average value for the provided field.
    AvgAggregationV2:
      required:
      - field
      - type
      type: object
      properties:
        direction:
          $ref: "#/components/schemas/OrderByDirection"
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the average value for the provided field.
    BBox:
      type: array
      description: |
        A GeoJSON object MAY have a member named "bbox" to include
        information on the coordinate range for its Geometries, Features, or
        FeatureCollections. The value of the bbox member MUST be an array of
        length 2*n where n is the number of dimensions represented in the
        contained geometries, with all axes of the most southwesterly point
        followed by all axes of the more northeasterly point. The axes order
        of a bbox follows the axes order of geometries.
      items:
        $ref: "#/components/schemas/Coordinate"
    BatchApplyActionRequest:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: "#/components/schemas/ApplyActionRequest"
    BatchApplyActionRequestItem:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          nullable: true
    BatchApplyActionRequestOptions:
      type: object
      properties:
        returnEdits:
          $ref: "#/components/schemas/ReturnEditsMode"
    BatchApplyActionRequestV2:
      type: object
      properties:
        options:
          $ref: "#/components/schemas/BatchApplyActionRequestOptions"
        requests:
          type: array
          items:
            $ref: "#/components/schemas/BatchApplyActionRequestItem"
    BatchApplyActionResponse:
      type: object
    BatchApplyActionResponseV2:
      type: object
      properties:
        edits:
          $ref: "#/components/schemas/ActionResults"
    BinaryType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    BooleanType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    BoundingBoxValue:
      required:
      - bottomRight
      - topLeft
      type: object
      properties:
        bottomRight:
          $ref: "#/components/schemas/WithinBoundingBoxPoint"
        topLeft:
          $ref: "#/components/schemas/WithinBoundingBoxPoint"
      description: |
        The top left and bottom right coordinate points that make up the bounding box.
    Branch:
      required:
      - branchId
      type: object
      properties:
        branchId:
          $ref: "#/components/schemas/BranchId"
        transactionRid:
          $ref: "#/components/schemas/TransactionRid"
      description: |
        A Branch of a Dataset.
    BranchAlreadyExists:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: The branch cannot be created because a branch with that name already
        exists.
    BranchId:
      type: string
      description: |
        The identifier (name) of a Branch. Example: `master`.
    BranchNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: "The requested branch could not be found, or the client token does\
        \ not have access to it."
    ByteType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    CenterPoint:
      required:
      - center
      - distance
      type: object
      properties:
        center:
          $ref: "#/components/schemas/CenterPointTypes"
        distance:
          $ref: "#/components/schemas/Distance"
      description: |
        The coordinate point to use as the center of the distance query.
    CenterPointTypes:
      discriminator:
        propertyName: type
        mapping:
          Point: "#/components/schemas/GeoPoint"
      oneOf:
      - $ref: "#/components/schemas/GeoPoint"
    ChatCompletionChoice:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ChatMessage"
    ChatCompletionRequest:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ParameterValue"
          description: |
            Any additional model-specific parameters:
            - for global models, the keys can be one of the following
                (refer to https://platform.openai.com/docs/api-reference/chat/create for documentation on these parameters):
              - `temperature`
              - `top_p`
              - `n`
              - `stop`
              - `max_tokens`
              - `presence_penalty`
              - `frequency_penalty`
              - `logit_bias`
    ChatCompletionResponse:
      type: object
      properties:
        choices:
          type: array
          items:
            $ref: "#/components/schemas/ChatCompletionChoice"
      description: Contains `n` different completion choices as specified in the request
        parameter.
    ChatMessage:
      required:
      - role
      type: object
      properties:
        content:
          type: string
        role:
          $ref: "#/components/schemas/ChatMessageRole"
    ChatMessageRole:
      type: string
      enum:
      - SYSTEM
      - ASSISTANT
      - USER
    ColumnTypesNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: The dataset contains column types that are not supported.
    CommitTransactionPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          - transactionRid
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
      description: The provided token does not have permission to commit the given
        treansaction on the given dataset.
    CompositePrimaryKeyNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            primaryKey:
              type: array
              items:
                $ref: "#/components/schemas/PropertyApiName"
      description: |
        Primary keys consisting of multiple properties are not supported by this API. If you need support for this,
        please reach out to Palantir Support.
    ContainsAllTermsInOrderPrefixLastTerm:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          type: string
      description: "Returns objects where the specified field contains all of the\
        \ terms in the order provided, \nbut they do have to be adjacent to each other.\n\
        The last term can be a partial prefix match.\n"
    ContainsAllTermsInOrderQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          type: string
      description: |
        Returns objects where the specified field contains all of the terms in the order provided,
        but they do have to be adjacent to each other.
    ContainsAllTermsQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        fuzzy:
          $ref: "#/components/schemas/FuzzyV2"
        type:
          type: string
        value:
          type: string
      description: |
        Returns objects where the specified field contains all of the whitespace separated words in any
        order in the provided value. This query supports fuzzy matching.
    ContainsAnyTermQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        fuzzy:
          $ref: "#/components/schemas/FuzzyV2"
        type:
          type: string
        value:
          type: string
      description: "Returns objects where the specified field contains any of the\
        \ whitespace separated words in any \norder in the provided value. This query\
        \ supports fuzzy matching.\n"
    ContainsQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified array contains a value.
    ContainsQueryV2:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified array contains a value.
    ContentLength:
      type: string
      format: long
    ContentType:
      type: string
    Coordinate:
      type: number
      format: double
    CountAggregation:
      required:
      - type
      type: object
      properties:
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the total count of objects.
    CountAggregationV2:
      required:
      - type
      type: object
      properties:
        direction:
          $ref: "#/components/schemas/OrderByDirection"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the total count of objects.
    CountObjectsResponseV2:
      type: object
      properties:
        count:
          type: integer
    CreateBranchPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: The provided token does not have permission to create a branch
        of this dataset.
    CreateBranchRequest:
      required:
      - branchId
      type: object
      properties:
        branchId:
          $ref: "#/components/schemas/BranchId"
        transactionRid:
          $ref: "#/components/schemas/TransactionRid"
    CreateDatasetPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - name
          - parentFolderRid
          type: object
          properties:
            name:
              $ref: "#/components/schemas/DatasetName"
            parentFolderRid:
              $ref: "#/components/schemas/FolderRid"
      description: The provided token does not have permission to create a dataset
        in this folder.
    CreateDatasetRequest:
      required:
      - name
      - parentFolderRid
      type: object
      properties:
        name:
          $ref: "#/components/schemas/DatasetName"
        parentFolderRid:
          $ref: "#/components/schemas/FolderRid"
    CreateLinkRule:
      required:
      - aSideObjectTypeApiName
      - bSideObjectTypeApiName
      - linkTypeApiNameAtoB
      - linkTypeApiNameBtoA
      - type
      type: object
      properties:
        aSideObjectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        bSideObjectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        linkTypeApiNameAtoB:
          $ref: "#/components/schemas/LinkTypeApiName"
        linkTypeApiNameBtoA:
          $ref: "#/components/schemas/LinkTypeApiName"
        type:
          type: string
    CreateObjectRule:
      required:
      - objectTypeApiName
      - type
      type: object
      properties:
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        type:
          type: string
    CreateTemporaryObjectSetRequestV2:
      required:
      - objectSet
      type: object
      properties:
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
    CreateTemporaryObjectSetResponseV2:
      required:
      - objectSetRid
      type: object
      properties:
        objectSetRid:
          $ref: "#/components/schemas/ObjectSetRid"
    CreateTransactionPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: The provided token does not have permission to create a transaction
        on this dataset.
    CreateTransactionRequest:
      type: object
      properties:
        transactionType:
          $ref: "#/components/schemas/TransactionType"
    CreatedTime:
      type: string
      description: |
        The time at which the resource was created.
    CustomTypeId:
      type: string
      description: |
        A UUID representing a custom type in a given Function.
    DataValue:
      description: |
        Represents the value of data in the following format. Note that these values can be nested, for example an array of structs.
        | Type                        | JSON encoding                                         | Example                                                                       |
        |-----------------------------|-------------------------------------------------------|-------------------------------------------------------------------------------|
        | Array                       | array                                                 | `["alpha", "bravo", "charlie"]`                                               |
        | Attachment                  | string                                                | `"ri.attachments.main.attachment.2f944bae-5851-4204-8615-920c969a9f2e"`       |
        | Boolean                     | boolean                                               | `true`                                                                        |
        | Byte                        | number                                                | `31`                                                                          |
        | Date                        | ISO 8601 extended local date string                   | `"2021-05-01"`                                                                |
        | Decimal                     | string                                                | `"2.718281828"`                                                               |
        | Float                       | number                                                | `3.14159265`                                                                  |
        | Double                      | number                                                | `3.14159265`                                                                  |
        | Integer                     | number                                                | `238940`                                                                      |
        | Long                        | string                                                | `"58319870951433"`                                                            |
        | Marking                     | string                                                | `"MU"`                                                                        |
        | Null                        | null                                                  | `null`                                                                        |
        | Object Set                  | string OR the object set definition                   | `ri.object-set.main.versioned-object-set.h13274m8-23f5-431c-8aee-a4554157c57z`|
        | Ontology Object Reference   | JSON encoding of the object's primary key             | `10033123` or `"EMP1234"`                                                     |
        | Set                         | array                                                 | `["alpha", "bravo", "charlie"]`                                               |
        | Short                       | number                                                | `8739`                                                                        |
        | String                      | string                                                | `"Call me Ishmael"`                                                           |
        | Struct                      | JSON object                                           | `{"name": "John Doe", "age": 42}`                                             |
        | TwoDimensionalAggregation   | JSON object                                           | `{"groups": [{"key": "alpha", "value": 100}, {"key": "beta", "value": 101}]}` |
        | ThreeDimensionalAggregation | JSON object                                           | `{"groups": [{"key": "NYC", "groups": [{"key": "Engineer", "value" : 100}]}]}`|
        | Timestamp                   | ISO 8601 extended offset date-time string in UTC zone | `"2021-01-04T05:00:00Z"`                                                      |
    Dataset:
      required:
      - name
      - parentFolderRid
      - rid
      type: object
      properties:
        name:
          $ref: "#/components/schemas/DatasetName"
        parentFolderRid:
          $ref: "#/components/schemas/FolderRid"
        rid:
          $ref: "#/components/schemas/DatasetRid"
    DatasetName:
      type: string
    DatasetNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: "The requested dataset could not be found, or the client token\
        \ does not have access to it."
    DatasetReadNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: The dataset does not support being read.
    DatasetRid:
      type: string
      description: |
        The Resource Identifier (RID) of a Dataset. Example: `ri.foundry.main.dataset.c26f11c8-cdb3-4f44-9f5d-9816ea1c82da`.
    DateType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    DecimalType:
      required:
      - type
      type: object
      properties:
        precision:
          type: integer
        scale:
          type: integer
        type:
          type: string
    DeleteBranchPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: The provided token does not have permission to delete the given
        branch from this dataset.
    DeleteLinkRule:
      required:
      - aSideObjectTypeApiName
      - bSideObjectTypeApiName
      - linkTypeApiNameAtoB
      - linkTypeApiNameBtoA
      - type
      type: object
      properties:
        aSideObjectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        bSideObjectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        linkTypeApiNameAtoB:
          $ref: "#/components/schemas/LinkTypeApiName"
        linkTypeApiNameBtoA:
          $ref: "#/components/schemas/LinkTypeApiName"
        type:
          type: string
    DeleteObjectRule:
      required:
      - objectTypeApiName
      - type
      type: object
      properties:
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        type:
          type: string
    DeleteSchemaPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
      description: todo
    DisplayName:
      type: string
      description: The display name of the entity.
    Distance:
      required:
      - unit
      - value
      type: object
      properties:
        unit:
          $ref: "#/components/schemas/DistanceUnit"
        value:
          type: number
          format: double
      description: A measurement of distance.
    DistanceUnit:
      type: string
      enum:
      - MILLIMETERS
      - CENTIMETERS
      - METERS
      - KILOMETERS
      - INCHES
      - FEET
      - YARDS
      - MILES
      - NAUTICAL_MILES
    DoesNotIntersectBoundingBoxQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/BoundingBoxValue"
      description: |
        Returns objects where the specified field does not intersect the bounding box provided.
    DoesNotIntersectPolygonQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PolygonValue"
      description: |
        Returns objects where the specified field does not intersect the polygon provided.
    DoubleType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    DuplicateOrderBy:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            properties:
              type: array
              items:
                $ref: "#/components/schemas/PropertyApiName"
      description: The requested sort order includes duplicate properties.
    Duration:
      type: string
      description: An ISO 8601 formatted duration.
    EditObjectPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        The user does not have permission to edit this `ObjectType`.
    EqualsQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is equal to a value.
    EqualsQueryV2:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is equal to a value.
    Error:
      required:
      - error
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/Arg"
        error:
          $ref: "#/components/schemas/ErrorName"
    ErrorName:
      type: string
    ExecuteQueryRequest:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          nullable: true
    ExecuteQueryResponse:
      required:
      - value
      type: object
      properties:
        value:
          $ref: "#/components/schemas/DataValue"
    Feature:
      required:
      - type
      type: object
      properties:
        bbox:
          $ref: "#/components/schemas/BBox"
        geometry:
          $ref: "#/components/schemas/Geometry"
        id:
          description: |
            If a `Feature` has a commonly used identifier, that identifier
            SHOULD be included as a member of the Feature object with the name
            "id", and the value of this member is either a JSON string or
            number.
        properties:
          type: object
          additionalProperties: {}
          description: |
            A `Feature` object has a member with the name "properties".  The
            value of the properties member is an object (any JSON object or a
            JSON null value).
        type:
          type: string
      description: GeoJSon 'Feature' object
    FeatureCollection:
      required:
      - type
      type: object
      properties:
        bbox:
          $ref: "#/components/schemas/BBox"
        features:
          type: array
          items:
            $ref: "#/components/schemas/FeatureCollectionTypes"
        type:
          type: string
      description: GeoJSon 'FeatureCollection' object
    FeatureCollectionTypes:
      discriminator:
        propertyName: type
        mapping:
          Feature: "#/components/schemas/Feature"
      oneOf:
      - $ref: "#/components/schemas/Feature"
    FeaturePropertyKey:
      type: string
    FieldNameV1:
      type: string
      description: "A reference to an Ontology object property with the form `properties.{propertyApiName}`."
    File:
      required:
      - path
      - transactionRid
      - updatedTime
      type: object
      properties:
        path:
          $ref: "#/components/schemas/FilePath"
        sizeBytes:
          type: string
          format: long
        transactionRid:
          $ref: "#/components/schemas/TransactionRid"
        updatedTime:
          type: string
          format: date-time
    FileAlreadyExists:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          - path
          - transactionRid
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            path:
              $ref: "#/components/schemas/FilePath"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
      description: The given file path already exists in the dataset and transaction.
    FileNotFoundOnBranch:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          - path
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            path:
              $ref: "#/components/schemas/FilePath"
      description: "The requested file could not be found on the given branch, or\
        \ the client token does not have access to it."
    FileNotFoundOnTransactionRange:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          - endTransactionRid
          - path
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            endTransactionRid:
              $ref: "#/components/schemas/TransactionRid"
            path:
              $ref: "#/components/schemas/FilePath"
            startTransactionRid:
              $ref: "#/components/schemas/TransactionRid"
      description: "The requested file could not be found on the given transaction\
        \ range, or the client token does not have access to it."
    FilePath:
      type: string
      description: |
        The path to a File within Foundry. Examples: `my-file.txt`, `path/to/my-file.jpg`, `dataframe.snappy.parquet`.
    Filename:
      type: string
      description: |
        The name of a File within Foundry. Examples: `my-file.txt`, `my-file.jpg`, `dataframe.snappy.parquet`.
    FilesystemResource:
      type: object
    FilterValue:
      type: string
      description: |
        Represents the value of a property filter. For instance, false is the FilterValue in
        `properties.{propertyApiName}.isNull=false`.
    FloatType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    FolderNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - folderRid
          type: object
          properties:
            folderRid:
              $ref: "#/components/schemas/FolderRid"
      description: "The requested folder could not be found, or the client token does\
        \ not have access to it."
    FolderRid:
      type: string
    FunctionEncounteredUserFacingError:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - functionRid
          - functionVersion
          - message
          type: object
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
            message:
              type: string
      description: |
        The authored function failed to execute because of a user induced error. The message argument
        is meant to be displayed to the user.
    FunctionExecutionFailed:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - functionRid
          - functionVersion
          type: object
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
    FunctionExecutionTimedOut:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - TIMEOUT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - functionRid
          - functionVersion
          type: object
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
    FunctionInvalidInput:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - functionRid
          - functionVersion
          type: object
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
    FunctionRid:
      type: string
      description: |
        The unique resource identifier of a Function, useful for interacting with other Foundry APIs.
    FunctionVersion:
      type: string
      description: |
        The version of the given Function, written `<major>.<minor>.<patch>-<tag>`, where `-<tag>` is optional.
        Examples: `1.2.3`, `1.2.3-rc1`.
    Fuzzy:
      type: boolean
      description: Setting fuzzy to `true` allows approximate matching in search queries
        that support it.
    FuzzyV2:
      type: boolean
      description: Setting fuzzy to `true` allows approximate matching in search queries
        that support it.
    GeoJsonObject:
      description: |
        GeoJSon object

        The coordinate reference system for all GeoJSON coordinates is a
        geographic coordinate reference system, using the World Geodetic System
        1984 (WGS 84) datum, with longitude and latitude units of decimal
        degrees.
        This is equivalent to the coordinate reference system identified by the
        Open Geospatial Consortium (OGC) URN
        An OPTIONAL third-position element SHALL be the height in meters above
        or below the WGS 84 reference ellipsoid.
        In the absence of elevation values, applications sensitive to height or
        depth SHOULD interpret positions as being at local ground or sea level.
      discriminator:
        propertyName: type
        mapping:
          Feature: "#/components/schemas/Feature"
          FeatureCollection: "#/components/schemas/FeatureCollection"
          GeometryCollection: "#/components/schemas/GeometryCollection"
          LineString: "#/components/schemas/LineString"
          MultiLineString: "#/components/schemas/MultiLineString"
          MultiPoint: "#/components/schemas/MultiPoint"
          MultiPolygon: "#/components/schemas/MultiPolygon"
          Point: "#/components/schemas/GeoPoint"
          Polygon: "#/components/schemas/Polygon"
      oneOf:
      - $ref: "#/components/schemas/Feature"
      - $ref: "#/components/schemas/FeatureCollection"
      - $ref: "#/components/schemas/GeoPoint"
      - $ref: "#/components/schemas/MultiPoint"
      - $ref: "#/components/schemas/LineString"
      - $ref: "#/components/schemas/MultiLineString"
      - $ref: "#/components/schemas/Polygon"
      - $ref: "#/components/schemas/MultiPolygon"
      - $ref: "#/components/schemas/GeometryCollection"
    GeoPoint:
      required:
      - coordinates
      - type
      type: object
      properties:
        bbox:
          $ref: "#/components/schemas/BBox"
        coordinates:
          $ref: "#/components/schemas/Position"
        type:
          type: string
    GeoPointType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    GeoShapeType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    Geometry:
      description: Abstract type for all GeoJSon object except Feature and FeatureCollection
      discriminator:
        propertyName: type
        mapping:
          GeometryCollection: "#/components/schemas/GeometryCollection"
          LineString: "#/components/schemas/LineString"
          MultiLineString: "#/components/schemas/MultiLineString"
          MultiPoint: "#/components/schemas/MultiPoint"
          MultiPolygon: "#/components/schemas/MultiPolygon"
          Point: "#/components/schemas/GeoPoint"
          Polygon: "#/components/schemas/Polygon"
      oneOf:
      - $ref: "#/components/schemas/GeoPoint"
      - $ref: "#/components/schemas/MultiPoint"
      - $ref: "#/components/schemas/LineString"
      - $ref: "#/components/schemas/MultiLineString"
      - $ref: "#/components/schemas/Polygon"
      - $ref: "#/components/schemas/MultiPolygon"
      - $ref: "#/components/schemas/GeometryCollection"
    GeometryCollection:
      required:
      - type
      type: object
      properties:
        bbox:
          $ref: "#/components/schemas/BBox"
        geometries:
          minItems: 0
          type: array
          items:
            $ref: "#/components/schemas/Geometry"
        type:
          type: string
      description: |
        GeoJSon geometry collection

        GeometryCollections composed of a single part or a number of parts of a
        single type SHOULD be avoided when that single part or a single object
        of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could
        be used instead.
    GeotimeSeriesValue:
      required:
      - position
      - timestamp
      - type
      type: object
      properties:
        position:
          $ref: "#/components/schemas/Position"
        timestamp:
          type: string
          format: date-time
        type:
          type: string
      description: The underlying data values pointed to by a GeotimeSeriesReference.
    GroupMemberConstraint:
      required:
      - type
      type: object
      properties:
        type:
          type: string
      description: |
        The parameter value must be the user id of a member belonging to at least one of the groups defined by the constraint.
    GtQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is greater than a value.
    GtQueryV2:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is greater than a value.
    GteQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is greater than or equal
        to a value.
    GteQueryV2:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is greater than or equal
        to a value.
    IntegerType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    InterfaceLinkType:
      required:
      - apiName
      - cardinality
      - displayName
      - linkedEntityApiName
      - required
      - rid
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/InterfaceLinkTypeApiName"
        cardinality:
          $ref: "#/components/schemas/InterfaceLinkTypeCardinality"
        description:
          type: string
          description: The description of the interface link type.
        displayName:
          $ref: "#/components/schemas/DisplayName"
        linkedEntityApiName:
          $ref: "#/components/schemas/InterfaceLinkTypeLinkedEntityApiName"
        required:
          type: boolean
          description: |
            Whether each implementing object type must declare at least one implementation of this link.
        rid:
          $ref: "#/components/schemas/InterfaceLinkTypeRid"
      description: |
        A link type constraint defined at the interface level where the implementation of the links is provided
        by the implementing object types.
    InterfaceLinkTypeApiName:
      type: string
      description: A string indicating the API name to use for the interface link.
    InterfaceLinkTypeCardinality:
      type: string
      description: |
        The cardinality of the link in the given direction. Cardinality can be "ONE", meaning an object can
        link to zero or one other objects, or "MANY", meaning an object can link to any number of other objects.
      enum:
      - ONE
      - MANY
    InterfaceLinkTypeLinkedEntityApiName:
      description: A reference to the linked entity. This can either be an object
        or an interface type.
      discriminator:
        propertyName: type
        mapping:
          interfaceTypeApiName: "#/components/schemas/LinkedInterfaceTypeApiName"
          objectTypeApiName: "#/components/schemas/LinkedObjectTypeApiName"
      oneOf:
      - $ref: "#/components/schemas/LinkedInterfaceTypeApiName"
      - $ref: "#/components/schemas/LinkedObjectTypeApiName"
    InterfaceLinkTypeRid:
      type: string
      description: |
        The unique resource identifier of an interface link type, useful for interacting with other Foundry APIs.
    InterfaceType:
      required:
      - apiName
      - displayName
      - rid
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/InterfaceTypeApiName"
        description:
          type: string
          description: The description of the interface.
        displayName:
          $ref: "#/components/schemas/DisplayName"
        extendsInterfaces:
          type: array
          description: "A list of interface API names that this interface extends.\
            \ An interface can extend other interfaces to \ninherit their properties.\n"
          items:
            $ref: "#/components/schemas/InterfaceTypeApiName"
        links:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/InterfaceLinkType"
          description: |
            A map from an interface link type API name to the corresponding interface link type. The map describes the
            set of link types the interface has.
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SharedPropertyType"
          description: "A map from a shared property type API name to the corresponding\
            \ shared property type. The map describes the \nset of properties the\
            \ interface has. A shared property type must be unique across all of the\
            \ properties.\n"
        rid:
          $ref: "#/components/schemas/InterfaceTypeRid"
      description: Represents an interface type in the Ontology.
    InterfaceTypeApiName:
      type: string
      description: |
        The name of the interface type in the API in UpperCamelCase format. To find the API name for your interface
        type, use the `List interface types` endpoint or check the **Ontology Manager**.
    InterfaceTypeNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            apiName:
              $ref: "#/components/schemas/InterfaceTypeApiName"
            rid:
              $ref: "#/components/schemas/InterfaceTypeRid"
      description: "The requested interface type is not found, or the client token\
        \ does not have access to it."
    InterfaceTypeRid:
      type: string
      description: "The unique resource identifier of an interface, useful for interacting\
        \ with other Foundry APIs."
    IntersectsBoundingBoxQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/BoundingBoxValue"
      description: |
        Returns objects where the specified field intersects the bounding box provided.
    IntersectsPolygonQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PolygonValue"
      description: |
        Returns objects where the specified field intersects the polygon provided.
    InvalidAggregationOrdering:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        Aggregation ordering can only be applied to metrics with exactly one groupBy clause.
    InvalidAggregationRange:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        Aggregation range should include one lt or lte and one gt or gte.
    InvalidAggregationRangePropertyType:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          - property
          - propertyBaseType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
      description: |
        Range group by is not supported by property type.
    InvalidAggregationRangeValue:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          - property
          - propertyBaseType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
      description: |
        Aggregation value does not conform to the expected underlying type.
    InvalidApplyActionOptionCombination:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            invalidCombination:
              $ref: "#/components/schemas/ApplyActionRequestOptions"
      description: The given options are individually valid but cannot be used in
        the given combination.
    InvalidBranchId:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
      description: The requested branch name cannot be used. Branch names cannot be
        empty and must not look like RIDs or UUIDs.
    InvalidContentLength:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: "A `Content-Length` header is required for all uploads, but was\
        \ missing or invalid."
    InvalidContentType:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        The `Content-Type` cannot be inferred from the request content and filename.
        Please check your request content and filename to ensure they are compatible.
    InvalidDurationGroupByPropertyType:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          - property
          - propertyBaseType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
      description: |
        Invalid property type for duration groupBy.
    InvalidDurationGroupByValue:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        Duration groupBy value is invalid. Units larger than day must have value `1` and date properties do not support
        filtering on units smaller than day. As examples, neither bucketing by every two weeks nor bucketing a date by
        every two hours are allowed.
    InvalidFields:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            properties:
              type: array
              items:
                type: string
      description: |
        The value of the given field does not match the expected pattern. For example, an Ontology object property `id`
        should be written `properties.id`.
    InvalidGroupId:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - groupId
          type: object
          properties:
            groupId:
              type: string
      description: The provided value for a group id must be a UUID.
    InvalidPageSize:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - pageSize
          type: object
          properties:
            pageSize:
              $ref: "#/components/schemas/PageSize"
      description: The provided page size was zero or negative. Page sizes must be
        greater than zero.
    InvalidPageToken:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - pageToken
          type: object
          properties:
            pageToken:
              $ref: "#/components/schemas/PageToken"
      description: The provided page token could not be used to retrieve the next
        page of results.
    InvalidParameterCombination:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            providedParameters:
              type: array
              items:
                type: string
            validCombinations:
              type: array
              items:
                type: array
                items:
                  type: string
      description: The given parameters are individually valid but cannot be used
        in the given combination.
    InvalidParameterValue:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - parameterId
          type: object
          properties:
            parameterBaseType:
              $ref: "#/components/schemas/ValueType"
            parameterDataType:
              $ref: "#/components/schemas/OntologyDataType"
            parameterId:
              $ref: "#/components/schemas/ParameterId"
            parameterValue:
              $ref: "#/components/schemas/DataValue"
      description: |
        The value of the given parameter is invalid. See the documentation of `DataValue` for details on
        how parameters are represented.
    InvalidPropertyFilterValue:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - expectedType
          - property
          - propertyFilter
          - propertyFilterValue
          type: object
          properties:
            expectedType:
              $ref: "#/components/schemas/ValueType"
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyFilter:
              $ref: "#/components/schemas/PropertyFilter"
            propertyFilterValue:
              $ref: "#/components/schemas/FilterValue"
      description: |
        The value of the given property filter is invalid. For instance, 2 is an invalid value for
        `isNull` in `properties.address.isNull=2` because the `isNull` filter expects a value of boolean type.
    InvalidPropertyFiltersCombination:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - property
          type: object
          properties:
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyFilters:
              type: array
              items:
                $ref: "#/components/schemas/PropertyFilter"
      description: The provided filters cannot be used together.
    InvalidPropertyType:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - property
          - propertyBaseType
          type: object
          properties:
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
      description: |
        The given property type is not of the expected type.
    InvalidPropertyValue:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - property
          - propertyBaseType
          - propertyValue
          type: object
          properties:
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
            propertyValue:
              $ref: "#/components/schemas/PropertyValue"
      description: |
        The value of the given property is invalid. See the documentation of `PropertyValue` for details on
        how properties are represented.
    InvalidQueryParameterValue:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - parameterDataType
          - parameterId
          type: object
          properties:
            parameterDataType:
              $ref: "#/components/schemas/QueryDataType"
            parameterId:
              $ref: "#/components/schemas/ParameterId"
            parameterValue:
              $ref: "#/components/schemas/DataValue"
      description: |
        The value of the given parameter is invalid. See the documentation of `DataValue` for details on
        how parameters are represented.
    InvalidRangeQuery:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - field
          type: object
          properties:
            field:
              type: string
            gt:
              description: Greater than
            gte:
              description: Greater than or equal
            lt:
              description: Less than
            lte:
              description: Less than or equal
      description: |
        The specified query range filter is invalid.
    InvalidSortOrder:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - invalidSortOrder
          type: object
          properties:
            invalidSortOrder:
              type: string
      description: |
        The requested sort order of one or more properties is invalid. Valid sort orders are 'asc' or 'desc'. Sort
        order can also be omitted, and defaults to 'asc'.
    InvalidSortType:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - invalidSortType
          type: object
          properties:
            invalidSortType:
              type: string
      description: The requested sort type of one or more clauses is invalid. Valid
        sort types are 'p' or 'properties'.
    InvalidTransactionType:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          - transactionRid
          - transactionType
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
            transactionType:
              $ref: "#/components/schemas/TransactionType"
      description: "The given transaction type is not valid. Valid transaction types\
        \ are `SNAPSHOT`, `UPDATE`, `APPEND`, and `DELETE`."
    InvalidUserId:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - userId
          type: object
          properties:
            userId:
              type: string
      description: The provided value for a user id must be a UUID.
    IsNullQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
        value:
          type: boolean
      description: Returns objects based on the existence of the specified field.
    IsNullQueryV2:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          type: boolean
      description: Returns objects based on the existence of the specified field.
    LanguageModel:
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/LanguageModelApiName"
        source:
          $ref: "#/components/schemas/LanguageModelSource"
      description: Represents a language model.
    LanguageModelApiName:
      type: string
      description: |
        The name of the language model in the API. To find the API name for your model, use the `List language models`
        endpoint.
    LanguageModelSource:
      type: string
      enum:
      - global
      - hosted
    LanguageModelSourceNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - source
          type: object
          properties:
            source:
              $ref: "#/components/schemas/LanguageModelSource"
    LineString:
      required:
      - type
      type: object
      properties:
        bbox:
          $ref: "#/components/schemas/BBox"
        coordinates:
          $ref: "#/components/schemas/LineStringCoordinates"
        type:
          type: string
    LineStringCoordinates:
      minItems: 2
      type: array
      description: |
        GeoJSon fundamental geometry construct, array of two or more positions.
      items:
        $ref: "#/components/schemas/Position"
    LinearRing:
      minItems: 4
      type: array
      description: |
        A linear ring is a closed LineString with four or more positions.

        The first and last positions are equivalent, and they MUST contain
        identical values; their representation SHOULD also be identical.

        A linear ring is the boundary of a surface or the boundary of a hole in
        a surface.

        A linear ring MUST follow the right-hand rule with respect to the area
        it bounds, i.e., exterior rings are counterclockwise, and holes are
        clockwise.
      items:
        $ref: "#/components/schemas/Position"
    LinkAlreadyExists:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        The link the user is attempting to create already exists.
    LinkSideObject:
      required:
      - objectType
      - primaryKey
      type: object
      properties:
        objectType:
          $ref: "#/components/schemas/ObjectTypeApiName"
        primaryKey:
          $ref: "#/components/schemas/PropertyValue"
    LinkTypeApiName:
      type: string
      description: |
        The name of the link type in the API. To find the API name for your Link Type, check the **Ontology Manager**
        application.
    LinkTypeNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - linkType
          - objectType
          type: object
          properties:
            linkType:
              $ref: "#/components/schemas/LinkTypeApiName"
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
      description: "The link type is not found, or the user does not have access to\
        \ it."
    LinkTypeRid:
      type: string
    LinkTypeSide:
      required:
      - apiName
      - cardinality
      - displayName
      - objectTypeApiName
      - status
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/LinkTypeApiName"
        cardinality:
          $ref: "#/components/schemas/LinkTypeSideCardinality"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        foreignKeyPropertyApiName:
          $ref: "#/components/schemas/PropertyApiName"
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
    LinkTypeSideCardinality:
      type: string
      enum:
      - ONE
      - MANY
    LinkTypeSideV2:
      required:
      - apiName
      - cardinality
      - displayName
      - linkTypeRid
      - objectTypeApiName
      - status
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/LinkTypeApiName"
        cardinality:
          $ref: "#/components/schemas/LinkTypeSideCardinality"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        foreignKeyPropertyApiName:
          $ref: "#/components/schemas/PropertyApiName"
        linkTypeRid:
          $ref: "#/components/schemas/LinkTypeRid"
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
    LinkedInterfaceTypeApiName:
      required:
      - apiName
      - type
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/InterfaceTypeApiName"
        type:
          type: string
      description: A reference to the linked interface type.
    LinkedObjectNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - linkType
          - linkedObjectType
          type: object
          properties:
            linkType:
              $ref: "#/components/schemas/LinkTypeApiName"
            linkedObjectPrimaryKey:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/PrimaryKeyValue"
            linkedObjectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
      description: "The linked object with the given primary key is not found, or\
        \ the user does not have access to it."
    LinkedObjectTypeApiName:
      required:
      - apiName
      - type
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        type:
          type: string
      description: A reference to the linked object type.
    ListActionTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ActionType"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListActionTypesResponseV2:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ActionTypeV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListAttachmentsResponseV2:
      required:
      - type
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        type:
          type: string
    ListBranchesResponse:
      type: object
      properties:
        data:
          type: array
          description: The list of branches in the current page.
          items:
            $ref: "#/components/schemas/Branch"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListFilesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/File"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
      description: A page of Files and an optional page token that can be used to
        retrieve the next page.
    ListInterfaceTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/InterfaceType"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListLanguageModelsResponse:
      type: object
      properties:
        data:
          type: array
          description: The list of language models.
          items:
            $ref: "#/components/schemas/LanguageModel"
    ListLinkedObjectsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/OntologyObject"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListLinkedObjectsResponseV2:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/OntologyObjectV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListObjectTypesResponse:
      type: object
      properties:
        data:
          type: array
          description: The list of object types in the current page.
          items:
            $ref: "#/components/schemas/ObjectType"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListObjectTypesV2Response:
      type: object
      properties:
        data:
          type: array
          description: The list of object types in the current page.
          items:
            $ref: "#/components/schemas/ObjectTypeV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListObjectsResponse:
      required:
      - totalCount
      type: object
      properties:
        data:
          type: array
          description: The list of objects in the current page.
          items:
            $ref: "#/components/schemas/OntologyObject"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        totalCount:
          $ref: "#/components/schemas/TotalCount"
    ListObjectsResponseV2:
      required:
      - totalCount
      type: object
      properties:
        data:
          type: array
          description: The list of objects in the current page.
          items:
            $ref: "#/components/schemas/OntologyObjectV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        totalCount:
          $ref: "#/components/schemas/TotalCount"
    ListOntologiesResponse:
      type: object
      properties:
        data:
          type: array
          description: The list of Ontologies the user has access to.
          items:
            $ref: "#/components/schemas/Ontology"
    ListOntologiesV2Response:
      type: object
      properties:
        data:
          type: array
          description: The list of Ontologies the user has access to.
          items:
            $ref: "#/components/schemas/OntologyV2"
    ListOutgoingLinkTypesResponse:
      type: object
      properties:
        data:
          type: array
          description: The list of link type sides in the current page.
          items:
            $ref: "#/components/schemas/LinkTypeSide"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListOutgoingLinkTypesResponseV2:
      type: object
      properties:
        data:
          type: array
          description: The list of link type sides in the current page.
          items:
            $ref: "#/components/schemas/LinkTypeSideV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListQueryTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/QueryType"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    ListQueryTypesResponseV2:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/QueryTypeV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
    LoadObjectSetRequestV2:
      required:
      - objectSet
      type: object
      properties:
        excludeRid:
          type: boolean
          description: |
            A flag to exclude the retrieval of the `__rid` property.
            Setting this to true may improve performance of this endpoint for object types in OSV2.
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
        orderBy:
          $ref: "#/components/schemas/SearchOrderByV2"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageToken:
          $ref: "#/components/schemas/PageToken"
        select:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
      description: Represents the API POST body when loading an `ObjectSet`.
    LoadObjectSetResponseV2:
      required:
      - totalCount
      type: object
      properties:
        data:
          type: array
          description: The list of objects in the current Page.
          items:
            $ref: "#/components/schemas/OntologyObjectV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        totalCount:
          $ref: "#/components/schemas/TotalCount"
      description: Represents the API response when loading an `ObjectSet`.
    LocalFilePath:
      type: object
    LogicRule:
      discriminator:
        propertyName: type
        mapping:
          createLink: "#/components/schemas/CreateLinkRule"
          createObject: "#/components/schemas/CreateObjectRule"
          deleteLink: "#/components/schemas/DeleteLinkRule"
          deleteObject: "#/components/schemas/DeleteObjectRule"
          modifyObject: "#/components/schemas/ModifyObjectRule"
      oneOf:
      - $ref: "#/components/schemas/CreateObjectRule"
      - $ref: "#/components/schemas/ModifyObjectRule"
      - $ref: "#/components/schemas/DeleteObjectRule"
      - $ref: "#/components/schemas/CreateLinkRule"
      - $ref: "#/components/schemas/DeleteLinkRule"
    LongType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    LtQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is less than a value.
    LtQueryV2:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is less than a value.
    LteQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is less than or equal
        to a value.
    LteQueryV2:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PropertyValue"
      description: Returns objects where the specified field is less than or equal
        to a value.
    MalformedPropertyFilters:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - malformedPropertyFilter
          type: object
          properties:
            malformedPropertyFilter:
              type: string
      description: |
        At least one of requested filters are malformed. Please look at the documentation of `PropertyFilter`.
    MarketplaceActionMappingNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - actionType
          - artifactRepository
          - packageName
          type: object
          properties:
            actionType:
              $ref: "#/components/schemas/ActionTypeApiName"
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
      description: The given action could not be mapped to a Marketplace installation.
    MarketplaceInstallationNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - artifactRepository
          - packageName
          type: object
          properties:
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
      description: |
        The given marketplace installation could not be found or the user does not have access to it.
    MarketplaceLinkMappingNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - artifactRepository
          - linkType
          - packageName
          type: object
          properties:
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            linkType:
              $ref: "#/components/schemas/LinkTypeApiName"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
      description: The given link could not be mapped to a Marketplace installation.
    MarketplaceObjectMappingNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - artifactRepository
          - objectType
          - packageName
          type: object
          properties:
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
      description: The given object could not be mapped to a Marketplace installation.
    MarketplaceQueryMappingNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - artifactRepository
          - packageName
          - queryType
          type: object
          properties:
            artifactRepository:
              $ref: "#/components/schemas/ArtifactRepositoryRid"
            packageName:
              $ref: "#/components/schemas/SdkPackageName"
            queryType:
              $ref: "#/components/schemas/QueryApiName"
      description: The given query could not be mapped to a Marketplace installation.
    MarkingType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    MaxAggregation:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the maximum value for the provided field.
    MaxAggregationV2:
      required:
      - field
      - type
      type: object
      properties:
        direction:
          $ref: "#/components/schemas/OrderByDirection"
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the maximum value for the provided field.
    MediaType:
      type: string
      description: |
        The [media type](https://www.iana.org/assignments/media-types/media-types.xhtml) of the file or attachment.
        Examples: `application/json`, `application/pdf`, `application/octet-stream`, `image/jpeg`
    MinAggregation:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the minimum value for the provided field.
    MinAggregationV2:
      required:
      - field
      - type
      type: object
      properties:
        direction:
          $ref: "#/components/schemas/OrderByDirection"
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the minimum value for the provided field.
    MissingParameter:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            parameters:
              type: array
              items:
                $ref: "#/components/schemas/ParameterId"
      description: |
        Required parameters are missing. Please look at the `parameters` field to see which required parameters are
        missing from the request.
    MissingPostBody:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: "A post body is required for this endpoint, but was not found in\
        \ the request."
    ModifyObject:
      required:
      - objectType
      - primaryKey
      - type
      type: object
      properties:
        objectType:
          $ref: "#/components/schemas/ObjectTypeApiName"
        primaryKey:
          $ref: "#/components/schemas/PropertyValue"
        type:
          type: string
    ModifyObjectRule:
      required:
      - objectTypeApiName
      - type
      type: object
      properties:
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        type:
          type: string
    MultiLineString:
      required:
      - type
      type: object
      properties:
        bbox:
          $ref: "#/components/schemas/BBox"
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/LineStringCoordinates"
        type:
          type: string
    MultiPoint:
      required:
      - type
      type: object
      properties:
        bbox:
          $ref: "#/components/schemas/BBox"
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/Position"
        type:
          type: string
    MultiPolygon:
      required:
      - type
      type: object
      properties:
        bbox:
          $ref: "#/components/schemas/BBox"
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/LinearRing"
        type:
          type: string
    MultipleGroupByOnFieldNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            duplicateFields:
              type: array
              items:
                type: string
      description: |
        Aggregation cannot group by on the same field multiple times.
    MultiplePropertyValuesNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - property
          - propertyFilter
          type: object
          properties:
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyFilter:
              $ref: "#/components/schemas/PropertyFilter"
      description: |
        One of the requested property filters does not support multiple values. Please include only a single value for
        it.
    NestedQueryAggregation:
      required:
      - key
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/QueryAggregation"
        key: {}
    NotQuery:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
        value:
          $ref: "#/components/schemas/SearchJsonQuery"
      description: Returns objects where the query is not satisfied.
    NotQueryV2:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
        value:
          $ref: "#/components/schemas/SearchJsonQueryV2"
      description: Returns objects where the query is not satisfied.
    NullType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    ObjectAlreadyExists:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        The object the user is attempting to create already exists.
    ObjectChanged:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        An object used by this `Action` was changed by someone else while the `Action` was running.
    ObjectEdit:
      discriminator:
        propertyName: type
        mapping:
          addLink: "#/components/schemas/AddLink"
          addObject: "#/components/schemas/AddObject"
          modifyObject: "#/components/schemas/ModifyObject"
      oneOf:
      - $ref: "#/components/schemas/AddObject"
      - $ref: "#/components/schemas/ModifyObject"
      - $ref: "#/components/schemas/AddLink"
    ObjectEdits:
      required:
      - addedLinksCount
      - addedObjectCount
      - deletedLinksCount
      - deletedObjectsCount
      - modifiedObjectsCount
      - type
      type: object
      properties:
        addedLinksCount:
          type: integer
        addedObjectCount:
          type: integer
        deletedLinksCount:
          type: integer
        deletedObjectsCount:
          type: integer
        edits:
          type: array
          items:
            $ref: "#/components/schemas/ObjectEdit"
        modifiedObjectsCount:
          type: integer
        type:
          type: string
    ObjectNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            primaryKey:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/PrimaryKeyValue"
      description: "The requested object is not found, or the client token does not\
        \ have access to it."
    ObjectPrimaryKey:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/PropertyValue"
    ObjectPropertyType:
      description: |
        A union of all the types supported by Ontology Object properties.
      discriminator:
        propertyName: type
        mapping:
          array: "#/components/schemas/OntologyObjectArrayType"
          attachment: "#/components/schemas/AttachmentType"
          boolean: "#/components/schemas/BooleanType"
          byte: "#/components/schemas/ByteType"
          date: "#/components/schemas/DateType"
          decimal: "#/components/schemas/DecimalType"
          double: "#/components/schemas/DoubleType"
          float: "#/components/schemas/FloatType"
          geopoint: "#/components/schemas/GeoPointType"
          geoshape: "#/components/schemas/GeoShapeType"
          integer: "#/components/schemas/IntegerType"
          long: "#/components/schemas/LongType"
          marking: "#/components/schemas/MarkingType"
          short: "#/components/schemas/ShortType"
          string: "#/components/schemas/StringType"
          timeseries: "#/components/schemas/TimeseriesType"
          timestamp: "#/components/schemas/TimestampType"
      oneOf:
      - $ref: "#/components/schemas/OntologyObjectArrayType"
      - $ref: "#/components/schemas/AttachmentType"
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/ByteType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DecimalType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/FloatType"
      - $ref: "#/components/schemas/GeoPointType"
      - $ref: "#/components/schemas/GeoShapeType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/LongType"
      - $ref: "#/components/schemas/MarkingType"
      - $ref: "#/components/schemas/ShortType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/TimestampType"
      - $ref: "#/components/schemas/TimeseriesType"
    ObjectPropertyValueConstraint:
      required:
      - type
      type: object
      properties:
        type:
          type: string
      description: |
        The parameter value must be a property value of an object found within an object set.
    ObjectQueryResultConstraint:
      required:
      - type
      type: object
      properties:
        type:
          type: string
      description: |
        The parameter value must be the primary key of an object found within an object set.
    ObjectRid:
      type: string
      description: |
        The unique resource identifier of an object, useful for interacting with other Foundry APIs.
    ObjectSet:
      description: Represents the definition of an `ObjectSet` in the `Ontology`.
      discriminator:
        propertyName: type
        mapping:
          base: "#/components/schemas/ObjectSetBaseType"
          filter: "#/components/schemas/ObjectSetFilterType"
          intersect: "#/components/schemas/ObjectSetIntersectionType"
          reference: "#/components/schemas/ObjectSetReferenceType"
          searchAround: "#/components/schemas/ObjectSetSearchAroundType"
          static: "#/components/schemas/ObjectSetStaticType"
          subtract: "#/components/schemas/ObjectSetSubtractType"
          union: "#/components/schemas/ObjectSetUnionType"
      oneOf:
      - $ref: "#/components/schemas/ObjectSetBaseType"
      - $ref: "#/components/schemas/ObjectSetStaticType"
      - $ref: "#/components/schemas/ObjectSetReferenceType"
      - $ref: "#/components/schemas/ObjectSetFilterType"
      - $ref: "#/components/schemas/ObjectSetUnionType"
      - $ref: "#/components/schemas/ObjectSetIntersectionType"
      - $ref: "#/components/schemas/ObjectSetSubtractType"
      - $ref: "#/components/schemas/ObjectSetSearchAroundType"
    ObjectSetBaseType:
      required:
      - objectType
      - type
      type: object
      properties:
        objectType:
          type: string
        type:
          type: string
    ObjectSetFilterType:
      required:
      - objectSet
      - type
      - where
      type: object
      properties:
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
        type:
          type: string
        where:
          $ref: "#/components/schemas/SearchJsonQueryV2"
    ObjectSetIntersectionType:
      required:
      - type
      type: object
      properties:
        objectSets:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSet"
        type:
          type: string
    ObjectSetNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectSetRid
          type: object
          properties:
            objectSetRid:
              $ref: "#/components/schemas/ObjectSetRid"
      description: "The requested object set is not found, or the client token does\
        \ not have access to it."
    ObjectSetReferenceType:
      required:
      - reference
      - type
      type: object
      properties:
        reference:
          type: string
        type:
          type: string
    ObjectSetRid:
      type: string
    ObjectSetSearchAroundType:
      required:
      - link
      - objectSet
      - type
      type: object
      properties:
        link:
          $ref: "#/components/schemas/LinkTypeApiName"
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
        type:
          type: string
    ObjectSetStaticType:
      required:
      - type
      type: object
      properties:
        objects:
          type: array
          items:
            $ref: "#/components/schemas/ObjectRid"
        type:
          type: string
    ObjectSetStreamSubscribeRequest:
      required:
      - objectSet
      type: object
      properties:
        objectSet:
          $ref: "#/components/schemas/ObjectSet"
        ontology:
          $ref: "#/components/schemas/OntologyIdentifier"
        propertySet:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
        referenceSet:
          type: array
          items:
            $ref: "#/components/schemas/SelectedPropertyApiName"
    ObjectSetStreamSubscribeRequests:
      required:
      - id
      type: object
      properties:
        id:
          $ref: "#/components/schemas/RequestId"
        requests:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSetStreamSubscribeRequest"
      description: "The list of object sets that should be subscribed to. A client\
        \ can stop subscribing to an object set \nby removing the request from subsequent\
        \ ObjectSetStreamSubscribeRequests.\n"
    ObjectSetSubscribeResponse:
      discriminator:
        propertyName: type
        mapping:
          error: "#/components/schemas/SubscriptionError"
          qos: "#/components/schemas/QosError"
          success: "#/components/schemas/SubscriptionSuccess"
      oneOf:
      - $ref: "#/components/schemas/SubscriptionSuccess"
      - $ref: "#/components/schemas/SubscriptionError"
      - $ref: "#/components/schemas/QosError"
    ObjectSetSubscribeResponses:
      required:
      - id
      - type
      type: object
      properties:
        id:
          $ref: "#/components/schemas/RequestId"
        responses:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSetSubscribeResponse"
        type:
          type: string
      description: |
        Returns a response for every request in the same order. Duplicate requests will be assigned the same SubscriberId.
    ObjectSetSubtractType:
      required:
      - type
      type: object
      properties:
        objectSets:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSet"
        type:
          type: string
    ObjectSetUnionType:
      required:
      - type
      type: object
      properties:
        objectSets:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSet"
        type:
          type: string
    ObjectSetUpdate:
      discriminator:
        propertyName: type
        mapping:
          object: "#/components/schemas/ObjectUpdate"
          reference: "#/components/schemas/ReferenceUpdate"
      oneOf:
      - $ref: "#/components/schemas/ObjectUpdate"
      - $ref: "#/components/schemas/ReferenceUpdate"
    ObjectSetUpdates:
      required:
      - id
      - type
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"
        type:
          type: string
        updates:
          type: array
          items:
            $ref: "#/components/schemas/ObjectSetUpdate"
    ObjectState:
      type: string
      description: "Represents the state of the object within the object set. ADDED_OR_UPDATED\
        \ indicates that the object was \nadded to the set or the object has updated\
        \ and was previously in the set. REMOVED indicates that the object \nwas removed\
        \ from the set due to the object being deleted or the object no longer meets\
        \ the object set \ndefinition.\n"
      enum:
      - ADDED_OR_UPDATED
      - REMOVED
    ObjectType:
      required:
      - apiName
      - rid
      - status
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        description:
          type: string
          description: The description of the object type.
        displayName:
          $ref: "#/components/schemas/DisplayName"
        primaryKey:
          type: array
          description: The primary key of the object. This is a list of properties
            that can be used to uniquely identify the object.
          items:
            $ref: "#/components/schemas/PropertyApiName"
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Property"
          description: A map of the properties of the object type.
        rid:
          $ref: "#/components/schemas/ObjectTypeRid"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
        visibility:
          $ref: "#/components/schemas/ObjectTypeVisibility"
      description: Represents an object type in the Ontology.
    ObjectTypeApiName:
      type: string
      description: |
        The name of the object type in the API in camelCase format. To find the API name for your Object Type, use the
        `List object types` endpoint or check the **Ontology Manager**.
    ObjectTypeEdits:
      required:
      - type
      type: object
      properties:
        editedObjectTypes:
          type: array
          items:
            $ref: "#/components/schemas/ObjectTypeApiName"
        type:
          type: string
    ObjectTypeFullMetadata:
      required:
      - objectType
      type: object
      properties:
        implementsInterfaces:
          type: array
          description: A list of interfaces that this object type implements.
          items:
            $ref: "#/components/schemas/InterfaceTypeApiName"
        implementsInterfaces2:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ObjectTypeInterfaceImplementation"
          description: A list of interfaces that this object type implements and how
            it implements them.
        linkTypes:
          type: array
          items:
            $ref: "#/components/schemas/LinkTypeSideV2"
        objectType:
          $ref: "#/components/schemas/ObjectTypeV2"
        sharedPropertyTypeMapping:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyApiName"
          description: "A map from shared property type API name to backing local\
            \ property API name for the shared property types \npresent on this object\
            \ type.\n"
    ObjectTypeInterfaceImplementation:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyApiName"
    ObjectTypeNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            objectTypeRid:
              $ref: "#/components/schemas/ObjectTypeRid"
      description: "The requested object type is not found, or the client token does\
        \ not have access to it."
    ObjectTypeNotSynced:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
      description: |
        The requested object type is not synced into the ontology. Please reach out to your Ontology
        Administrator to re-index the object type in Ontology Management Application.
    ObjectTypeRid:
      type: string
      description: "The unique resource identifier of an object type, useful for interacting\
        \ with other Foundry APIs."
    ObjectTypeV2:
      required:
      - apiName
      - primaryKey
      - rid
      - status
      - titleProperty
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        description:
          type: string
          description: The description of the object type.
        displayName:
          $ref: "#/components/schemas/DisplayName"
        primaryKey:
          $ref: "#/components/schemas/PropertyApiName"
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyV2"
          description: A map of the properties of the object type.
        rid:
          $ref: "#/components/schemas/ObjectTypeRid"
        status:
          $ref: "#/components/schemas/ReleaseStatus"
        titleProperty:
          $ref: "#/components/schemas/PropertyApiName"
        visibility:
          $ref: "#/components/schemas/ObjectTypeVisibility"
      description: Represents an object type in the Ontology.
    ObjectTypeVisibility:
      type: string
      description: The suggested visibility of the object type.
      enum:
      - NORMAL
      - PROMINENT
      - HIDDEN
    ObjectTypesNotSynced:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            objectTypes:
              type: array
              items:
                $ref: "#/components/schemas/ObjectTypeApiName"
      description: |
        One or more of the requested object types are not synced into the ontology. Please reach out to your Ontology
        Administrator to re-index the object type(s) in Ontology Management Application.
    ObjectUpdate:
      required:
      - object
      - state
      - type
      type: object
      properties:
        object:
          $ref: "#/components/schemas/OntologyObjectV2"
        state:
          $ref: "#/components/schemas/ObjectState"
        type:
          type: string
    ObjectsExceededLimit:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        There are more objects, but they cannot be returned by this API. Only 10,000 objects are available through this
        API for a given request.
    OneOfConstraint:
      required:
      - otherValuesAllowed
      - type
      type: object
      properties:
        options:
          type: array
          items:
            $ref: "#/components/schemas/ParameterOption"
        otherValuesAllowed:
          type: boolean
          description: "A flag denoting whether custom, user provided values will\
            \ be considered valid. This is configured via the **Allowed \"Other\"\
            \ value** toggle in the **Ontology Manager**."
        type:
          type: string
      description: |
        The parameter has a manually predefined set of options.
    Ontology:
      required:
      - apiName
      - description
      - displayName
      - rid
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/OntologyApiName"
        description:
          type: string
        displayName:
          $ref: "#/components/schemas/DisplayName"
        rid:
          $ref: "#/components/schemas/OntologyRid"
      description: Metadata about an Ontology.
    OntologyApiName:
      type: string
    OntologyApiNameNotUnique:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - ontologyApiName
          type: object
          properties:
            ontologyApiName:
              $ref: "#/components/schemas/OntologyApiName"
      description: The given Ontology API name is not unique. Use the Ontology RID
        in place of the Ontology API name.
    OntologyArrayType:
      required:
      - itemType
      - type
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/OntologyDataType"
        type:
          type: string
    OntologyDataType:
      description: |
        A union of all the primitive types used by Palantir's Ontology-based products.
      discriminator:
        propertyName: type
        mapping:
          any: "#/components/schemas/AnyType"
          array: "#/components/schemas/OntologyArrayType"
          binary: "#/components/schemas/BinaryType"
          boolean: "#/components/schemas/BooleanType"
          byte: "#/components/schemas/ByteType"
          date: "#/components/schemas/DateType"
          decimal: "#/components/schemas/DecimalType"
          double: "#/components/schemas/DoubleType"
          float: "#/components/schemas/FloatType"
          integer: "#/components/schemas/IntegerType"
          long: "#/components/schemas/LongType"
          map: "#/components/schemas/OntologyMapType"
          marking: "#/components/schemas/MarkingType"
          object: "#/components/schemas/OntologyObjectType"
          objectSet: "#/components/schemas/OntologyObjectSetType"
          set: "#/components/schemas/OntologySetType"
          short: "#/components/schemas/ShortType"
          string: "#/components/schemas/StringType"
          struct: "#/components/schemas/OntologyStructType"
          timestamp: "#/components/schemas/TimestampType"
          unsupported: "#/components/schemas/UnsupportedType"
      oneOf:
      - $ref: "#/components/schemas/AnyType"
      - $ref: "#/components/schemas/BinaryType"
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/ByteType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DecimalType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/FloatType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/LongType"
      - $ref: "#/components/schemas/MarkingType"
      - $ref: "#/components/schemas/ShortType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/TimestampType"
      - $ref: "#/components/schemas/OntologyArrayType"
      - $ref: "#/components/schemas/OntologyMapType"
      - $ref: "#/components/schemas/OntologySetType"
      - $ref: "#/components/schemas/OntologyStructType"
      - $ref: "#/components/schemas/OntologyObjectType"
      - $ref: "#/components/schemas/OntologyObjectSetType"
      - $ref: "#/components/schemas/UnsupportedType"
    OntologyEditsExceededLimit:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - editsCount
          - editsLimit
          type: object
          properties:
            editsCount:
              type: integer
            editsLimit:
              type: integer
      description: |
        The number of edits to the Ontology exceeded the allowed limit.
        This may happen because of the request or because the Action is modifying too many objects.
        Please change the size of your request or contact the Ontology administrator.
    OntologyFullMetadata:
      required:
      - ontology
      type: object
      properties:
        actionTypes:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ActionTypeV2"
        interfaceTypes:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/InterfaceType"
        objectTypes:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ObjectTypeFullMetadata"
        ontology:
          $ref: "#/components/schemas/OntologyV2"
        queryTypes:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/QueryTypeV2"
        sharedPropertyTypes:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SharedPropertyType"
    OntologyIdentifier:
      type: string
      description: Either an ontology rid or an ontology api name.
    OntologyMapType:
      required:
      - keyType
      - type
      - valueType
      type: object
      properties:
        keyType:
          $ref: "#/components/schemas/OntologyDataType"
        type:
          type: string
        valueType:
          $ref: "#/components/schemas/OntologyDataType"
    OntologyNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            apiName:
              $ref: "#/components/schemas/OntologyApiName"
            ontologyRid:
              $ref: "#/components/schemas/OntologyRid"
      description: "The requested Ontology is not found, or the client token does\
        \ not have access to it."
    OntologyObject:
      required:
      - rid
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyValue"
          description: A map of the property values of the object.
          nullable: true
        rid:
          $ref: "#/components/schemas/ObjectRid"
      description: Represents an object in the Ontology.
    OntologyObjectArrayType:
      required:
      - subType
      - type
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/ObjectPropertyType"
        type:
          type: string
    OntologyObjectSetType:
      required:
      - type
      type: object
      properties:
        objectApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        type:
          type: string
    OntologyObjectType:
      required:
      - objectApiName
      - objectTypeApiName
      - type
      type: object
      properties:
        objectApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        objectTypeApiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        type:
          type: string
    OntologyObjectV2:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/PropertyValue"
      description: Represents an object in the Ontology.
    OntologyRid:
      type: string
      description: |
        The unique Resource Identifier (RID) of the Ontology. To look up your Ontology RID, please use the
        `List ontologies` endpoint or check the **Ontology Manager**.
    OntologySetType:
      required:
      - itemType
      - type
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/OntologyDataType"
        type:
          type: string
    OntologyStructField:
      required:
      - fieldType
      - name
      - required
      type: object
      properties:
        fieldType:
          $ref: "#/components/schemas/OntologyDataType"
        name:
          $ref: "#/components/schemas/StructFieldName"
        required:
          type: boolean
    OntologyStructType:
      required:
      - type
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/OntologyStructField"
        type:
          type: string
    OntologySyncing:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
      description: |
        The requested object type has been changed in the **Ontology Manager** and changes are currently being applied. Wait a
        few seconds and try again.
    OntologySyncingObjectTypes:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            objectTypes:
              type: array
              items:
                $ref: "#/components/schemas/ObjectTypeApiName"
      description: |
        One or more requested object types have been changed in the **Ontology Manager** and changes are currently being
        applied. Wait a few seconds and try again.
    OntologyV2:
      required:
      - apiName
      - description
      - displayName
      - rid
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/OntologyApiName"
        description:
          type: string
        displayName:
          $ref: "#/components/schemas/DisplayName"
        rid:
          $ref: "#/components/schemas/OntologyRid"
      description: Metadata about an Ontology.
    OpenTransactionAlreadyExists:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: A transaction is already open on this dataset and branch. A branch
        of a dataset can only have one open transaction at a time.
    OperationNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - id
          type: object
          properties:
            id:
              type: string
      description: "The operation is not found, or the user does not have access to\
        \ it."
    OrQuery:
      required:
      - type
      type: object
      properties:
        type:
          type: string
        value:
          type: array
          items:
            $ref: "#/components/schemas/SearchJsonQuery"
      description: Returns objects where at least 1 query is satisfied.
    OrQueryV2:
      required:
      - type
      type: object
      properties:
        type:
          type: string
        value:
          type: array
          items:
            $ref: "#/components/schemas/SearchJsonQueryV2"
      description: Returns objects where at least 1 query is satisfied.
    OrderBy:
      type: string
      description: "A command representing the list of properties to order by. Properties\
        \ should be delimited by commas and\nprefixed by `p` or `properties`. The\
        \ format expected format is\n`orderBy=properties.{property}:{sortDirection},properties.{property}:{sortDirection}...`\n\
        \nBy default, the ordering for a property is ascending, and this can be explicitly\
        \ specified by appending \n`:asc` (for ascending) or `:desc` (for descending).\n\
        \nExample: use `orderBy=properties.lastName:asc` to order by a single property,\
        \ \n`orderBy=properties.lastName,properties.firstName,properties.age:desc`\
        \ to order by multiple properties. \nYou may also use the shorthand `p` instead\
        \ of `properties` such as `orderBy=p.lastName:asc`.\n"
    OrderByDirection:
      type: string
      enum:
      - ASC
      - DESC
    PageSize:
      type: integer
      description: The page size to use for the endpoint.
    PageToken:
      type: string
      description: |
        The page token indicates where to start paging. This should be omitted from the first page's request.
        To fetch the next page, clients should take the value from the `nextPageToken` field of the previous response
        and populate the next request's `pageToken` field with it.
    Parameter:
      required:
      - baseType
      - required
      type: object
      properties:
        baseType:
          $ref: "#/components/schemas/ValueType"
        dataType:
          $ref: "#/components/schemas/OntologyDataType"
        description:
          type: string
        required:
          type: boolean
      description: Details about a parameter of an action or query.
    ParameterEvaluatedConstraint:
      description: "A constraint that an action parameter value must satisfy in order\
        \ to be considered valid.\nConstraints can be configured on action parameters\
        \ in the **Ontology Manager**. \nApplicable constraints are determined dynamically\
        \ based on parameter inputs. \nParameter values are evaluated against the\
        \ final set of constraints.\n\nThe type of the constraint.\n| Type       \
        \           | Description                                                \
        \                                                                        \
        \                                                                        \
        \                     |\n|-----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\
        | `arraySize`           | The parameter expects an array of values and the\
        \ size of the array must fall within the defined range.                  \
        \                                                                        \
        \                                |\n| `groupMember`         | The parameter\
        \ value must be the user id of a member belonging to at least one of the groups\
        \ defined by the constraint.                                             \
        \                                                             |\n| `objectPropertyValue`\
        \ | The parameter value must be a property value of an object found within\
        \ an object set.                                                         \
        \                                                                        \
        \          |\n| `objectQueryResult`   | The parameter value must be the primary\
        \ key of an object found within an object set.                           \
        \                                                                        \
        \                                         |\n| `oneOf`               | The\
        \ parameter has a manually predefined set of options.                    \
        \                                                                        \
        \                                                                        \
        \     |\n| `range`               | The parameter value must be within the\
        \ defined range.                                                         \
        \                                                                        \
        \                                          |\n| `stringLength`        | The\
        \ parameter value must have a length within the defined range.           \
        \                                                                        \
        \                                                                        \
        \     |\n| `stringRegexMatch`    | The parameter value must match a predefined\
        \ regular expression.                                                    \
        \                                                                        \
        \                                     |\n| `unevaluable`         | The parameter\
        \ cannot be evaluated because it depends on another parameter or object set\
        \ that can't be evaluated. This can happen when a parameter's allowed values\
        \ are defined by another parameter that is missing or invalid. |\n"
      discriminator:
        propertyName: type
        mapping:
          arraySize: "#/components/schemas/ArraySizeConstraint"
          groupMember: "#/components/schemas/GroupMemberConstraint"
          objectPropertyValue: "#/components/schemas/ObjectPropertyValueConstraint"
          objectQueryResult: "#/components/schemas/ObjectQueryResultConstraint"
          oneOf: "#/components/schemas/OneOfConstraint"
          range: "#/components/schemas/RangeConstraint"
          stringLength: "#/components/schemas/StringLengthConstraint"
          stringRegexMatch: "#/components/schemas/StringRegexMatchConstraint"
          unevaluable: "#/components/schemas/UnevaluableConstraint"
      oneOf:
      - $ref: "#/components/schemas/ArraySizeConstraint"
      - $ref: "#/components/schemas/GroupMemberConstraint"
      - $ref: "#/components/schemas/ObjectPropertyValueConstraint"
      - $ref: "#/components/schemas/ObjectQueryResultConstraint"
      - $ref: "#/components/schemas/OneOfConstraint"
      - $ref: "#/components/schemas/RangeConstraint"
      - $ref: "#/components/schemas/StringLengthConstraint"
      - $ref: "#/components/schemas/StringRegexMatchConstraint"
      - $ref: "#/components/schemas/UnevaluableConstraint"
    ParameterEvaluationResult:
      required:
      - required
      - result
      type: object
      properties:
        evaluatedConstraints:
          type: array
          items:
            $ref: "#/components/schemas/ParameterEvaluatedConstraint"
        required:
          type: boolean
          description: Represents whether the parameter is a required input to the
            action.
        result:
          $ref: "#/components/schemas/ValidationResult"
      description: Represents the validity of a parameter against the configured constraints.
    ParameterId:
      type: string
      description: |
        The unique identifier of the parameter. Parameters are used as inputs when an action or query is applied.
        Parameters can be viewed and managed in the **Ontology Manager**.
    ParameterKey:
      type: string
      description: |
        The unique identifier of the model parameter.
    ParameterObjectNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            primaryKey:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/PrimaryKeyValue"
      description: |
        The parameter object reference or parameter default value is not found, or the client token does not have access to it.
    ParameterObjectSetRidNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectSetRid
          type: object
          properties:
            objectSetRid:
              type: string
      description: |
        The parameter object set RID is not found, or the client token does not have access to it.
    ParameterOption:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/DisplayName"
        value:
          description: An allowed configured value for a parameter within an action.
      description: |
        A possible value for the parameter. This is defined in the **Ontology Manager** by Actions admins.
    ParameterTypeNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - parameterBaseType
          - parameterId
          type: object
          properties:
            parameterBaseType:
              $ref: "#/components/schemas/ValueType"
            parameterId:
              $ref: "#/components/schemas/ParameterId"
      description: |
        The type of the requested parameter is not currently supported by this API. If you need support for this,
        please reach out to Palantir Support.
    ParameterValue: {}
    ParametersNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - actionType
          type: object
          properties:
            actionType:
              $ref: "#/components/schemas/ActionTypeApiName"
            configuredParameterIds:
              type: array
              items:
                $ref: "#/components/schemas/ParameterId"
            unknownParameterIds:
              type: array
              items:
                $ref: "#/components/schemas/ParameterId"
      description: |
        The provided parameter ID was not found for the action. Please look at the `configuredParameterIds` field
        to see which ones are available.
    ParentAttachmentPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: |
        The user does not have permission to parent attachments.
    PhraseQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
        value:
          type: string
      description: Returns objects where the specified field contains the provided
        value as a substring.
    Polygon:
      required:
      - type
      type: object
      properties:
        bbox:
          $ref: "#/components/schemas/BBox"
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/LinearRing"
        type:
          type: string
    PolygonValue:
      discriminator:
        propertyName: type
        mapping:
          Polygon: "#/components/schemas/Polygon"
      oneOf:
      - $ref: "#/components/schemas/Polygon"
    Position:
      maxItems: 3
      minItems: 2
      type: array
      description: |
        GeoJSon fundamental geometry construct.

        A position is an array of numbers. There MUST be two or more elements.
        The first two elements are longitude and latitude, precisely in that order and using decimal numbers.
        Altitude or elevation MAY be included as an optional third element.

        Implementations SHOULD NOT extend positions beyond three elements
        because the semantics of extra elements are unspecified and ambiguous.
        Historically, some implementations have used a fourth element to carry
        a linear referencing measure (sometimes denoted as "M") or a numerical
        timestamp, but in most situations a parser will not be able to properly
        interpret these values. The interpretation and meaning of additional
        elements is beyond the scope of this specification, and additional
        elements MAY be ignored by parsers.
      items:
        $ref: "#/components/schemas/Coordinate"
    PrefixQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        type:
          type: string
        value:
          type: string
      description: Returns objects where the specified field starts with the provided
        value.
    PreviewMode:
      type: boolean
      description: Enables the use of preview functionality.
    PrimaryKeyValue:
      description: Represents the primary key value that is used as a unique identifier
        for an object.
    PropertiesHaveDifferentIds:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            properties:
              type: array
              items:
                $ref: "#/components/schemas/SharedPropertyTypeApiName"
      description: |
        Properties used in ordering must have the same ids. Temporary restriction imposed due to OSS limitations.
    PropertiesNotFilterable:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            properties:
              type: array
              items:
                $ref: "#/components/schemas/PropertyApiName"
      description: |
        Results could not be filtered by the requested properties. Please mark the properties as *Searchable* and
        *Selectable* in the **Ontology Manager** to be able to filter on those properties. There may be a short delay
        between the time a property is marked *Searchable* and *Selectable* and when it can be used.
    PropertiesNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            properties:
              type: array
              items:
                $ref: "#/components/schemas/PropertyApiName"
      description: The requested properties are not found on the object type.
    PropertiesNotSearchable:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            propertyApiNames:
              type: array
              items:
                $ref: "#/components/schemas/PropertyApiName"
      description: |
        Search is not enabled on the specified properties. Please mark the properties as *Searchable*
        in the **Ontology Manager** to enable search on them. There may be a short delay
        between the time a property is marked *Searchable* and when it can be used.
    PropertiesNotSortable:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            properties:
              type: array
              items:
                $ref: "#/components/schemas/PropertyApiName"
      description: |
        Results could not be ordered by the requested properties. Please mark the properties as *Searchable* and
        *Sortable* in the **Ontology Manager** to enable their use in `orderBy` parameters. There may be a short delay
        between the time a property is set to *Searchable* and *Sortable* and when it can be used.
    Property:
      required:
      - baseType
      type: object
      properties:
        baseType:
          $ref: "#/components/schemas/ValueType"
        description:
          type: string
        displayName:
          $ref: "#/components/schemas/DisplayName"
      description: Details about some property of an object.
    PropertyApiName:
      type: string
      description: |
        The name of the property in the API. To find the API name for your property, use the `Get object type`
        endpoint or check the **Ontology Manager**.
    PropertyApiNameNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - propertyBaseType
          - propertyId
          type: object
          properties:
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
            propertyId:
              $ref: "#/components/schemas/PropertyId"
      description: |
        A property that was required to have an API name, such as a primary key, is missing one. You can set an API
        name for it using the **Ontology Manager**.
    PropertyBaseTypeNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          - property
          - propertyBaseType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyBaseType:
              $ref: "#/components/schemas/ValueType"
      description: |
        The type of the requested property is not currently supported by this API. If you need support for this,
        please reach out to Palantir Support.
    PropertyFilter:
      type: string
      description: |
        Represents a filter used on properties.

        Endpoints that accept this supports optional parameters that have the form:
        `properties.{propertyApiName}.{propertyFilter}={propertyValueEscapedString}` to filter the returned objects.
        For instance, you may use `properties.firstName.eq=John` to find objects that contain a property called
        "firstName" that has the exact value of "John".

        The following are a list of supported property filters:

        - `properties.{propertyApiName}.contains` - supported on arrays and can be used to filter array properties
          that have at least one of the provided values. If multiple query parameters are provided, then objects
          that have any of the given values for the specified property will be matched.
        - `properties.{propertyApiName}.eq` - used to filter objects that have the exact value for the provided
          property. If multiple query parameters are provided, then objects that have any of the given values
          will be matched. For instance, if the user provides a request by doing
          `?properties.firstName.eq=John&properties.firstName.eq=Anna`, then objects that have a firstName property
          of either John or Anna will be matched. This filter is supported on all property types except Arrays.
        - `properties.{propertyApiName}.neq` - used to filter objects that do not have the provided property values.
          Similar to the `eq` filter, if multiple values are provided, then objects that have any of the given values
          will be excluded from the result.
        - `properties.{propertyApiName}.lt`, `properties.{propertyApiName}.lte`, `properties.{propertyApiName}.gt`
          `properties.{propertyApiName}.gte` - represent less than, less than or equal to, greater than, and greater
          than or equal to respectively. These are supported on date, timestamp, byte, integer, long, double, decimal.
        - `properties.{propertyApiName}.isNull` - used to filter objects where the provided property is (or is not) null.
          This filter is supported on all property types.
    PropertyFiltersNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - property
          type: object
          properties:
            property:
              $ref: "#/components/schemas/PropertyApiName"
            propertyFilters:
              type: array
              items:
                $ref: "#/components/schemas/PropertyFilter"
      description: |
        At least one of the requested property filters are not supported. See the documentation of `PropertyFilter` for
        a list of supported property filters.
    PropertyId:
      type: string
      description: |
        The immutable ID of a property. Property IDs are only used to identify properties in the **Ontology Manager**
        application and assign them API names. In every other case, API names should be used instead of property IDs.
    PropertyTypesSearchNotSupported:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            parameters:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: "#/components/schemas/PropertyApiName"
      description: |
        The search on the property types are not supported. See the `Search Objects` documentation for
        a list of supported search queries on different property types.
    PropertyV2:
      required:
      - dataType
      type: object
      properties:
        dataType:
          $ref: "#/components/schemas/ObjectPropertyType"
        description:
          type: string
        displayName:
          $ref: "#/components/schemas/DisplayName"
      description: Details about some property of an object.
    PropertyValue:
      description: |
        Represents the value of a property in the following format.

        | Type       | JSON encoding                                         | Example                                                                                            |
        |----------- |-------------------------------------------------------|----------------------------------------------------------------------------------------------------|
        | Array      | array                                                 | `["alpha", "bravo", "charlie"]`                                                                    |
        | Attachment | JSON encoded `AttachmentProperty` object              | `{"rid":"ri.blobster.main.attachment.2f944bae-5851-4204-8615-920c969a9f2e"}`                       |
        | Boolean    | boolean                                               | `true`                                                                                             |
        | Byte       | number                                                | `31`                                                                                               |
        | Date       | ISO 8601 extended local date string                   | `"2021-05-01"`                                                                                     |
        | Decimal    | string                                                | `"2.718281828"`                                                                                    |
        | Double     | number                                                | `3.14159265`                                                                                       |
        | Float      | number                                                | `3.14159265`                                                                                       |
        | GeoPoint   | geojson                                               | `{"type":"Point","coordinates":[102.0,0.5]}`                                                       |
        | GeoShape   | geojson                                               | `{"type":"LineString","coordinates":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}`            |
        | Integer    | number                                                | `238940`                                                                                           |
        | Long       | string                                                | `"58319870951433"`                                                                                 |
        | Short      | number                                                | `8739`                                                                                             |
        | String     | string                                                | `"Call me Ishmael"`                                                                                |
        | Timestamp  | ISO 8601 extended offset date-time string in UTC zone | `"2021-01-04T05:00:00Z"`                                                                           |

        Note that for backwards compatibility, the Boolean, Byte, Double, Float, Integer, and Short types can also be encoded as JSON strings.
    PropertyValueEscapedString:
      type: string
      description: Represents the value of a property in string format. This is used
        in URL parameters.
    PutSchemaPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: todo
    QosError:
      required:
      - type
      type: object
      properties:
        type:
          type: string
      description: |
        An error indicating that the subscribe request should be attempted on a different node.
    QueryAggregation:
      required:
      - key
      - value
      type: object
      properties:
        key: {}
        value: {}
    QueryAggregationKeyType:
      description: |
        A union of all the types supported by query aggregation keys.
      discriminator:
        propertyName: type
        mapping:
          boolean: "#/components/schemas/BooleanType"
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          integer: "#/components/schemas/IntegerType"
          range: "#/components/schemas/QueryAggregationRangeType"
          string: "#/components/schemas/StringType"
          timestamp: "#/components/schemas/TimestampType"
      oneOf:
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/TimestampType"
      - $ref: "#/components/schemas/QueryAggregationRangeType"
    QueryAggregationRange:
      type: object
      properties:
        endValue:
          description: Exclusive end.
        startValue:
          description: Inclusive start.
      description: Specifies a range from an inclusive start value to an exclusive
        end value.
    QueryAggregationRangeSubType:
      description: |
        A union of all the types supported by query aggregation ranges.
      discriminator:
        propertyName: type
        mapping:
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          integer: "#/components/schemas/IntegerType"
          timestamp: "#/components/schemas/TimestampType"
      oneOf:
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/TimestampType"
    QueryAggregationRangeType:
      required:
      - subType
      - type
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/QueryAggregationRangeSubType"
        type:
          type: string
    QueryAggregationValueType:
      description: |
        A union of all the types supported by query aggregation keys.
      discriminator:
        propertyName: type
        mapping:
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          timestamp: "#/components/schemas/TimestampType"
      oneOf:
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/TimestampType"
    QueryApiName:
      type: string
      description: |
        The name of the Query in the API.
    QueryArrayType:
      required:
      - subType
      - type
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/QueryDataType"
        type:
          type: string
    QueryDataType:
      description: |
        A union of all the types supported by Ontology Query parameters or outputs.
      discriminator:
        propertyName: type
        mapping:
          array: "#/components/schemas/QueryArrayType"
          attachment: "#/components/schemas/AttachmentType"
          boolean: "#/components/schemas/BooleanType"
          date: "#/components/schemas/DateType"
          double: "#/components/schemas/DoubleType"
          float: "#/components/schemas/FloatType"
          integer: "#/components/schemas/IntegerType"
          long: "#/components/schemas/LongType"
          "null": "#/components/schemas/NullType"
          object: "#/components/schemas/OntologyObjectType"
          objectSet: "#/components/schemas/OntologyObjectSetType"
          set: "#/components/schemas/QuerySetType"
          string: "#/components/schemas/StringType"
          struct: "#/components/schemas/QueryStructType"
          threeDimensionalAggregation: "#/components/schemas/ThreeDimensionalAggregation"
          timestamp: "#/components/schemas/TimestampType"
          twoDimensionalAggregation: "#/components/schemas/TwoDimensionalAggregation"
          union: "#/components/schemas/QueryUnionType"
          unsupported: "#/components/schemas/UnsupportedType"
      oneOf:
      - $ref: "#/components/schemas/QueryArrayType"
      - $ref: "#/components/schemas/AttachmentType"
      - $ref: "#/components/schemas/BooleanType"
      - $ref: "#/components/schemas/DateType"
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/FloatType"
      - $ref: "#/components/schemas/IntegerType"
      - $ref: "#/components/schemas/LongType"
      - $ref: "#/components/schemas/OntologyObjectSetType"
      - $ref: "#/components/schemas/OntologyObjectType"
      - $ref: "#/components/schemas/QuerySetType"
      - $ref: "#/components/schemas/StringType"
      - $ref: "#/components/schemas/QueryStructType"
      - $ref: "#/components/schemas/ThreeDimensionalAggregation"
      - $ref: "#/components/schemas/TimestampType"
      - $ref: "#/components/schemas/TwoDimensionalAggregation"
      - $ref: "#/components/schemas/QueryUnionType"
      - $ref: "#/components/schemas/NullType"
      - $ref: "#/components/schemas/UnsupportedType"
    QueryEncounteredUserFacingError:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - functionRid
          - functionVersion
          - message
          type: object
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
            message:
              type: string
      description: |
        The authored `Query` failed to execute because of a user induced error. The message argument
        is meant to be displayed to the user.
    QueryMemoryExceededLimit:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - TIMEOUT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - functionRid
          - functionVersion
          type: object
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
      description: |
        Memory limits were exceeded for the `Query` execution.
    QueryNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - query
          type: object
          properties:
            query:
              $ref: "#/components/schemas/QueryApiName"
      description: "The query is not found, or the user does not have access to it."
    QueryOutputV2:
      required:
      - dataType
      - required
      type: object
      properties:
        dataType:
          $ref: "#/components/schemas/QueryDataType"
        required:
          type: boolean
      description: Details about the output of a query.
    QueryParameterV2:
      required:
      - dataType
      type: object
      properties:
        dataType:
          $ref: "#/components/schemas/QueryDataType"
        description:
          type: string
      description: Details about a parameter of a query.
    QuerySetType:
      required:
      - subType
      - type
      type: object
      properties:
        subType:
          $ref: "#/components/schemas/QueryDataType"
        type:
          type: string
    QueryStructField:
      required:
      - fieldType
      - name
      type: object
      properties:
        fieldType:
          $ref: "#/components/schemas/QueryDataType"
        name:
          $ref: "#/components/schemas/StructFieldName"
    QueryStructType:
      required:
      - type
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/QueryStructField"
        type:
          type: string
    QueryThreeDimensionalAggregation:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/NestedQueryAggregation"
    QueryTimeExceededLimit:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - TIMEOUT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - functionRid
          - functionVersion
          type: object
          properties:
            functionRid:
              $ref: "#/components/schemas/FunctionRid"
            functionVersion:
              $ref: "#/components/schemas/FunctionVersion"
      description: |
        Time limits were exceeded for the `Query` execution.
    QueryTwoDimensionalAggregation:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/QueryAggregation"
    QueryType:
      required:
      - apiName
      - rid
      - version
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/QueryApiName"
        description:
          type: string
        displayName:
          $ref: "#/components/schemas/DisplayName"
        output:
          $ref: "#/components/schemas/OntologyDataType"
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Parameter"
        rid:
          $ref: "#/components/schemas/FunctionRid"
        version:
          $ref: "#/components/schemas/FunctionVersion"
      description: Represents a query type in the Ontology.
    QueryTypeV2:
      required:
      - apiName
      - output
      - rid
      - version
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/QueryApiName"
        description:
          type: string
        displayName:
          $ref: "#/components/schemas/DisplayName"
        output:
          $ref: "#/components/schemas/QueryDataType"
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/QueryParameterV2"
        rid:
          $ref: "#/components/schemas/FunctionRid"
        version:
          $ref: "#/components/schemas/FunctionVersion"
      description: Represents a query type in the Ontology.
    QueryUnionType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
        unionTypes:
          type: array
          items:
            $ref: "#/components/schemas/QueryDataType"
    RangeConstraint:
      required:
      - type
      type: object
      properties:
        gt:
          description: Greater than
        gte:
          description: Greater than or equal
        lt:
          description: Less than
        lte:
          description: Less than or equal
        type:
          type: string
      description: |
        The parameter value must be within the defined range.
    ReadTablePermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
      description: The provided token does not have permission to read the given dataset
        as a table.
    ReferenceUpdate:
      required:
      - apiName
      - primaryKey
      - propertyApiName
      - type
      - value
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/ObjectTypeApiName"
        primaryKey:
          $ref: "#/components/schemas/ObjectPrimaryKey"
        propertyApiName:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/ReferenceValue"
      description: |
        The updated data value associated with an object instance's external reference. The object instance
        is uniquely identified by an object type and a primary key. Note that the value of the property
        field returns a dereferenced value rather than the reference itself.
    ReferenceValue:
      description: Resolved data values pointed to by a reference.
      discriminator:
        propertyName: type
        mapping:
          geotimeSeriesValue: "#/components/schemas/GeotimeSeriesValue"
      oneOf:
      - $ref: "#/components/schemas/GeotimeSeriesValue"
    RefreshObjectSet:
      required:
      - id
      - type
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"
        type:
          type: string
      description: |
        The list of updated Foundry Objects cannot be provided. The object set must be refreshed using Object Set Service.
    RelativeTime:
      required:
      - unit
      - value
      - when
      type: object
      properties:
        unit:
          $ref: "#/components/schemas/RelativeTimeSeriesTimeUnit"
        value:
          type: integer
        when:
          $ref: "#/components/schemas/RelativeTimeRelation"
      description: |
        A relative time, such as "3 days before" or "2 hours after" the current moment.
    RelativeTimeRange:
      required:
      - type
      type: object
      properties:
        endTime:
          $ref: "#/components/schemas/RelativeTime"
        startTime:
          $ref: "#/components/schemas/RelativeTime"
        type:
          type: string
      description: |
        A relative time range for a time series query.
    RelativeTimeRelation:
      type: string
      enum:
      - BEFORE
      - AFTER
    RelativeTimeSeriesTimeUnit:
      type: string
      enum:
      - MILLISECONDS
      - SECONDS
      - MINUTES
      - HOURS
      - DAYS
      - WEEKS
      - MONTHS
      - YEARS
    ReleaseStatus:
      type: string
      description: The release status of the entity.
      enum:
      - ACTIVE
      - EXPERIMENTAL
      - DEPRECATED
    RequestId:
      type: string
      description: Unique request id
      format: uuid
    ResourceNameAlreadyExists:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - CONFLICT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - parentFolderRid
          - resourceName
          type: object
          properties:
            parentFolderRid:
              $ref: "#/components/schemas/FolderRid"
            resourceName:
              type: string
      description: The provided resource name is already in use by another resource
        in the same folder.
    ResourcePath:
      type: string
      description: |
        A path in the Foundry file tree.
    ReturnEditsMode:
      type: string
      enum:
      - ALL
      - NONE
    SchemaNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - branchId
          - datasetRid
          type: object
          properties:
            branchId:
              $ref: "#/components/schemas/BranchId"
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
      description: "A schema could not be found for the given dataset and branch,\
        \ or the client token does not have access to it."
    SdkPackageName:
      type: string
    SearchJsonQuery:
      discriminator:
        propertyName: type
        mapping:
          allTerms: "#/components/schemas/AllTermsQuery"
          and: "#/components/schemas/AndQuery"
          anyTerm: "#/components/schemas/AnyTermQuery"
          contains: "#/components/schemas/ContainsQuery"
          eq: "#/components/schemas/EqualsQuery"
          gt: "#/components/schemas/GtQuery"
          gte: "#/components/schemas/GteQuery"
          isNull: "#/components/schemas/IsNullQuery"
          lt: "#/components/schemas/LtQuery"
          lte: "#/components/schemas/LteQuery"
          not: "#/components/schemas/NotQuery"
          or: "#/components/schemas/OrQuery"
          phrase: "#/components/schemas/PhraseQuery"
          prefix: "#/components/schemas/PrefixQuery"
      oneOf:
      - $ref: "#/components/schemas/LtQuery"
      - $ref: "#/components/schemas/GtQuery"
      - $ref: "#/components/schemas/LteQuery"
      - $ref: "#/components/schemas/GteQuery"
      - $ref: "#/components/schemas/EqualsQuery"
      - $ref: "#/components/schemas/IsNullQuery"
      - $ref: "#/components/schemas/ContainsQuery"
      - $ref: "#/components/schemas/AndQuery"
      - $ref: "#/components/schemas/OrQuery"
      - $ref: "#/components/schemas/NotQuery"
      - $ref: "#/components/schemas/PrefixQuery"
      - $ref: "#/components/schemas/PhraseQuery"
      - $ref: "#/components/schemas/AnyTermQuery"
      - $ref: "#/components/schemas/AllTermsQuery"
    SearchJsonQueryV2:
      discriminator:
        propertyName: type
        mapping:
          and: "#/components/schemas/AndQueryV2"
          contains: "#/components/schemas/ContainsQueryV2"
          containsAllTerms: "#/components/schemas/ContainsAllTermsQuery"
          containsAllTermsInOrder: "#/components/schemas/ContainsAllTermsInOrderQuery"
          containsAllTermsInOrderPrefixLastTerm: "#/components/schemas/ContainsAllTermsInOrderPrefixLastTerm"
          containsAnyTerm: "#/components/schemas/ContainsAnyTermQuery"
          doesNotIntersectBoundingBox: "#/components/schemas/DoesNotIntersectBoundingBoxQuery"
          doesNotIntersectPolygon: "#/components/schemas/DoesNotIntersectPolygonQuery"
          eq: "#/components/schemas/EqualsQueryV2"
          gt: "#/components/schemas/GtQueryV2"
          gte: "#/components/schemas/GteQueryV2"
          intersectsBoundingBox: "#/components/schemas/IntersectsBoundingBoxQuery"
          intersectsPolygon: "#/components/schemas/IntersectsPolygonQuery"
          isNull: "#/components/schemas/IsNullQueryV2"
          lt: "#/components/schemas/LtQueryV2"
          lte: "#/components/schemas/LteQueryV2"
          not: "#/components/schemas/NotQueryV2"
          or: "#/components/schemas/OrQueryV2"
          startsWith: "#/components/schemas/StartsWithQuery"
          withinBoundingBox: "#/components/schemas/WithinBoundingBoxQuery"
          withinDistanceOf: "#/components/schemas/WithinDistanceOfQuery"
          withinPolygon: "#/components/schemas/WithinPolygonQuery"
      oneOf:
      - $ref: "#/components/schemas/LtQueryV2"
      - $ref: "#/components/schemas/GtQueryV2"
      - $ref: "#/components/schemas/LteQueryV2"
      - $ref: "#/components/schemas/GteQueryV2"
      - $ref: "#/components/schemas/EqualsQueryV2"
      - $ref: "#/components/schemas/IsNullQueryV2"
      - $ref: "#/components/schemas/ContainsQueryV2"
      - $ref: "#/components/schemas/AndQueryV2"
      - $ref: "#/components/schemas/OrQueryV2"
      - $ref: "#/components/schemas/NotQueryV2"
      - $ref: "#/components/schemas/StartsWithQuery"
      - $ref: "#/components/schemas/ContainsAllTermsInOrderQuery"
      - $ref: "#/components/schemas/ContainsAllTermsInOrderPrefixLastTerm"
      - $ref: "#/components/schemas/ContainsAnyTermQuery"
      - $ref: "#/components/schemas/ContainsAllTermsQuery"
      - $ref: "#/components/schemas/WithinDistanceOfQuery"
      - $ref: "#/components/schemas/WithinBoundingBoxQuery"
      - $ref: "#/components/schemas/IntersectsBoundingBoxQuery"
      - $ref: "#/components/schemas/DoesNotIntersectBoundingBoxQuery"
      - $ref: "#/components/schemas/WithinPolygonQuery"
      - $ref: "#/components/schemas/IntersectsPolygonQuery"
      - $ref: "#/components/schemas/DoesNotIntersectPolygonQuery"
    SearchObjectsForInterfaceRequest:
      type: object
      properties:
        augmentedProperties:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/PropertyApiName"
          description: "A map from object type API name to a list of property type\
            \ API names. For each returned object, if the \nobject’s object type is\
            \ a key in the map, then we augment the response for that object type\
            \ with the list \nof properties specified in the value.\n"
        augmentedSharedPropertyTypes:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/SharedPropertyTypeApiName"
          description: "A map from interface type API name to a list of shared property\
            \ type API names. For each returned object, if\nthe object implements\
            \ an interface that is a key in the map, then we augment the response\
            \ for that object \ntype with the list of properties specified in the\
            \ value.\n"
        orderBy:
          $ref: "#/components/schemas/SearchOrderByV2"
        otherInterfaceTypes:
          type: array
          description: "A list of interface type API names. Object types must implement\
            \ all the mentioned interfaces in order to be \nincluded in the response.\n"
          items:
            $ref: "#/components/schemas/InterfaceTypeApiName"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageToken:
          $ref: "#/components/schemas/PageToken"
        selectedObjectTypes:
          type: array
          description: "A list of object type API names that should be included in\
            \ the response. If non-empty, object types that are\nnot mentioned will\
            \ not be included in the response even if they implement the specified\
            \ interface. Omit the \nparameter to include all object types.\n"
          items:
            $ref: "#/components/schemas/ObjectTypeApiName"
        selectedSharedPropertyTypes:
          type: array
          description: "A list of shared property type API names of the interface\
            \ type that should be included in the response. \nOmit this parameter\
            \ to include all properties of the interface type in the response.\n"
          items:
            $ref: "#/components/schemas/SharedPropertyTypeApiName"
        where:
          $ref: "#/components/schemas/SearchJsonQueryV2"
    SearchObjectsRequest:
      required:
      - query
      type: object
      properties:
        fields:
          type: array
          description: |
            The API names of the object type properties to include in the response.
          items:
            $ref: "#/components/schemas/PropertyApiName"
        orderBy:
          $ref: "#/components/schemas/SearchOrderBy"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageToken:
          $ref: "#/components/schemas/PageToken"
        query:
          $ref: "#/components/schemas/SearchJsonQuery"
    SearchObjectsRequestV2:
      type: object
      properties:
        excludeRid:
          type: boolean
          description: |
            A flag to exclude the retrieval of the `__rid` property.
            Setting this to true may improve performance of this endpoint for object types in OSV2.
        orderBy:
          $ref: "#/components/schemas/SearchOrderByV2"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageToken:
          $ref: "#/components/schemas/PageToken"
        select:
          type: array
          description: |
            The API names of the object type properties to include in the response.
          items:
            $ref: "#/components/schemas/PropertyApiName"
        where:
          $ref: "#/components/schemas/SearchJsonQueryV2"
    SearchObjectsResponse:
      required:
      - totalCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/OntologyObject"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        totalCount:
          $ref: "#/components/schemas/TotalCount"
    SearchObjectsResponseV2:
      required:
      - totalCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/OntologyObjectV2"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"
        totalCount:
          $ref: "#/components/schemas/TotalCount"
    SearchOrderBy:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/SearchOrdering"
      description: Specifies the ordering of search results by a field and an ordering
        direction.
    SearchOrderByV2:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/SearchOrderingV2"
      description: Specifies the ordering of search results by a field and an ordering
        direction.
    SearchOrdering:
      required:
      - field
      type: object
      properties:
        direction:
          type: string
          description: Specifies the ordering direction (can be either `asc` or `desc`)
        field:
          $ref: "#/components/schemas/FieldNameV1"
    SearchOrderingV2:
      required:
      - field
      type: object
      properties:
        direction:
          type: string
          description: Specifies the ordering direction (can be either `asc` or `desc`)
        field:
          $ref: "#/components/schemas/PropertyApiName"
    SelectedPropertyApiName:
      type: string
      description: |
        By default, anytime an object is requested, every property belonging to that object is returned.
        The response can be filtered to only include certain properties using the `properties` query parameter.

        Properties to include can be specified in one of two ways.

        - A comma delimited list as the value for the `properties` query parameter
          `properties={property1ApiName},{property2ApiName}`
        - Multiple `properties` query parameters.
          `properties={property1ApiName}&properties={property2ApiName}`

        The primary key of the object will always be returned even if it wasn't specified in the `properties` values.

        Unknown properties specified in the `properties` list will result in a `PropertiesNotFound` error.

        To find the API name for your property, use the `Get object type` endpoint or check the **Ontology Manager**.
    SharedPropertiesNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            missingSharedProperties:
              type: array
              items:
                $ref: "#/components/schemas/SharedPropertyTypeApiName"
            objectType:
              type: array
              items:
                $ref: "#/components/schemas/ObjectTypeApiName"
      description: The requested shared property types are not present on every object
        type.
    SharedPropertyType:
      required:
      - apiName
      - dataType
      - displayName
      - rid
      type: object
      properties:
        apiName:
          $ref: "#/components/schemas/SharedPropertyTypeApiName"
        dataType:
          $ref: "#/components/schemas/ObjectPropertyType"
        description:
          type: string
          description: A short text that describes the SharedPropertyType.
        displayName:
          $ref: "#/components/schemas/DisplayName"
        rid:
          $ref: "#/components/schemas/SharedPropertyTypeRid"
      description: A property type that can be shared across object types.
    SharedPropertyTypeApiName:
      type: string
      description: |
        The name of the shared property type in the API in lowerCamelCase format. To find the API name for your
        shared property type, use the `List shared property types` endpoint or check the **Ontology Manager**.
    SharedPropertyTypeNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            apiName:
              $ref: "#/components/schemas/SharedPropertyTypeApiName"
            rid:
              $ref: "#/components/schemas/SharedPropertyTypeRid"
      description: "The requested shared property type is not found, or the client\
        \ token does not have access to it."
    SharedPropertyTypeRid:
      type: string
      description: |
        The unique resource identifier of an shared property type, useful for interacting with other Foundry APIs.
    ShortType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    SizeBytes:
      type: string
      description: The size of the file or attachment in bytes.
      format: long
    StartsWithQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          type: string
      description: Returns objects where the specified field starts with the provided
        value.
    StreamMessage:
      discriminator:
        propertyName: type
        mapping:
          objectSetChanged: "#/components/schemas/ObjectSetUpdates"
          refreshObjectSet: "#/components/schemas/RefreshObjectSet"
          subscribeResponses: "#/components/schemas/ObjectSetSubscribeResponses"
          subscriptionClosed: "#/components/schemas/SubscriptionClosed"
      oneOf:
      - $ref: "#/components/schemas/ObjectSetSubscribeResponses"
      - $ref: "#/components/schemas/ObjectSetUpdates"
      - $ref: "#/components/schemas/RefreshObjectSet"
      - $ref: "#/components/schemas/SubscriptionClosed"
    StreamTimeSeriesPointsRequest:
      type: object
      properties:
        range:
          $ref: "#/components/schemas/TimeRange"
    StreamTimeSeriesPointsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesPoint"
    StringLengthConstraint:
      required:
      - type
      type: object
      properties:
        gt:
          description: Greater than
        gte:
          description: Greater than or equal
        lt:
          description: Less than
        lte:
          description: Less than or equal
        type:
          type: string
      description: |
        The parameter value must have a length within the defined range.
        *This range is always inclusive.*
    StringRegexMatchConstraint:
      required:
      - regex
      - type
      type: object
      properties:
        configuredFailureMessage:
          type: string
          description: |
            The message indicating that the regular expression was not matched.
            This is configured per parameter in the **Ontology Manager**.
        regex:
          type: string
          description: The regular expression configured in the **Ontology Manager**.
        type:
          type: string
      description: |
        The parameter value must match a predefined regular expression.
    StringType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    StructFieldName:
      type: string
      description: |
        The name of a field in a `Struct`.
    SubmissionCriteriaEvaluation:
      required:
      - result
      type: object
      properties:
        configuredFailureMessage:
          type: string
          description: |
            The message indicating one of the **submission criteria** was not satisfied.
            This is configured per **submission criteria** in the **Ontology Manager**.
        result:
          $ref: "#/components/schemas/ValidationResult"
      description: |
        Contains the status of the **submission criteria**.
        **Submission criteria** are the prerequisites that need to be satisfied before an Action can be applied.
        These are configured in the **Ontology Manager**.
    SubscriptionClosed:
      required:
      - error
      - id
      - type
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        id:
          $ref: "#/components/schemas/SubscriptionId"
        type:
          type: string
      description: |
        The subscription has been closed due to an irrecoverable error during its lifecycle.
    SubscriptionError:
      required:
      - type
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
        type:
          type: string
    SubscriptionId:
      type: string
      description: A unique identifier used to associate subscription requests with
        responses.
      format: uuid
    SubscriptionSuccess:
      required:
      - id
      - type
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"
        type:
          type: string
    SumAggregation:
      required:
      - field
      - type
      type: object
      properties:
        field:
          $ref: "#/components/schemas/FieldNameV1"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the sum of values for the provided field.
    SumAggregationV2:
      required:
      - field
      - type
      type: object
      properties:
        direction:
          $ref: "#/components/schemas/OrderByDirection"
        field:
          $ref: "#/components/schemas/PropertyApiName"
        name:
          $ref: "#/components/schemas/AggregationMetricName"
        type:
          type: string
      description: Computes the sum of values for the provided field.
    SyncApplyActionResponseV2:
      type: object
      properties:
        edits:
          $ref: "#/components/schemas/ActionResults"
        validation:
          $ref: "#/components/schemas/ValidateActionResponseV2"
    TableExportFormat:
      type: string
      description: |
        Format for tabular dataset export.
      enum:
      - ARROW
      - CSV
    ThreeDimensionalAggregation:
      required:
      - keyType
      - type
      - valueType
      type: object
      properties:
        keyType:
          $ref: "#/components/schemas/QueryAggregationKeyType"
        type:
          type: string
        valueType:
          $ref: "#/components/schemas/TwoDimensionalAggregation"
    TimeRange:
      description: An absolute or relative range for a time series query.
      discriminator:
        propertyName: type
        mapping:
          absolute: "#/components/schemas/AbsoluteTimeRange"
          relative: "#/components/schemas/RelativeTimeRange"
      oneOf:
      - $ref: "#/components/schemas/AbsoluteTimeRange"
      - $ref: "#/components/schemas/RelativeTimeRange"
    TimeSeriesItemType:
      description: |
        A union of the types supported by time series properties.
      discriminator:
        propertyName: type
        mapping:
          double: "#/components/schemas/DoubleType"
          string: "#/components/schemas/StringType"
      oneOf:
      - $ref: "#/components/schemas/DoubleType"
      - $ref: "#/components/schemas/StringType"
    TimeSeriesPoint:
      required:
      - time
      - value
      type: object
      properties:
        time:
          type: string
          description: An ISO 8601 timestamp
          format: date-time
        value:
          description: An object which is either an enum String or a double number.
      description: |
        A time and value pair.
    TimeUnit:
      type: string
      enum:
      - MILLISECONDS
      - SECONDS
      - MINUTES
      - HOURS
      - DAYS
      - WEEKS
      - MONTHS
      - YEARS
      - QUARTERS
    TimeseriesType:
      required:
      - itemType
      - type
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/TimeSeriesItemType"
        type:
          type: string
    TimestampType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
    TotalCount:
      type: string
      description: |
        The total number of items across all pages.
      format: long
    Transaction:
      required:
      - createdTime
      - rid
      - status
      - transactionType
      type: object
      properties:
        closedTime:
          type: string
          description: "The timestamp when the transaction was closed, in ISO 8601\
            \ timestamp format."
          format: date-time
        createdTime:
          type: string
          description: "The timestamp when the transaction was created, in ISO 8601\
            \ timestamp format."
          format: date-time
        rid:
          $ref: "#/components/schemas/TransactionRid"
        status:
          $ref: "#/components/schemas/TransactionStatus"
        transactionType:
          $ref: "#/components/schemas/TransactionType"
      description: |
        An operation that modifies the files within a dataset.
    TransactionNotCommitted:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          - transactionRid
          - transactionStatus
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
            transactionStatus:
              $ref: "#/components/schemas/TransactionStatus"
      description: The given transaction has not been committed.
    TransactionNotFound:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - NOT_FOUND
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          - transactionRid
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
      description: "The requested transaction could not be found on the dataset, or\
        \ the client token does not have access to it."
    TransactionNotOpen:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          - transactionRid
          - transactionStatus
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
            transactionStatus:
              $ref: "#/components/schemas/TransactionStatus"
      description: The given transaction is not open.
    TransactionRid:
      type: string
      description: |
        The Resource Identifier (RID) of a Transaction. Example: `ri.foundry.main.transaction.0a0207cb-26b7-415b-bc80-66a3aa3933f4`.
    TransactionStatus:
      type: string
      description: |
        The status of a Transaction.
      enum:
      - ABORTED
      - COMMITTED
      - OPEN
    TransactionType:
      type: string
      description: |
        The type of a Transaction.
      enum:
      - APPEND
      - UPDATE
      - SNAPSHOT
      - DELETE
    TwoDimensionalAggregation:
      required:
      - keyType
      - type
      - valueType
      type: object
      properties:
        keyType:
          $ref: "#/components/schemas/QueryAggregationKeyType"
        type:
          type: string
        valueType:
          $ref: "#/components/schemas/QueryAggregationValueType"
    UnevaluableConstraint:
      required:
      - type
      type: object
      properties:
        type:
          type: string
      description: |
        The parameter cannot be evaluated because it depends on another parameter or object set that can't be evaluated.
        This can happen when a parameter's allowed values are defined by another parameter that is missing or invalid.
    UnknownDistanceUnit:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - unknownUnit
          type: object
          properties:
            knownUnits:
              type: array
              items:
                $ref: "#/components/schemas/DistanceUnit"
            unknownUnit:
              type: string
      description: An unknown distance unit was provided.
    UnknownParameter:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
          properties:
            expectedParameters:
              type: array
              items:
                $ref: "#/components/schemas/ParameterId"
            unknownParameters:
              type: array
              items:
                $ref: "#/components/schemas/ParameterId"
      description: |
        The provided parameters were not found. Please look at the `knownParameters` field
        to see which ones are available.
    UnsupportedObjectSet:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - INVALID_ARGUMENT
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          type: object
      description: The requested object set is not supported.
    UnsupportedType:
      required:
      - type
      - unsupportedType
      type: object
      properties:
        type:
          type: string
        unsupportedType:
          type: string
    UpdatedTime:
      type: string
      description: |
        The time at which the resource was most recently updated.
    UploadFilePermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - datasetRid
          - path
          - transactionRid
          type: object
          properties:
            datasetRid:
              $ref: "#/components/schemas/DatasetRid"
            path:
              $ref: "#/components/schemas/FilePath"
            transactionRid:
              $ref: "#/components/schemas/TransactionRid"
      description: The provided token does not have permission to upload the given
        file to the given dataset and transaction.
    UserId:
      type: string
      description: |
        A Foundry User ID.
      format: uuid
    ValidateActionRequest:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DataValue"
          nullable: true
    ValidateActionResponse:
      required:
      - result
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ParameterEvaluationResult"
        result:
          $ref: "#/components/schemas/ValidationResult"
        submissionCriteria:
          type: array
          items:
            $ref: "#/components/schemas/SubmissionCriteriaEvaluation"
    ValidateActionResponseV2:
      required:
      - result
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ParameterEvaluationResult"
        result:
          $ref: "#/components/schemas/ValidationResult"
        submissionCriteria:
          type: array
          items:
            $ref: "#/components/schemas/SubmissionCriteriaEvaluation"
    ValidationResult:
      type: string
      description: |
        Represents the state of a validation.
      enum:
      - VALID
      - INVALID
    ValueType:
      type: string
      description: |
        A string indicating the type of each data value. Note that these types can be nested, for example an array of
        structs.

        | Type                | JSON value                                                                                                        |
        |---------------------|-------------------------------------------------------------------------------------------------------------------|
        | Array               | `Array<T>`, where `T` is the type of the array elements, e.g. `Array<String>`.                                    |
        | Attachment          | `Attachment`                                                                                                      |
        | Boolean             | `Boolean`                                                                                                         |
        | Byte                | `Byte`                                                                                                            |
        | Date                | `LocalDate`                                                                                                       |
        | Decimal             | `Decimal`                                                                                                         |
        | Double              | `Double`                                                                                                          |
        | Float               | `Float`                                                                                                           |
        | Integer             | `Integer`                                                                                                         |
        | Long                | `Long`                                                                                                            |
        | Marking             | `Marking`                                                                                                         |
        | OntologyObject      | `OntologyObject<T>` where `T` is the API name of the referenced object type.                                      |
        | Short               | `Short`                                                                                                           |
        | String              | `String`                                                                                                          |
        | Struct              | `Struct<T>` where `T` contains field name and type pairs, e.g. `Struct<{ firstName: String, lastName: string }>`  |
        | Timeseries          | `TimeSeries<T>` where `T` is either `String` for an enum series or `Double` for a numeric series.                 |
        | Timestamp           | `Timestamp`                                                                                                       |
    ViewObjectPermissionDenied:
      required:
      - errorName
      - errorCode
      - parameters
      properties:
        errorCode:
          type: string
          enum:
          - PERMISSION_DENIED
        errorInstanceId:
          type: string
          format: uuid
        errorName:
          type: string
        parameters:
          required:
          - objectType
          type: object
          properties:
            objectType:
              $ref: "#/components/schemas/ObjectTypeApiName"
      description: |
        The provided token does not have permission to view any data sources backing this object type. Ensure the object
        type has backing data sources configured and visible.
    WithinBoundingBoxPoint:
      discriminator:
        propertyName: type
        mapping:
          Point: "#/components/schemas/GeoPoint"
      oneOf:
      - $ref: "#/components/schemas/GeoPoint"
    WithinBoundingBoxQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/BoundingBoxValue"
      description: |
        Returns objects where the specified field contains a point within the bounding box provided.
    WithinDistanceOfQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/CenterPoint"
      description: |
        Returns objects where the specified field contains a point within the distance provided of the center point.
    WithinPolygonQuery:
      required:
      - field
      - type
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/PropertyApiName"
        type:
          type: string
        value:
          $ref: "#/components/schemas/PolygonValue"
      description: |
        Returns objects where the specified field contains a point within the polygon provided.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
